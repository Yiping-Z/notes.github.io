{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This page will include my study notes for Framworks/Languages/Algorithms/Online Courses/Readings.</p>"},{"location":"index.html#frameworks","title":"Frameworks","text":"<ul> <li>Kubernetes</li> <li>Spring</li> <li>Springboot</li> <li>SQL</li> <li>Redis</li> </ul>"},{"location":"index.html#languages","title":"Languages","text":"<ul> <li>Go</li> <li>Java</li> </ul>"},{"location":"index.html#algorithms","title":"Algorithms","text":""},{"location":"index.html#online-courses-readings","title":"Online Courses / Readings","text":"<ul> <li>Psychology</li> </ul>"},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html","title":"Day 29 \u5206\u800c\u6cbb\u4e4b, \u72b6\u6001\u538b\u7f29\u6a21\u7248","text":""},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html#29","title":"29: \u5206\u800c\u6cbb\u4e4b","text":"<p>\u5251\u6307 Offer II 101. \u5206\u5272\u7b49\u548c\u5b50\u96c6</p> <pre><code>dp[nums.size() - 1][target]\nfor (int i = 1; i &lt; nums.size(); i++) {\n    for (int j = 1; j &lt;= sum; j++) {\n        if (j - nums[i] &gt;= 0) {\n            dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]]; \n        } else {\n            dp[i][j] = dp[i - 1][j];\n        }\n    }\n}\n</code></pre>"},{"location":"2023-04-29-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day29.html#31","title":"31: \u72b6\u6001\u538b\u7f29\u6a21\u7248","text":"<pre><code>const int maxn = 12;\nconst int inf  = 100000000;\n\nclass Solution {\n    int n;\n    int mat[maxn][maxn];                                   // (1)\n    int f[maxn][maxn][1&lt;&lt;maxn];                            // (2)\npublic:\n    void fillGraphMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {     // (3)\n        memset(mat, 0, sizeof(mat));\n        for(int i = 0; i &lt; n; ++i) {\n            for(int j = 0; j &lt; graph[i].size(); ++j) {\n                mat[i][ graph[i][j] ] = 1;\n            }\n        }\n    }\n\n    int dfs(int st, int en, int state) {                   // (4)\n        if(  !( (1&lt;&lt;st) &amp; state ) ) {                      // (5)\n            return inf;\n        }\n        if(  !( (1&lt;&lt;en) &amp; state ) ) {                      // (6)\n            return inf;\n        }\n        if(st == en) {\n            if(state == (1&lt;&lt;st)) {\n                return 0;                                  // (7)\n            }\n        }\n\n        int &amp;ret = f[st][en][state];\n        if(ret != -1) {\n            return ret;                                    // (8)\n        }\n        ret = inf;\n        for(int i = 0; i &lt; n; ++i) {                       // (9)\n            // (st -&gt; ... -&gt; i)  U  (i -&gt; en) \n            if(!mat[i][en]) {                              // (10)\n                continue;\n            }\n            int a = dfs(st, i, state);                     // (11)\n            int b = dfs(st, i, state ^ (1&lt;&lt;en));           // (12)\n            ret = min( ret, min(a, b) + 1 );               // (13)\n        }\n        return ret;\n    }\n\n    int shortestPathLength(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {\n        n = graph.size();\n        fillGraphMatrix(graph);\n        int ret = 100000000;\n        memset(f, -1, sizeof(f));\n\n        for(int i = 0; i &lt; n; ++i) {\n            for(int j = 0; j &lt; n; ++j) {\n                int &amp;ans = f[i][j][(1&lt;&lt;n) - 1];\n                ans = dfs(i, j, (1&lt;&lt;n) - 1);              // (14)\n                ret = min(ans, ret);\n            }\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html","title":"Day 30 \u72b6\u6001\u538b\u7f29, \u62d3\u6251\u6392\u5e8f","text":""},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html#31","title":"31. \u72b6\u6001\u538b\u7f29","text":"<p>526. Beautiful Arrangement</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1an integers from 1 to n, permutate, either: perm[i] % i == 0 or i % perm[i] == 0</p> <pre><code>class Solution {\npublic:\n    int countArrangement(int n) {\n        vector&lt;int&gt; f(1 &lt;&lt; n);\n        f[0] = 1;\n        // \u904d\u5386\u6240\u6709\u53ef\u80fd\u60c5\u51b5\n        for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n            //\u88ab\u9009\u4e2d\u7684\u4e2a\u6570\n            int num = __builtin_popcount(mask);\n            for (int i = 0; i &lt; n; i++) {\n                //\u7b2ci + 1\u4f4d\u6570\u88ab\u9009\u4e2d &amp;&amp; \u53ef\u4ee5\u88ab\u653e\u5230\u6700\u9ad8\u4f4d\u4e0a\n                if (mask &amp; (1 &lt;&lt; i) &amp;&amp; (num % (i + 1) == 0 || (i + 1) % num == 0)) {\n                    // \u52a0\u4e0a\u5269\u4f59n-1\u4e2a\u6570\u7684\u53ef\u80fd\u6392\u5e8f\u65b9\u5f0f\u7684\u4e2a\u6570\n                    f[mask] += f[mask ^ (1 &lt;&lt; i)];\n                }\n            }\n        }\n        return f[(1 &lt;&lt; n) - 1];\n    }\n};\n</code></pre> <p>1255. Maximum Score Words Formed by Letters</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1aGiven list of words, and list of single letters and score of every character, return maximum score of any valid set of words formed by the letters given. Each letter can only be used once.</p> <p>\u601d\u8def\uff1a\u7edf\u8ba1\u63d0\u4f9b\u7684\u5b57\u6bcd\u6b21\u6570 \u904d\u5386\u6240\u6709\u53ef\u80fd\u60c5\u51b5\uff0cfor (int s = 1; s &lt; (1 &lt;&lt; n); s++) { \u7edf\u8ba1\u5b50\u96c6\u4e2d\u6240\u6709\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570 \u5982\u679c\u6b21\u6570\u90fd\u6ca1\u6709\u8d85\u8fc7\u63d0\u4f9b\u7684\u6b21\u6570\uff0c\u5c06\u5f53\u524d\u548c\u4e0e\u6700\u5927\u548c\u6bd4\u8f83\uff0c\u66f4\u65b0\u6700\u5927\u548c</p> <pre><code>class Solution {\npublic:\n    int maxScoreWords(vector&lt;string&gt;&amp; words, vector&lt;char&gt;&amp; letters, vector&lt;int&gt;&amp; score) {\n        int n = words.size(), res = 0;\n        vector&lt;int&gt; count(26);\n        for (auto c : letters) {\n            count[c - 'a']++;\n        }\n        for (int s = 1; s &lt; (1 &lt;&lt; n); s++) {\n            vector&lt;int&gt; wordCount(26); // \u7edf\u8ba1\u5b50\u96c6 s \u6240\u6709\u5355\u8bcd\u7684\u5b57\u6bcd\u6570\u76ee\n            for (int k = 0; k &lt; n; k++) {\n                if ((s &amp; (1 &lt;&lt; k)) == 0) { // words[k] \u4e0d\u5728\u5b50\u96c6 s \u4e2d\n                    continue;\n                }\n                for (auto c : words[k]) {\n                    wordCount[c - 'a']++;\n                }\n            }\n            bool ok = true; // \u5224\u65ad\u5b50\u96c6 s \u662f\u5426\u5408\u6cd5\n            int sum = 0; // \u4fdd\u5b58\u5b50\u96c6 s \u7684\u5f97\u5206\n            for (int i = 0; i &lt; 26; i++) {\n                sum += score[i] * wordCount[i];\n                ok = ok &amp;&amp; (wordCount[i] &lt;= count[i]);\n            }\n            if (ok) {\n                res = max(res, sum);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"2023-04-30-%E8%8B%B1%E9%9B%84%E7%AE%97%E6%B3%95%E8%81%94%E7%9B%9F-Day30.html#30","title":"30: \u62d3\u6251\u6392\u5e8f","text":"<p>1976. Number of Ways to Arrive at Destination</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1aGiven integer n, and 2D array roads where roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>], meaning there is a road between u<sub>i</sub>, and v<sub>i</sub>, that takes time<sub>i</sub> to travel, return the number of ways can travel from 0 to n - 1 in the sortest amount of time, return ans % (10<sup>9</sup> + 1)</p> <p>\u601d\u8def\uff1a \u6027\u8d28\uff1a\u5728\u4efb\u610f\u7684\u5408\u6cd5\u65b9\u6848\u4e2d\uff0c\u9014\u5f84\u7684\u8be5\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u70b9\u65f6\uff0c\u90fd\u662f\u4ee5\u6700\u77ed\u8def\u5f84\u7684\u65b9\u5f0f\u5230\u8fbe\u7684 \u5728\u8dd1\u300c\u62d3\u6251\u6392\u5e8f\u300d\u8fc7\u7a0b\u4e2d\u8fdb\u884c DP\uff0c\u7edf\u8ba1\u65b9\u6848\u6570</p> <pre><code>//dijkstra\nwhile (!pq.empty()) {\n    auto [_, u] = pq.top();\n    pq.pop();\n    if (vis[u]) {\n        continue;\n    }\n    vis[u] = 1;\n    for (auto [v, w]: G[u]) {\n        if (dist[v] &gt; dist[u] + w) {\n            dist[v] = dist[u] + w;\n            f[v] = f[u];\n            pq.push({dist[v], v});\n        } else if (dist[v] == dist[u] + w) {\n            f[v] = (f[u] + f[v]) % (long)(1e9 + 7);\n        }\n    }\n}\n</code></pre>"},{"location":"2023-05-01-spring.html","title":"Spring5 \u6846\u67b6, \u8981\u70b9, IOC (pdai)","text":""},{"location":"2023-05-01-spring.html#spring","title":"Spring","text":"<p>ORM/DAO -&gt; POJO (IOC\u5bb9\u5668) -&gt; Service -&gt; Controller</p> <ul> <li>\u975e\u4fb5\u5165\u5f0f\uff1a\u57fa\u4e8eSpring\u5f00\u53d1\u7684\u5e94\u7528\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eSpring\u7684API </li> <li>\u63a7\u5236\u53cd\u8f6c\uff1aIOC\u2014\u2014Inversion of Control\uff0c\u6307\u7684\u662f\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u6743\u4ea4\u7ed9 Spring \u53bb\u521b\u5efa\u3002\u4f7f\u7528 Spring\u4e4b\u524d\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7531\u6211\u4eec\u81ea\u5df1\u5728\u4ee3\u7801\u4e2dnew\u521b\u5efa\u3002\u800c\u4f7f\u7528 Spring \u4e4b\u540e\u3002\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7ed9\u4e86 Spring \u6846\u67b6\u3002</li> <li>\u4f9d\u8d56\u6ce8\u5165\uff1aDI\u2014\u2014Dependency Injection\uff0c\u662f\u6307\u4f9d\u8d56\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u624b\u52a8\u8c03\u7528 setXX \u65b9\u6cd5\u53bb\u8bbe\u7f6e\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u8d4b\u503c\u3002</li> <li>\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff1aAspect Oriented Programming\u2014\u2014AOP\u5bb9\u5668\uff1aSpring\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5e76\u4e14\u7ba1\u7406\u5e94\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ec4\u4ef6\u5316\uff1aSpring \u5b9e\u73b0\u4e86\u4f7f\u7528\u7b80\u5355\u7684\u7ec4\u4ef6\u914d\u7f6e\u7ec4\u5408\u6210\u4e00\u4e2a\u590d\u6742\u7684\u5e94\u7528\u3002\u5728 Spring\u4e2d\u53ef\u4ee5\u4f7f\u7528XML\u548cJava\u6ce8\u89e3\u7ec4\u5408\u8fd9\u4e9b\u5bf9\u8c61\u3002 </li> <li>\u4e00\u7ad9\u5f0f\uff1a\u5728 IOC \u548c AOP\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u6574\u5408\u5404\u79cd\u4f01\u4e1a\u5e94\u7528\u7684\u5f00\u6e90\u6846\u67b6\u548c\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u7c7b\u5e93\uff08\u5b9e\u9645\u4e0a Spring \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e86\u8868\u73b0\u5c42\u7684 SpringMVC \u548c\u6301\u4e45\u5c42\u7684    Spring JDBC\uff09</li> </ul> <p>Core Container: beans, core, context (Application Context), SpEL Data Access/Integration: JDBC/ORM (Object Relational Mapping)/OXM (Object/XML)/JMS (\u670d\u52a1\u6d88\u606f)/Transaction Web: web, servlet, websocket, webflux (\u5b8c\u5168\u5f02\u6b65\u4e14\u975e\u963b\u585e), Portlet AOP, Aspects, Instrumentation (\u7c7b\u5de5\u5177\u7684\u652f\u6301\u548c\u7c7b\u52a0\u8f7d\u5668\u7684\u5b9e\u73b0), Messaging, JCL (\u65e5\u5fd7\u6846\u67b6\u96c6\u6210\u7684\u6a21\u5757) Test: Junit, TestNG</p> <pre><code> /**\n* aspect for every methods under service package.\n*/\n@Around(\"execution(* tech.pdai.springframework.service.*.*(..))\")\npublic Object businessService(ProceedingJoinPoint pjp) throws Throwable {\n    // get attribute through annotation\n    Method method = ((MethodSignature) pjp.getSignature()).getMethod();\n    System.out.println(\"execute method: \" + method.getName());\n\n    // continue to process\n    return pjp.proceed();\n}\n</code></pre> <p>@Configuration: These classes consist principally of @Bean-annotated methods that define instantiation, configuration, and initialization logic for objects that are managed by the Spring IoC container.</p> <pre><code>@Configuration\npublic class AppConfig {\n\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n</code></pre> <p>@Service annotates classes at the service layer.  \u5b83\u5c06\u6839\u636e\u7528\u6237\u8bf7\u6c42\u8bf7\u6c42@Repository</p> <p>@Repository annotates classes at the persistence layer, which will act as a database repository</p> <p>IOC: \u7528\u6237\u7ba1\u7406Bean\u8f6c\u53d8\u4e3a\u6846\u67b6\u7ba1\u7406Bean DI: \u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4eceIoc Container\u4e2d\u83b7\u53d6\u4f9d\u8d56\u7684Bean\uff0c\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d IOC Config\uff1aXML, \u6ce8\u89e3\uff0c Java \u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff1a\u6784\u9020\u65b9\u6cd5\u6ce8\u5165\uff08Construct\u6ce8\u5165\uff09\uff0csetter\u6ce8\u5165\uff0c\u57fa\u4e8e\u6ce8\u89e3\u7684\u6ce8\u5165\uff08\u63a5\u53e3\u6ce8\u5165\uff09 @Autowired\uff08\u81ea\u52a8\u6ce8\u5165\uff09\uff1aConstructor\uff0cbyType\uff0cbyName \u6784\u9020\u5668\u6ce8\u5165\u7684\u65b9\u5f0f\u80fd\u591f\u4fdd\u8bc1\u6ce8\u5165\u7684\u7ec4\u4ef6\u4e0d\u53ef\u53d8\uff0c\u5e76\u4e14\u786e\u4fdd\u9700\u8981\u7684\u4f9d\u8d56\u4e0d\u4e3a\u7a7a @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.PARAMETER) #\u65b9\u6cd5\u53c2\u6570 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.ANNOTATION_TYPE) #\u6ce8\u89e3</p> <p>@Resource @Target(ElementType.TYPE) #\u63a5\u53e3\u3001\u7c7b\u3001\u679a\u4e3e\u3001\u6ce8\u89e3 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.METHOD) #\u65b9\u6cd5</p> <p>@Inject @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf</p> <ul> <li>@Autowired\u3001@Inject\u7528\u6cd5\u57fa\u672c\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f@Inject\u6ca1\u6709required\u5c5e\u6027</li> <li>@Autowired\u3001@Inject\u662f\u9ed8\u8ba4\u6309\u7167\u7c7b\u578b\u5339\u914d\u7684\uff0c@Resource\u662f\u6309\u7167\u540d\u79f0\u5339\u914d\u7684</li> <li>@Autowired\u5982\u679c\u9700\u8981\u6309\u7167\u540d\u79f0\u5339\u914d\u9700\u8981\u548c@Qualifier\u4e00\u8d77\u4f7f\u7528\uff0c@Inject\u548c@Named\u4e00\u8d77\u4f7f\u7528\uff0c@Resource\u5219\u901a\u8fc7name\u8fdb\u884c\u6307\u5b9a</li> </ul>"},{"location":"2023-05-07-spring.html","title":"Spring5 AOP, MVC, IOC (pdai)","text":"<p>Inversion of Control Container  Dependency Injection Java without Enterprise JavaBeans (EJBs) Allow enterprise development without application server Plain Old Java Objects (POJO) Unobtrusive AOP/Proxies Best Practices Testability/Maintainability/Scalability/Complexity/Business Focus WORA: Write Once Run Anywhere AppConfig @Configuration @Bean Setter ingestion/constructor ingestion Spring Scopes and Autowiring Scopes: Singleton: One instantiation, single instance per Spring container @Scope(\"singleton\") Prototype: new bean per request @Scope(\"prototype\") Valid only in web-aware Spring projects: Request, Session, Global </p> <p>AOP \u8fde\u63a5\u70b9(Jointpoint):\u5728\u54ea\u91cc\u5e72; \u5207\u5165\u70b9(Pointcut): \u5728\u54ea\u91cc\u4e8e\u7684\u96c6\u5408; \u901a\u77e5(Advice)\u4e3a\u4e8e\u4ec0\u4e48; \u65b9\u9762/\u5207\u9762(Aspect):\u4e8e\u4ec0\u4e48(\u5f15\u5165\u4ec0\u4e48); \u76ee\u6807\u5bf9\u8c61(Target Object):\u5728AOP\u4e2d\u8868\u793a\u4e3a\u5bf9\u8c01\u4e8e; \u7ec7\u5165(Weaving):\u600e\u4e48\u5b9e\u73b0\u7684; AOP\u4ee3\u7406(AOP Proxy):\u600e\u4e48\u5b9e\u73b0\u7684\u4e00\u79cd\u5178\u578b\u65b9\u5f0f; \u524d\u7f6e\u901a\u77e5(Before advice):\u5728\u67d0\u8fde\u63a5\u70b9\u4e4b\u524d\u6267\u884c\u7684\u901a\u77e5,\u4f46\u8fd9\u4e2a\u901a\u77e5\u4e0d\u80fd\u963b\u6b62\u8fde\u63a5\u70b9\u4e4b\u524d\u7684\u6267\u884c\u6d41\u7a0b(\u9664\u975e\u5b83 \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u540e\u7f6e\u901a\u77e5(After returning advice):\u5728\u67d0\u8fde\u63a5\u70b9\u6b63\u5e38\u5b8c\u6210\u540e\u6267\u884c\u7684\u901a\u77e5:\u4f8b\u5982,\u4e00\u4e2a\u65b9\u6cd5\u6ca1\u6709\u629b\u51fa\u4efb\u4f55\u5f02\u5e38, \u6b63\u5e38\u8fd4\u56de\u3002 \u5f02\u5e38\u901a\u77e5(After throwing advice):\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u9000\u51fa\u65f6\u6267\u884c\u7684\u901a\u77e5\u3002 \u6700\u7ec8\u901a\u77e5(After (finally) advice):\u5f53\u67d0\u8fde\u63a5\u70b9\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u7684\u901a\u77e5(\u4e0d\u8bba\u662f\u6b63\u5e38\u8fd4\u56de\u8fd8\u662f\u5f02\u5e38\u9000\u51fa)\u3002 \u73af\u7ed5\u901a\u77e5(Around Advice):\u5305\u56f4\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u901a\u77e5,\u5982\u65b9\u6cd5\u8c03\u7528\u3002\u8fd9\u662f\u6700\u5f3a\u5927\u7684\u4e00\u79cd\u901a\u77e5\u7c7b\u578b\u3002\u73af\u7ed5\u901a\u77e5\u53ef \u4ee5\u5728\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u5b8c\u6210\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5b83\u4e5f\u4f1a\u9009\u62e9\u662f\u5426\u7ee7\u7eed\u6267\u884c\u8fde\u63a5\u70b9\u6216\u76f4\u63a5\u8fd4\u56de\u5b83\u81ea\u5df1\u7684\u8fd4\u56de\u503c\u6216\u629b\u51fa\u5f02\u5e38\u6765 \u7ed3\u675f\u6267\u884c\u3002  \u52a8\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5c06\u8981\u589e\u5f3a\u7684\u4ee3\u7801\u7ec7\u5165\u5230\u76ee\u6807\u7c7b\u4e2d,\u8fd9\u6837\u5f80\u5f80\u662f\u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u6280\u672f\u5b8c\u6210\u7684,\u5982Java JDK\u7684\u52a8\u6001\u4ee3\u7406(Proxy. \u5e95\u5c42\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0)\u6216\u8005CGLIB\u7684\u52a8\u6001\u4ee3\u7406(\u5e95\u5c42\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0), Spring AOP\u91c7\u7528\u7684\u5c31\u662f\u57fa\u4e8e \u8fd0\u884c\u65f6\u589e\u5f3a\u7684\u4ee3\u7406\u6280\u672fApectu\u91c7\u7528\u7684\u5c31\u662f\u9759\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u3002Apectu\u4e3b\u8981\u91c7\u7528\u7684\u662f\u7f16\u8bd1\u671f\u7ec7\u5165,\u5728\u8fd9\u4e2a\u671f\u95f4\u4f7f\u7528 Aspect\u7684acj\u7f16\u8bd1\u5668(\u7c7b\u4f3cjavac)\u628aaspect\u7c7b\u7f16\u8bd1\u6210class\u5b57\u8282\u7801\u540e,\u5728java\u76ee\u6807\u7c7b\u7f16\u8bd1\u65f6\u7ec7\u5165,\u5373\u5148\u7f16\u8bd1aspect\u7c7b\u518d\u7f16 \u8bd1\u76ee\u6807\u7c7b\u3002 Model, View , Controller BeanFactory\uff1a \u5de5\u5382\u6a21\u5f0f\u5b9a\u4e49\u4e86IOC\u5bb9\u5668\u7684\u57fa\u672c\u529f\u80fd\u89c4\u8303 ListableBeanFactory\u3001HierarchicalBeanFactory \u548cAutowireCapableBeanFactory BeanRegistry\uff1a \u5411IOC\u5bb9\u5668\u624b\u5de5\u6ce8\u518c BeanDefinition \u5bf9\u8c61\u7684\u65b9\u6cd5 BeanDefinition \u5b9a\u4e49\u4e86\u5404\u79cdBean\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u7684\u5173\u7cfbBeanDefinitionReader \u8fd9\u662fBeanDefinition\u7684\u89e3\u6790\u5668 BeanDefinitionHolder \u8fd9\u662fBeanDefination\u7684\u5305\u88c5\u7c7b\uff0c\u7528\u6765\u5b58\u50a8BeanDefinition\uff0cname\u4ee5\u53caaliases\u7b49\u3002</p> <p>ApplicationContext\uff1aIOC\u63a5\u53e3\u8bbe\u8ba1\u548c\u5b9e\u73b0 \u8bbf\u95ee\u8d44\u6e90\uff1a \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684Bean\u914d\u7f6e\uff08\u5373\u8d44\u6e90\uff09\u8fdb\u884c\u52a0\u8f7d\u3002(\u5b9e\u73b0ResourcePatternResolver\u63a5\u53e3) \u56fd\u9645\u5316: \u652f\u6301\u4fe1\u606f\u6e90\uff0c\u53ef\u4ee5\u5b9e\u73b0\u56fd\u9645\u5316\u3002\uff08\u5b9e\u73b0MessageSource\u63a5\u53e3\uff09 \u5e94\u7528\u4e8b\u4ef6: \u652f\u6301\u5e94\u7528\u4e8b\u4ef6\u3002(\u5b9e\u73b0ApplicationEventPublisher\u63a5\u53e3)</p> <p>GenericApplicationContext\uff1a \u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u521b\u5efa\u5bb9\u5668\uff0c\u5f80\u540e\u7684\u6bcf\u6b21refresh\u90fd\u4e0d\u4f1a\u66f4\u6539 AbstractRefreshableApplicationContext\uff1a AbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u7684\u6bcf\u6b21refresh\u90fd\u662f\u5148\u6e05\u9664\u5df2\u6709(\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa)\u7684\u5bb9\u5668\uff0c\u7136\u540e\u518d\u91cd\u65b0\u521b\u5efa\uff1bAbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u65e0\u6cd5\u505a\u5230GenericApplicationContext\u6df7\u5408\u642d\u914d\u4ece\u4e0d\u540c\u6e90\u5934\u83b7\u53d6bean\u7684\u5b9a\u4e49\u4fe1\u606f  obtainFreshBeanFactory loadBeanDefinitions AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90 XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90 DocumentLoader\u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u8f6c\u6362\u4e3aDocument\u5bf9\u8c61 XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6 DefaultBeanDefinitionDocumentReader\u5bf9Bean\u5b9a\u4e49\u7684Document\u5bf9\u8c61\u89e3\u6790 BeanDefinitionParserDelegate\u89e3\u6790Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u751f\u6210BeanDefinition \u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition  \u89e3\u6790bean\u7684\u771f\u6b63name\uff0c\u5982\u679cbean\u662f\u5de5\u5382\u7c7b\uff0cname\u524d\u7f00\u4f1a\u52a0&amp;\uff0c\u9700\u8981\u53bb\u6389\u65e0\u53c2\u5355\u4f8b\u5148\u4ece\u7f13\u5b58\u4e2d\u5c1d\u8bd5\u83b7\u53d6\u5982\u679cbean\u5b9e\u4f8b\u8fd8\u5728\u521b\u5efa\u4e2d\uff0c\u5219\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5982\u679cbean definition \u5b58\u5728\u4e8e\u7236\u7684bean\u5de5\u5382\u4e2d\uff0c\u59d4\u6d3e\u7ed9\u7236Bean\u5de5\u5382\u83b7\u53d6\u6807\u8bb0\u8fd9\u4e2abeanName\u7684\u5b9e\u4f8b\u6b63\u5728\u521b\u5efa\u786e\u4fdd\u5b83\u7684\u4f9d\u8d56\u4e5f\u88ab\u521d\u59cb\u5316\u771f\u6b63\u521b\u5efa \u5355\u4f8b\u65f6\u539f\u578b\u65f6\u6839\u636ebean\u7684scope\u521b\u5efa \u7b2c\u4e00\u5c42\u7f13\u5b58\uff08singletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u5e76\u4e14\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u6210\u719f\u5bf9\u8c61\uff1b \u7b2c\u4e8c\u5c42\u7f13\u5b58\uff08earlySingletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4f46\u5c1a\u672a\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u534a\u6210\u54c1\u5bf9\u8c61\uff1b \u7b2c\u4e09\u5c42\u7f13\u5b58\uff08singletonFactories\uff09: \u5355\u4f8b\u5de5\u5382\u7684\u7f13\u5b58</p> <p>\u201cA\u5bf9\u8c61setter\u4f9d\u8d56B\u5bf9\u8c61\uff0cB\u5bf9\u8c61setter\u4f9d\u8d56A\u5bf9\u8c61\u201d\uff0cA\u9996\u5148\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u7684\u7b2c\u4e00\u6b65\uff0c\u800c\u4e14\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u5230singletonFactories\u4e2d\uff0c\u6b64\u65f6\u8fdb\u884c\u521d\u59cb\u5316\u7684\u7b2c\u4e8c\u6b65\uff0c\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u5bf9\u8c61B\uff0c\u6b64\u65f6\u5c31\u5c1d\u8bd5\u53bbget(B)\uff0c\u53d1\u73b0B\u5c1a\u672a\u88abcreate\uff0c\u56e0\u6b64\u8d70create\u6d41\u7a0b\uff0cB\u5728\u521d\u59cb\u5316\u7b2c\u4e00\u6b65\u7684\u65f6\u5019\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u4e86\u5bf9\u8c61A\uff0c\u56e0\u800c\u5c1d\u8bd5get(A)\uff0c\u5c1d\u8bd5\u4e00\u7ea7\u7f13\u5b58singletonObjects(\u786e\u5b9a\u6ca1\u6709\uff0c\u7531\u4e8eA\u8fd8\u6ca1\u521d\u59cb\u5316\u5f7b\u5e95)\uff0c\u5c1d\u8bd5\u4e8c\u7ea7\u7f13\u5b58earlySingletonObjects\uff08\u4e5f\u6ca1\u6709\uff09\uff0c\u5c1d\u8bd5\u4e09\u7ea7\u7f13\u5b58singletonFactories\uff0c\u56e0\u4e3aA\u7ecf\u8fc7ObjectFactory\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u4e86\uff0c\u56e0\u6b64B\u53ef\u4ee5\u7ecf\u8fc7ObjectFactory.getObject\u62ff\u5230A\u5bf9\u8c61(\u534a\u6210\u54c1)\uff0cB\u62ff\u5230A\u5bf9\u8c61\u540e\u987a\u5229\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u9636\u6bb5\u4e00\u3001\u4e8c\u3001\u4e09\uff0c\u5f7b\u5e95\u521d\u59cb\u5316\u4ee5\u540e\u5c06\u672c\u8eab\u653e\u5165\u5230\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\u3002\u6b64\u65f6\u8fd4\u56deA\u4e2d\uff0cA\u6b64\u65f6\u80fd\u62ff\u5230B\u7684\u5bf9\u8c61\u987a\u5229\u5b8c\u6210\u672c\u8eab\u7684\u521d\u59cb\u5316\u9636\u6bb5\u4e8c\u3001\u4e09\uff0c\u6700\u7ec8A\u4e5f\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u8fdb\u53bb\u4e86\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\uff0c\u5e76\u4e14\u66f4\u52a0\u5e78\u8fd0\u7684\u662f\uff0c\u56e0\u4e3aB\u62ff\u5230\u4e86A\u7684\u5bf9\u8c61\u5f15\u7528\uff0c\u56e0\u6b64B\u5982\u4ecahold\u4f4f\u7684A\u5bf9\u8c61\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002</p> <p>Spring\u65e0\u6cd5\u89e3\u51b3\u9664\u5355\u4f8b\u6a21\u5f0f\u4ee5\u5916\u7684\u5faa\u73af\u4f9d\u8d56\uff08\u6784\u9020\u5668/prototype/\u591a\u4f8b\uff09 \u89e3\u51b3\u65b9\u6cd5\uff1a - \u4f7f\u7528@Lazy\u6ce8\u89e3\uff0c\u5ef6\u8fdf\u52a0\u8f7d - \u4f7f\u7528@DependsOn\u6ce8\u89e3\uff0c\u6307\u5b9a\u52a0\u8f7d\u5148\u540e\u5173\u7cfb - \u4fee\u6539\u6587\u4ef6\u540d\u79f0\uff0c\u6539\u53d8\u5faa\u73af\u4f9d\u8d56\u7c7b\u7684\u52a0\u8f7d\u987a\u5e8f  \u5982\u679c BeanFactoryPostProcessor \u548c Bean \u5173\u8054, \u5219\u8c03\u7528postProcessBeanFactory\u65b9\u6cd5.(\u5373\u9996\u5148\u5c1d\u8bd5\u4eceBean\u5de5\u5382\u4e2d\u83b7\u53d6Bean) \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessBeforeInstantiation\u65b9\u6cd5 \u6839\u636e\u914d\u7f6e\u60c5\u51b5\u8c03\u7528 Bean \u6784\u9020\u65b9\u6cd5\u5b9e\u4f8b\u5316 Bean\u3002 \u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u5b8c\u6210 Bean \u4e2d\u6240\u6709\u5c5e\u6027\u503c\u7684\u914d\u7f6e\u6ce8\u5165\u3002 \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessAfterInstantiation\u65b9\u6cd5\u548cpostProcessProperties \u8c03\u7528xxxAware\u63a5\u53e3 (BeanNameAware/BeanClassLoaderAware/BeanFactoryAware/EnvironmentAware/EmbeddedValueResolverAware/ApplicationContextAware) \u5982\u679c Bean \u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u5219 Spring \u5c06\u8c03\u7528 afterPropertiesSet() \u65b9\u6cd5\u3002(\u6216\u8005\u6709\u6267\u884c@PostConstruct\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7init-method\u5c5e\u6027\u6307\u5b9a\u4e86\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5219\u8c03\u7528\u8be5\u521d\u59cb\u5316\u65b9\u6cd5\u3002 \u5982\u679c BeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u63a5\u53e3\u7684\u521d\u59cb\u5316\u65b9\u6cd5 postProcessAfterInitialization()\u3002\u6b64\u65f6\uff0cBean \u5df2\u7ecf\u53ef\u4ee5\u88ab\u5e94\u7528\u7cfb\u7edf\u4f7f\u7528\u4e86\u3002 \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"singleton\"\uff0c\u5219\u5c06\u8be5 Bean \u653e\u5165 Spring IoC \u7684\u7f13\u5b58\u6c60\u4e2d\uff0c\u5c06\u89e6\u53d1 Spring \u5bf9\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"prototype\"\uff0c\u5219\u5c06\u8be5 Bean \u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u8c03\u7528\u8005\u7ba1\u7406\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\uff0cSpring \u4e0d\u518d\u7ba1\u7406\u8be5 Bean\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 DisposableBean \u63a5\u53e3\uff0c\u5219 Spring \u4f1a\u8c03\u7528 destory() \u65b9\u6cd5\u5c06 Spring \u4e2d\u7684 Bean \u9500\u6bc1\uff1b(\u6216\u8005\u6709\u6267\u884c@PreDestroy\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7 destory-method \u5c5e\u6027\u6307\u5b9a\u4e86 Bean \u7684\u9500\u6bc1\u65b9\u6cd5\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u5bf9 Bean \u8fdb\u884c\u9500\u6bc1\u3002 <p>AOP\u7684\u521b\u5efa\u5de5\u4f5c\u662f\u4ea4\u7ed9AnnotationAwareAspectJAutoProxyCreator\u6765\u5b8c\u6210 \u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff1aBeanFactoryAware\u5c5e\u4e8eBean\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5InstantiationAwareBeanPostProcessor \u548cBeanPostProcessor \u8fd9\u4e24\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u4e00\u822c\u79f0\u5b83\u4eec\u7684\u5b9e\u73b0\u7c7b\u4e3a\u201c\u540e\u5904\u7406\u5668\u201d\uff0c\u662f\u5bb9\u5668\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5 \u6838\u5fc3\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u80af\u5b9a\u5728postProcessBeforeInstantiation\u548cpostProcessAfterInitialization\u4e2d</p> <p>\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor\u7684\u8fc7\u7a0b\u3002</p> <ul> <li>\u7531IOC Bean\u52a0\u8f7d\u65b9\u6cd5\u6808\u4e2d\u627e\u5230parseCustomElement\u65b9\u6cd5\uff0c\u627e\u5230parse aop:aspectj-autoproxy\u7684handler(org.springframework.aop.config.AopNamespaceHandler)</li> <li>AopNamespaceHandler\u6ce8\u518c\u4e86\u7684\u89e3\u6790\u7c7b\u662fAspectJAutoProxyBeanDefinitionParser</li> <li>AspectJAutoProxyBeanDefinitionParser\u7684parse \u65b9\u6cd5 \u901a\u8fc7AspectJAwareAdvisorAutoProxyCreator\u7c7b\u53bb\u521b\u5efa</li> <li>AspectJAwareAdvisorAutoProxyCreator\u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff0cBeanFactoryAware\u548cBeanPostProcessor\uff1b\u6839\u636eBean\u751f\u547d\u5468\u671f\u65b9\u6cd5\u627e\u5230\u4e24\u4e2a\u6838\u5fc3\u65b9\u6cd5\uff1apostProcessBeforeInstantiation\u548cpostProcessAfterInitialization <ul> <li>postProcessBeforeInstantiation\uff1a\u4e3b\u8981\u662f\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor</li> <li>postProcessAfterInitialization\uff1a\u4e3b\u8981\u8d1f\u8d23\u5c06Advisor\u6ce8\u5165\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u521b\u5efa\u4ee3\u7406\uff08cglib\u6216jdk)\uff0c\u4e3a\u540e\u9762\u7ed9\u4ee3\u7406\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u505a\u51c6\u5907\u3002</li> </ul> </li> </ul> <p>Spring\u9ed8\u8ba4\u5728\u76ee\u6807\u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\u662f\u901a\u8fc7JDK\u4ee3\u7406\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u975e\u63a5\u53e3\u7684\u662f\u901a\u8fc7Cglib\u4ee3\u7406\u5b9e\u73b0\u7684\u3002\u5f53\u8bbe\u7f6eproxy-target-class\u4e3atrue\u65f6\u5728\u76ee\u6807\u7c7b\u4e0d\u662f\u63a5\u53e3\u6216\u8005\u4ee3\u7406\u7c7b\u65f6\u4f18\u5148\u4f7f\u7528cglib\u4ee3\u7406\u5b9e\u73b0\u3002</p> <p>\u4ee3\u7406\u6a21\u5f0f(Proxy pattern): \u4e3a\u53e6\u4e00\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u66ff\u8eab\u6216\u5360\u4f4d\u7b26\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee Cglib\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u3001\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\u751f\u6210\u5305\uff0c\u5b83\u5e7f\u6cdb\u88ab\u8bb8\u591aAOP\u6846\u67b6\u4f7f\u7528\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u65b9\u6cd5\u7684\u62e6\u622a\u3002 JDK\u4ee3\u7406\uff1a \u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u5de5\u4f5c\uff0c\u5c06\u6240\u6709\u65b9\u6cd5\u5305\u88c5\u6210ProxyMethod\u5bf9\u8c61\uff0c\u5305\u62ecObject\u7c7b\u4e2dhashCode\u3001equals\u3001toString\u65b9\u6cd5\uff0c\u4ee5\u53ca\u88ab\u4ee3\u7406\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u7b2c\u4e8c\u6b65\uff1a\u4e3a\u4ee3\u7406\u7c7b\u7ec4\u88c5\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u65b9\u6cd5\uff0cstatic\u521d\u59cb\u5316\u5757\u7b49 \u7b2c\u4e09\u6b65\uff1a\u5199\u5165class\u6587\u4ef6</p> <p>MVC:  HandlerMapping\u662f\u6620\u5c04\u5904\u7406\u5668 HandlerAdpter\u662f\u5904\u7406\u9002\u914d\u5668\uff0c\u7528\u6765\u627e\u5230\u4f60\u7684Controller\u4e2d\u7684\u5904\u7406\u65b9\u6cd5 HandlerExceptionResolver\u662f\u5f53\u9047\u5230\u5904\u7406\u5f02\u5e38\u65f6\u7684\u5f02\u5e38\u89e3\u6790\u5668</p> <p>\u9996\u5148\u7528\u6237\u53d1\u9001\u8bf7\u6c42\u2014\u2014&gt;DispatcherServlet\uff0c\u524d\u7aef\u63a7\u5236\u5668\u6536\u5230\u8bf7\u6c42\u540e\u81ea\u5df1\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u89e3\u6790\u5668\u8fdb\u884c \u5904\u7406\uff0c\u4f5c\u4e3a\u7edf\u4e00\u8bbf\u95ee\u70b9\uff0c\u8fdb\u884c\u5168\u5c40\u7684\u6d41\u7a0b\u63a7\u5236\uff1b DispatcherServlet\u2014\u2014&gt;HandlerMapping\uff0c HandlerMapping \u5c06\u4f1a\u628a\u8bf7\u6c42\u6620\u5c04\u4e3a HandlerExecutionChain \u5bf9\u8c61\uff08\u5305\u542b\u4e00 \u4e2aHandler \u5904\u7406\u5668\uff08\u9875\u9762\u63a7\u5236\u5668\uff09\u5bf9\u8c61\u3001\u591a\u4e2aHandlerInterceptor \u62e6\u622a\u5668\uff09\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u6dfb\u52a0\u65b0 \u7684\u6620\u5c04\u7b56\u7565\uff1b DispatcherServlet\u2014\u2014&gt;HandlerAdapter\uff0cHandlerAdapter \u5c06\u4f1a\u628a\u5904\u7406\u5668\u5305\u88c5\u4e3a\u9002\u914d\u5668\uff0c\u4ece\u800c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c \u5373\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\uff0c\u4ece\u800c\u5f88\u5bb9\u6613\u652f\u6301\u5f88\u591a\u7c7b\u578b\u7684\u5904\u7406\u5668\uff1b HandlerAdapter\u2014\u2014&gt;\u5904\u7406\u5668\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u7684\u8c03\u7528\uff0cHandlerAdapter \u5c06\u4f1a\u6839\u636e\u9002\u914d\u7684\u7ed3\u679c\u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u5668\u7684\u529f\u80fd\u5904 \u7406\u65b9\u6cd5\uff0c\u5b8c\u6210\u529f\u80fd\u5904\u7406\uff1b\u5e76\u8fd4\u56de\u4e00\u4e2aModelAndView \u5bf9\u8c61\uff08\u5305\u542b\u6a21\u578b\u6570\u636e\u3001\u903b\u8f91\u89c6\u56fe\u540d\uff09\uff1b ModelAndView \u7684\u903b\u8f91\u89c6\u56fe\u540d\u2014\u2014&gt; ViewResolver\uff0cViewResolver \u5c06\u628a\u903b\u8f91\u89c6\u56fe\u540d\u89e3\u6790\u4e3a\u5177\u4f53\u7684View\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56 \u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u66f4\u6362\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b View\u2014\u2014&gt;\u6e32\u67d3\uff0cView \u4f1a\u6839\u636e\u4f20\u8fdb\u6765\u7684Model \u6a21\u578b\u6570\u636e\u8fdb\u884c\u6e32\u67d3\uff0c\u6b64\u5904\u7684Model \u5b9e\u9645\u662f\u4e00\u4e2aMap \u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64 \u5f88\u5bb9\u6613\u652f\u6301\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b \u8fd4\u56de\u63a7\u5236\u6743\u7ed9DispatcherServlet\uff0c\u7531DispatcherServlet \u8fd4\u56de\u54cd\u5e94\u7ed9\u7528\u6237\uff0c\u5230\u6b64\u4e00\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002</p>"},{"location":"2023-05-14-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day14.html","title":"Day 14 \u4e8c\u53c9\u6811","text":"<p>104. Maximum Depth of Binary Tree</p> <p>\u524d\u5e8f\u6c42\u7684\u662f\u6df1\u5ea6\uff0c\u540e\u5e8f\u6c42\u7684\u662f\u9ad8\u5ea6\u3002 \u4e8c\u53c9\u6811\u8282\u70b9\u7684\u6df1\u5ea6\uff1a\u6307\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84\u8fb9\u7684\u6761\u6570\u6216\u8005\u8282\u70b9\u6570\uff08\u53d6\u51b3\u4e8e\u6df1\u5ea6\u4ece0\u5f00\u59cb\u8fd8\u662f\u4ece1\u5f00\u59cb\uff09 \u4e8c\u53c9\u6811\u8282\u70b9\u7684\u9ad8\u5ea6\uff1a\u6307\u4ece\u8be5\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u7b80\u5355\u8def\u5f84\u8fb9\u7684\u6761\u6570\u540e\u8005\u8282\u70b9\u6570\uff08\u53d6\u51b3\u4e8e\u9ad8\u5ea6\u4ece0\u5f00\u59cb\u8fd8\u662f\u4ece1\u5f00\u59cb\uff09</p> <pre><code>class solution {\npublic:\n    int getdepth(treenode* node) {\n        if (node == NULL) return 0;\n        int leftdepth = getdepth(node-&gt;left);       // \u5de6\n        int rightdepth = getdepth(node-&gt;right);     // \u53f3\n        int depth = 1 + max(leftdepth, rightdepth); // \u4e2d\n        return depth;\n    }\n    int maxdepth(treenode* root) {\n        return getdepth(root);\n    }\n};\n</code></pre> <pre><code>class solution {\npublic:\n    int result;\n    void getdepth(treenode* node, int depth) {\n        result = depth &gt; result ? depth : result; // \u4e2d\n        if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) return ;\n        if (node-&gt;left) { // \u5de6\n            getdepth(node-&gt;left, depth + 1);\n        }\n        if (node-&gt;right) { // \u53f3\n            getdepth(node-&gt;right, depth + 1);\n        }\n        return ;\n    }\n    int maxdepth(treenode* root) {\n        result = 0;\n        if (root == 0) return result;\n        getdepth(root, 1);\n        return result;\n    }\n};\n</code></pre> <p>105.Minimum Depth of Binary Tree</p> <pre><code>class Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        if (root-&gt;left == NULL &amp;&amp; root-&gt;right != NULL) {\n            return 1 + minDepth(root-&gt;right);\n        }\n        if (root-&gt;left != NULL &amp;&amp; root-&gt;right == NULL) {\n            return 1 + minDepth(root-&gt;left);\n        }\n        return 1 + min(minDepth(root-&gt;left), minDepth(root-&gt;right));\n    }\n};\n</code></pre> <pre><code>class Solution {\nprivate:\n    int result;\n    void getdepth(TreeNode* node, int depth) {\n        if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) {\n            result = min(depth, result);  \n            return;\n        }\n        // \u4e2d \u53ea\u4e0d\u8fc7\u4e2d\u6ca1\u6709\u5904\u7406\u7684\u903b\u8f91\n        if (node-&gt;left) { // \u5de6\n            getdepth(node-&gt;left, depth + 1);\n        }\n        if (node-&gt;right) { // \u53f3\n            getdepth(node-&gt;right, depth + 1);\n        }\n        return ;\n    }\n\npublic:\n    int minDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        result = INT_MAX;\n        getdepth(root, 1);\n        return result;\n    }\n};\n</code></pre> <p>222. Count Complete Tree Nodes</p> <pre><code>class Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == NULL) return 0;\n        return 1 + countNodes(root-&gt;left) + countNodes(root-&gt;right);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == nullptr) return 0;\n        TreeNode* left = root-&gt;left;\n        TreeNode* right = root-&gt;right;\n        int leftDepth = 0, rightDepth = 0; // \u8fd9\u91cc\u521d\u59cb\u4e3a0\u662f\u6709\u76ee\u7684\u7684\uff0c\u4e3a\u4e86\u4e0b\u9762\u6c42\u6307\u6570\u65b9\u4fbf\n        while (left) {  // \u6c42\u5de6\u5b50\u6811\u6df1\u5ea6\n            left = left-&gt;left;\n            leftDepth++;\n        }\n        while (right) { // \u6c42\u53f3\u5b50\u6811\u6df1\u5ea6\n            right = right-&gt;right;\n            rightDepth++;\n        }\n        if (leftDepth == rightDepth) {\n            return (2 &lt;&lt; leftDepth) - 1; // \u6ce8\u610f(2&lt;&lt;1) \u76f8\u5f53\u4e8e2^2\uff0c\u6240\u4ee5leftDepth\u521d\u59cb\u4e3a0\n        }\n        return countNodes(root-&gt;left) + countNodes(root-&gt;right) + 1;\n    }\n};\n</code></pre>"},{"location":"2023-05-15-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day15.html","title":"Day 15 \u4e8c\u53c9\u6811","text":"<p>110. Balanced Binary Tree</p> <p>\u6c42\u9ad8\u5ea6\uff08\u8be5\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\uff09\uff0c\u540e\u5e8f\u904d\u5386</p> <pre><code>class Solution {\npublic:\n    int getHeight(TreeNode* root) {\n        if(!root) {\n            return 0;\n        }\n        int l = getHeight(root-&gt;left);\n        if (l == -1) {\n            return -1;\n        }\n        int r = getHeight(root-&gt;right);\n        if (r == -1) {\n            return -1;\n        }\n        return abs(l - r) &lt;= 1 ? 1 + max(l, r) : -1;\n    }\n    bool isBalanced(TreeNode* root) {\n        return getHeight(root) == -1 ? false : true;\n    }\n};\n</code></pre> <p>257. Binary Tree Paths</p> <p>void traversal(TreeNode cur, string path,* vector&amp; result): \u6bcf\u6b21\u90fd\u662f\u590d\u5236\u8d4b\u503c\uff0c\u4e0d\u7528\u4f7f\u7528\u5f15\u7528 (\u76f8\u5f53\u4e8ebacktrack) <p>\u8fed\u4ee3: \u5982\u679c\u662f\u6a21\u62df\u524d\u4e2d\u540e\u5e8f\u904d\u5386\u5c31\u7528\u6808\uff0c\u5982\u679c\u662f\u9002\u5408\u5c42\u5e8f\u904d\u5386\u5c31\u7528\u961f\u5217\uff0c\u5f53\u7136\u8fd8\u662f\u5176\u4ed6\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u662f \u5148\u7528\u961f\u5217\u8bd5\u8bd5\u884c\u4e0d\u884c\uff0c\u4e0d\u884c\u5c31\u7528\u6808</p>"},{"location":"2023-05-15-%E8%AE%AD%E7%BB%83%E8%90%A5-Day1.html","title":"Day 1","text":"<p>704. \u4e8c\u5206\u67e5\u627e</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4nums\u548c\u4e00\u4e2a\u76ee\u6807\u503ctarget\uff0c\u8fd4\u56de\u76ee\u6807\u503ctarget\u5728\u6570\u7ec4nums\u4e2d\u7684\u4e0b\u6807\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de-1</p> <p>\u601d\u8def\uff1a\u4e8c\u5206\u67e5\u627e</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0;\n        int r = nums.size(\n        while (l &lt;= r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] &lt; target) {\n                l = mid + 1;\n            } else if (nums[mid] &gt; target) {\n                r = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> <p>27. \u79fb\u9664\u5143\u7d20</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4nums\u548c\u4e00\u4e2a\u503cval\uff0c\u8981\u6c42\u4f60\u628a\u6570\u7ec4\u4e2d\u503c\u4e3aval\u7684\u5143\u7d20\u5168\u90e8\u5220\u6389\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f60\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u6765\u8f85\u52a9\u89e3\u51b3\u8fd9\u9898\uff0c\u8fd4\u56de\u79fb\u9664val\u540e\u6570\u7ec4\u7684\u957f\u5ea6</p> <p>\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u6162\u6307\u9488\u904d\u5386\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u4e0b\u6807\u3002\u4e0d\u91cd\u590d\u7684\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u539f\u6570\u7ec4\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5199\u5230\u5feb\u6307\u9488 \u8fd8\u6ca1\u6709\u904d\u5386\u7684\u6570</p> <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int i = 0;\n        int curr = 0;\n        int cnt = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[curr] = nums[i];\n                curr++;\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"2023-05-16-%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day16.html","title":"Day 16 \u4e8c\u53c9\u6811","text":"<p>513. Find Bottom Left Tree Value</p> <p>\u601d\u8def\uff1a</p> <ul> <li>\u9012\u5f52: \u7528\u4e2d\u5e8f\u904d\u5386\u786e\u4fdd\u5de6\u8282\u70b9\u6700\u5148visit\uff0c\u518d\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6</li> <li>BFS</li> </ul> <pre><code>// \u9012\u5f52\nclass Solution {\npublic:\n    int depth = INT_MIN;\n    int res = 0;\n    void traverse(TreeNode* root, int d) {\n        if (!root) {\n            return;\n        }\n        traverse(root-&gt;left, d + 1);\n        if (!root-&gt;left &amp;&amp; !root-&gt;right) {\n            if (d &gt; depth) {\n                res = root-&gt;val;\n                depth = d;\n            }\n            return;\n        }\n        traverse(root-&gt;right, d + 1);\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        traverse(root, 0);\n        return res;\n    }\n};\n</code></pre> <p>112. Path Sum</p> <ul> <li>\u5982\u679c\u9700\u8981\u641c\u7d22\u6574\u68f5\u4e8c\u53c9\u6811\u4e14\u4e0d\u7528\u5904\u7406\u9012\u5f52\u8fd4\u56de\u503c\uff0c\u9012\u5f52\u51fd\u6570\u5c31\u4e0d\u8981\u8fd4\u56de\u503c\u3002\uff08113.\u8def\u5f84\u603b\u548cii\uff09</li> <li>\u5982\u679c\u9700\u8981\u641c\u7d22\u6574\u68f5\u4e8c\u53c9\u6811\u4e14\u9700\u8981\u5904\u7406\u9012\u5f52\u8fd4\u56de\u503c\uff0c\u9012\u5f52\u51fd\u6570\u5c31\u9700\u8981\u8fd4\u56de\u503c\u3002 \uff08236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e2d\u4ecb\u7ecd\uff09</li> <li>\u5982\u679c\u8981\u641c\u7d22\u5176\u4e2d\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u9012\u5f52\u4e00\u5b9a\u9700\u8981\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u9047\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u4e86\u5c31\u8981\u53ca\u65f6\u8fd4\u56de\u3002</li> </ul> <p>106. Construct Binary Tree from Inorder and Postorder Traversal</p> <pre><code>class Solution {\npublic:\n    TreeNode* helper(int postend, int instart, int inend, vector&lt;int&gt;&amp;in, vector&lt;int&gt;&amp;post) {\n        if (postend &lt; 0 || instart &gt; inend) {\n            return NULL;\n        }\n        TreeNode* root = new TreeNode(post[postend]);\n        int idx = 0;\n        for (int i = instart; i &lt;= inend; i++) {\n            if (in[i] == post[postend]) {\n                idx = i;\n                break;\n            }\n        }\n        root-&gt;left = helper(postend - (inend - idx + 1), instart, idx - 1, in, post);\n        root-&gt;right = helper(postend - 1, idx + 1, inend, in, post);\n        return root;\n    }\n\n    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n        return helper(postorder.size() - 1, 0, inorder.size() - 1, inorder, postorder);\n    }\n};\n</code></pre> <p>105. Construct Binary Tree from Preorder and Inorder Traversal</p> <pre><code>class Solution {\npublic:\n    TreeNode* helper(int prestart, int instart, int inend, vector&lt;int&gt;&amp;pre, vector&lt;int&gt;&amp;in) {\n        if (prestart &gt;= pre.size() || instart &gt; inend) {\n            return NULL;\n        }\n        TreeNode* root = new TreeNode(pre[prestart]);\n        int idx = 0;\n        for (int i = instart; i &lt;= inend; i++) {\n            if (in[i] == pre[prestart]) {\n                idx = i;\n                break;\n            }\n        }\n        root-&gt;left = helper(prestart + 1, instart, idx - 1, pre, in);\n        root-&gt;right = helper(prestart + idx - instart + 1, idx + 1, inend, pre, in);\n        return root;\n    }\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        return helper(0, 0, inorder.size() - 1, preorder, inorder);\n    }\n};\n</code></pre> <p>\u524d\u5e8f\u548c\u540e\u5e8f\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u56e0\u4e3a\u6ca1\u6709\u4e2d\u5e8f\u904d\u5386\u65e0\u6cd5\u786e\u5b9a\u5de6\u53f3\u90e8\u5206\uff0c\u65e0\u6cd5\u5206\u5272\u3002</p>"},{"location":"bilibili_llm.html","title":"\u5218\u77e5\u8fdc\u5927\u6a21\u578b","text":""},{"location":"bilibili_llm.html#basic-tasks-of-nlp","title":"Basic tasks of NLP","text":"<ul> <li>Part of speech</li> <li>Named entity recoginition</li> <li>Co-reference</li> <li>Basic dependencies</li> </ul>"},{"location":"bilibili_llm.html#word-representation","title":"Word representation","text":"<p>Compute word similarity Infer word relation</p>"},{"location":"bilibili_llm.html#problems-of-synonymhypernym-representation","title":"Problems of synonym/hypernym representation","text":"<ul> <li>Missing nuance</li> <li>Missing new meanings of words</li> <li>Subjective</li> <li>Data sparsity</li> <li> <p>Requires human labor to create and adapt</p> </li> <li> <p>One-hot representation</p> </li> <li> <p>Count-based representation</p> </li> <li> <p>Increase in size with vocabulary</p> </li> <li>Require a lot of storage</li> <li>Sparsity issues for those less frequent words</li> <li>Subsequent classification models will be less robust</li> <li>Word embedding</li> <li>Distributed representation</li> </ul> <p>Model pre-training: large-scale unlabled data Model fine-tuning: task-specific training data</p> <ul> <li>Sigmoid:  \u4e8c\u5206\u7c7b</li> <li>Softmax: \u591a\u5206\u7c7b</li> <li>Cross-entropy: \u6b63\u786e\u5206\u7c7b\u7684-log\u7684\u6982\u7387</li> <li>Stochastic gradient descent</li> </ul> <p>Sub-sampling: rare words can be more likely to carry information, according to which, sub-sampling weights to more distant words</p> <p>Soft sliding window</p> <ul> <li>RNN: \u66f4\u957f\u7684\u6587\u672c\uff0c\u68af\u5ea6\u6d88\u5931</li> <li>Gated Recurrent Unit: \u662f\u5426\u4e22\u5f03\u5f53\u524d\u72b6\u6001</li> <li>LSTM: cell state extra vector for capturing long-term dependency</li> <li>CNN: \u5c40\u90e8\u6a21\u5f0f\uff0cbetter parallelization within sentences</li> <li>Transformer</li> </ul> <p>Byte Pair Encoding</p> <p>Input encoding</p> <ul> <li>Feature-based approaches: word2vec</li> <li> <p>Fine-tuning approaches: bert/gpt</p> </li> <li> <p>preplexity: lower preplexity -&gt; \u6587\u672c\u6d41\u7545</p> </li> <li>zero-shot</li> </ul> <p>BERT: masked LM, gap between pre-training and fine-tuning, efficiency of masked language model</p>"},{"location":"go_data_structures.html","title":"Go \u6570\u636e\u7ed3\u6784","text":""},{"location":"go_data_structures.html#_1","title":"\u6570\u7ec4","text":"<p>\u4e00\u79cd\u5177\u6709\u56fa\u5b9a\u957f\u5ea6\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784,\u4e00\u65e6\u521b\u5efa\u4e86\u5b83\u7684\u957f\u5ea6\u5c31\u4e0d\u5141\u8bb8\u6539\u53d8,\u6570\u7ec4\u7684\u7a7a\u4f59\u4f4d\u7f6e\u7528\u7f3a\u7701\u503c\u586b\u8865,\u4e0d\u5141\u8bb8\u6570\u7ec4\u8d8a\u754c\u3002\u503c\u62f7\u8d1d\u4f20\u9012</p>"},{"location":"go_data_structures.html#slice","title":"Slice","text":"<p>\u57fa\u4e8e\u6570\u7ec4\u7684\u5b9e\u73b0\uff0c\u662f\u957f\u5ea6\u52a8\u6001\u4e0d\u56fa\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5bf9\u6570\u7ec4\u5b57\u5e8f\u5217\u7684\u5f15\u7528\uff0c\u63d0\u4f9b\u4e86\u5bf9\u6570\u7ec4\u7684\u8f7b\u91cf\u7ea7\u8bbf\u95ee\u3002 len\uff1a \u8bfb\u5199\u4e0d\u80fd\u8d85\u8fc7, capacity\uff1a \u6700\u5927\u6269\u5f20\u5bb9\u91cf \u7531\u4e8eslice\u8fdb\u884c\u8ffd\u52a0\u7684\u5143\u7d20\u8d85\u51fa\u4e86\u539f\u6765\u6570\u7ec4\u7684\u5927\u5c0f,\u56e0\u6b64go\u5185\u90e8\u4f1a\u5e2e\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e95\u5c42\u6570\u7ec4,\u800cslice\u7684\u5f15\u7528\u5730\u5740\u4e0d\u518d\u662farr\u4e86\uff0c\u53d8\u6210\u4e86\u65b0\u521b\u5efa\u7684\u6570\u7ec4\u3002</p>"},{"location":"go_data_structures.html#map","title":"Map","text":"<pre><code>// \u521b\u5efa\n// map[KeyType]ValueType\nvar m map[int]int\nm := make(map[int]int)\nm := map[int]int{\n1: 1,\n2: 2,\n}\n// \u8bfb\u53d6\ni := m[1]\nv, ok := m[1]\n\u200b\n// \u904d\u5386\nfor key, value := range m {\nprintln(\"Key: \", key, \"Value: \", value)\n}\n\u200b\n// \u5220\u9664\ndelete(m, 1)\n</code></pre> <p> \u76f8\u540c\u5bb9\u91cf\u6269\u5bb9: \u5143\u7d20\u4f1a\u53d1\u751f\u91cd\u6392\uff0c\u4f46\u4e0d\u4f1a\u6362\u6876\u3002 2\u500d\u5bb9\u91cf\u6269\u5bb9: \u53d1\u751f\u8fd9\u79cd\u6269\u5bb9\u65f6\uff0c\u5143\u7d20\u4f1a\u91cd\u6392\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u6876\u8fc1\u79fb\u3002</p> <p>\u7ebf\u7a0b\u4e0d\u5b89\u5168\uff1a</p> <pre><code>type Resource struct {\n    sync.RWMutex\n    m map[string]int\n}\n\u200b\nfunc main() {\n    r := Resource{m: make(map[string]int)}\n\u200b\n    go func() { //\u5f00\u4e00\u4e2agoroutine\u5199map\n        for j := 0; j &lt; 100; j++ {\n            r.Lock()\n            r.m[fmt.Sprintf(\"resource_%d\", j)] = j\n            r.Unlock()\n        }\n    }()\n    go func() { //\u5f00\u4e00\u4e2agoroutine\u8bfbmap\n        for j := 0; j &lt; 100; j++ {\n            r.RLock()\n            fmt.Println(r.m[fmt.Sprintf(\"resource_%d\", j)])\n            r.RUnlock()\n        }\n    }()\n}\n</code></pre> <p>map\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u65f6\u4e0d\u53ef\u53d6\u5730\u5740, \u56e0\u4e3a\u968f\u7740map\u5143\u7d20\u7684\u589e\u957f\uff0cmap\u5e95\u5c42\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\u4f1a\u5bfc\u81f4\u4e4b\u524d\u7684\u5730\u5740\u65e0\u6548\u3002</p> <p>sync.Map (\u9002\u5408\u8bfb\u591a\u5199\u5c11)</p> <pre><code>type Map struct {\n mu Mutex\n read atomic.Value // readOnly\n dirty map[interface{}]*entry\n misses int\n}\n</code></pre>"},{"location":"go_multithreading.html","title":"Go \u5e76\u53d1\u7f16\u7a0b","text":"<p>goroutine \u4ee5\u975e\u963b\u585e\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u5b83\u4eec\u4f1a\u968f\u7740\u7a0b\u5e8f(\u4e3b\u7ebf\u7a0b)\u7684\u7ed3\u675f\u800c\u6d88\u4ea1 WaitGroup: \u7b49\u5f85\u5355\u4e2a\u6216\u591a\u4e2agoroutines\u6267\u884c\u7ed3\u675f</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a WaitGroup \u5b9e\u4f8b\uff0c\u6bd4\u5982\u540d\u79f0\u4e3a\uff1awg</li> <li>\u8c03\u7528 wg.Add(n)\uff0c\u5176\u4e2d n \u662f\u7b49\u5f85\u7684 goroutine \u7684\u6570\u91cf</li> <li>\u5728\u6bcf\u4e2a goroutine \u8fd0\u884c\u7684\u51fd\u6570\u4e2d\u6267\u884c defer wg.Done()</li> <li>\u8c03\u7528 wg.Wait() \u963b\u585e\u4e3b\u903b\u8f91</li> </ul> <p>Golang \u7684\u8fd0\u884c\u65f6\u4f1a\u5728\u903b\u8f91\u5904\u7406\u5668\u4e0a\u8c03\u5ea6 goroutine \u6765\u8fd0\u884c\u3002\u6bcf\u4e2a\u903b\u8f91\u5904\u7406\u5668\u90fd\u4e0e\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7ed1\u5b9a</p> <p>\u5e76\u884c (parallelism) \u662f\u8ba9\u4e0d\u540c\u7684\u4ee3\u7801\u7247\u6bb5\u540c\u65f6\u5728\u4e0d\u540c\u7684\u7269\u7406\u5904\u7406\u5668\u4e0a\u6267\u884c\u3002\u5e76\u884c\u7684\u5173\u952e\u662f\u540c\u65f6\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u800c\u5e76\u53d1 (concurrency) \u662f\u6307\u540c\u65f6\u7ba1\u7406\u5f88\u591a\u4e8b\u60c5\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u53ef\u80fd\u53ea\u505a\u4e86\u4e00\u534a\u5c31\u88ab\u6682\u505c\u53bb\u505a\u522b\u7684\u4e8b\u60c5\u4e86(Golang \u7684\u5e76\u53d1\u901a\u8fc7\u5207\u6362\u591a\u4e2a\u7ebf\u7a0b\u8fbe\u5230\u51cf\u5c11\u7269\u7406\u5904\u7406\u5668\u7a7a\u95f2\u7b49\u5f85\u7684\u76ee\u7684)\u3002</p> <p>\u57fa\u4e8e\u8c03\u5ea6\u5668\u7684\u5185\u90e8\u7b97\u6cd5\uff0c\u4e00\u4e2a\u6b63\u8fd0\u884c\u7684 goroutine \u5728\u5de5\u4f5c\u7ed3\u675f\u524d\uff0c\u53ef\u4ee5\u88ab\u505c\u6b62\u5e76\u91cd\u65b0\u8c03\u5ea6\u3002\u8c03\u5ea6\u5668\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u9632\u6b62\u67d0\u4e2a goroutine \u957f\u65f6\u95f4\u5360\u7528\u903b\u8f91\u5904\u7406\u5668\u3002\u5f53 goroutine \u5360\u7528\u65f6\u95f4\u8fc7\u957f\u65f6\uff0c\u8c03\u5ea6\u5668\u4f1a\u505c\u6b62\u5f53\u524d\u6b63\u8fd0\u884c\u7684 goroutine\uff0c\u5e76\u7ed9\u5176\u4ed6\u53ef\u8fd0\u884c\u7684 goroutine \u8fd0\u884c\u7684\u673a\u4f1a\u3002</p> <p>\u8bbe\u7f6e runtime.GOMAXPROCS(1)\uff0c\u5f3a\u5236\u8ba9 goroutine \u5728\u4e00\u4e2a\u903b\u8f91\u5904\u7406\u5668\u4e0a\u5e76\u53d1\u6267\u884c \u8bbe\u7f6e\u903b\u8f91\u5904\u7406\u5668\u7684\u4e2a\u6570\u7b49\u4e8e\u7269\u7406\u5904\u7406\u5668\u7684\u4e2a\u6570\uff0c\u4ece\u800c\u8ba9 goroutine \u5e76\u884c\u6267\u884c(\u7269\u7406\u5904\u7406\u5668\u7684\u4e2a\u6570\u5f97\u5927\u4e8e 1)  runtime.GOMAXPROCS(runtime.NumCPU())</p> <p>\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u88ab\u5206\u6210\u4e24\u90e8\u5206\uff1a\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4</p> <p>\u7528\u6237\u7a7a\u95f4:</p> <ul> <li>\u4ee3\u7801\u6bb5 (\u53ef\u6267\u884c\u6587\u4ef6\u7684\u64cd\u4f5c\u6307\u4ee4)</li> <li>\u6570\u636e\u6bb5 (\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5df2\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf)</li> <li>BSS\u6bb5 (\u7a0b\u5e8f\u4e2d\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf)</li> <li>\u5806 heap (\u8fdb\u7a0b\u8fd0\u884c\u4e2d\u88ab\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u6bb5)</li> <li>\u6808 stack (\u7a0b\u5e8f\u4e34\u65f6\u521b\u5efa\u7684\u5c40\u90e8\u53d8\u91cf)</li> </ul> <p>\u6570\u636e\u6bb5\u3001BSS \u6bb5\u3001\u5806\u901a\u5e38\u662f\u88ab\u8fde\u7eed\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5728\u4f4d\u7f6e\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u800c\u4ee3\u7801\u6bb5\u548c\u6808\u5f80\u5f80\u4f1a\u88ab\u72ec\u7acb\u5b58\u653e \u8fdb\u7a0b\u662f\u7a0b\u5e8f\u8d44\u6e90\u7ba1\u7406\u7684\u6700\u5c0f\u5355\u4f4d \u7ebf\u7a0b\u662f\u8d44\u6e90\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u4f4d</p> <p>\u7528\u6237\u7ea7\u7ebf\u7a0b: \u7528\u6237\u7ea7\u7ebf\u7a0b\u8c03\u5ea6\u5668\u5728\u7528\u6237\u7a7a\u95f4\u7684\u7ebf\u7a0b\u5e93\u5b9e\u73b0\uff0c\u5185\u6838\u7684\u8c03\u5ea6\u5bf9\u8c61\u662f\u8fdb\u7a0b\u672c\u8eab\uff0c\u5185\u6838\u5e76\u4e0d\u77e5\u9053\u7528\u6237\u7ebf\u7a0b\u7684\u5b58\u5728\u3002</p> <p>*** \u8f7b\u91cf\u7ea7\u8fdb\u7a0b Light-weight Process ***: \u4e00\u79cd\u7531\u5185\u6838\u652f\u6301\u7684\u7528\u6237\u7ebf\u7a0b\uff0c\u6bcf\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u90fd\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684<code>\u5185\u6838\u7ebf\u7a0b</code>\u5173\u8054\u3002</p> <p>*** \u534f\u7a0b Coroutines *** \u662f\u4e00\u79cd\u6bd4\u7ebf\u7a0b\u66f4\u52a0\u8f7b\u91cf\u7ea7\u7684\u5fae\u7ebf\u7a0b \u534f\u7a0b\u7684\u8c03\u5ea6\u5b8c\u5168\u7531\u7528\u6237\u63a7\u5236\uff0c\u534f\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\uff0c\u534f\u7a0b\u8c03\u5ea6\u5207\u6362\u65f6\uff0c\u5c06\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\u4fdd\u5b58\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5728\u5207\u56de\u6765\u7684\u65f6\u5019\uff0c\u6062\u590d\u5148\u524d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\uff0c\u76f4\u63a5\u64cd\u4f5c\u7528\u6237\u7a7a\u95f4\u6808\uff0c\u5b8c\u5168\u6ca1\u6709\u5185\u6838\u5207\u6362\u7684\u5f00\u9500\u3002</p> <ul> <li>G \u8868\u793a Goroutine \uff0c\u5b83\u662f\u4e00\u4e2a\u5f85\u6267\u884c\u7684\u4efb\u52a1\uff1b</li> <li>M \u8868\u793a\u64cd\u4f5c\u7cfb\u7edf\u7684\u7ebf\u7a0b\uff0c\u5b83\u7531\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u5668\u8c03\u5ea6\u548c\u7ba1\u7406\uff1b</li> <li>P \u8868\u793a\u5904\u7406\u5668 Processor\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u505a\u8fd0\u884c\u5728\u7ebf\u7a0b\u4e0a\u7684\u672c\u5730\u8c03\u5ea6\u5668\uff1b</li> </ul>"},{"location":"go_multithreading.html#context","title":"Context","text":"<p>err, deadline, value</p>"},{"location":"go_syntax.html","title":"Go \u57fa\u7840\u8bed\u6cd5","text":"<p>\u5728Golang\u4e2d\uff0cimport\u5bfc\u5165\u7684\u662f\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u5305\u540d\u3002</p> <p>\u5728Golang\u7684\u5f15\u7528\u4e2d\uff0c\u586b\u5199\u7684\u662f\u6e90\u6587\u4ef6\u6240\u5728\u7684\u76f8\u5bf9\u8def\u5f84\u3002</p> <p>\u5728\u4ee3\u7801\u4e2d\u5f15\u7528\u5305\u5185\u7684\u6210\u5458\u65f6\uff0c\u4f7f\u7528\u5305\u540d\u800c\u4e0d\u662f\u76ee\u5f55\u540d\u3002</p> <p>\u9879\u76ee\u5728\u5f15\u7528\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u9996\u5148\u5728GOROOT/src\u4e2d\u5bfb\u627e\uff0c\u4f8b\u5982fmt\u8f93\u5165\u8f93\u51fa\u5305\uff0c\u5f53\u65e0\u6cd5\u627e\u5230\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627ePROJECT GOPATH/src,\u5982\u679c\u8fd8\u662f\u65e0\u6cd5\u627e\u5230\uff0c\u5c06\u4f1a\u5bfb\u627eGLOBAL GOPATH/src\u3002</p> <pre><code>// \u521d\u59cb\u5316\nvar c, d float64\ne, f := 9, 10\n\n// \u533f\u540d\u53d8\u91cf\n_, v, _ := getData()\nfunc getData() (int, int, int) {\n  // \u8fd4\u56de3\u4e2a\u503c\n  return 2, 4, 8\n}\n\n// \u5e38\u91cf\nconst, no :=\n\n// if\nfunc pow(x, n, lim float64) float64 {\n    if v := math.Pow(x, n); v &lt; lim {\n        return v\n    }\n    return lim\n}\n\n// for\nfunc main() {\n    sum := 0\n    for i := 0; i &lt; 10; i++ {\n        sum += i\n    }\n    fmt.Println(sum)\n}\n\n// \u5bf9\u4e8e\u76f8\u540c\u7c7b\u578b\u7684\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a\nfunc add(x, y int) int {\n    return x + y\n}\n\n// Golang\u4e2d\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u591a\u4e2a\u8fd4\u56de\u503c\nfunc swap(x, y string) (string, string) {\n    return y, x\n}\n\nfunc split(sum int) (x, y int) {\n    x = sum * 4 / 9\n    y = sum - x\n    return\n}\n\n// defer \u8bed\u53e5\u4f1a\u5c06\u51fd\u6570\u63a8\u8fdf\u5230\u5916\u5c42\u51fd\u6570\u8fd4\u56de\u4e4b\u540e\u6267\u884c, defer\u540e\u9762\u5fc5\u987b\u662f\u51fd\u6570\u8c03\u7528\u8bed\u53e5\nfunc main() {\n    defer fmt.Println(\"world\")\n\n    fmt.Println(\"hello\")\n}\n\n// \u6570\u7ec4\nvar a [10]int\n\n// \u5305\u62ec\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u6392\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\na[low : high]\n\n// \u5207\u7247\na := make([]int, 5) // len(a) = 5\nb := make([]int, 0, 5) // len = 0, cap = 5\n</code></pre> <p>\u9996\u5b57\u6bcd\u5c0f\u5199\uff1a\u5305\u5185\u4f7f\u7528\uff0c private</p> <p>\u9996\u5b57\u6bcd\u5927\u5199\uff1a \u53ef\u4ee5\u5728\u5305\u5916\u88ab\u5f15\u5165\u4f7f\u7528\uff0c public</p> <p>\u6307\u9488\uff1a\u7528&amp;\u53d6\u5730\u5740\uff0c\u7528*\u53d6\u5730\u5740\u4e2d\u7684\u503c</p> <p>Golang\u4e2d\u7684\u5207\u7247\uff0c\u4e0d\u662f\u62f7\u8d1d\uff0c\u800c\u662f\u5b9a\u4e49\u4e86\u65b0\u7684\u6307\u9488\uff0c\u6307\u5411\u4e86\u539f\u6765\u6570\u7ec4\u6240\u5728\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u4fee\u6539\u4e86\u5207\u7247\u6570\u7ec4\u7684\u503c\uff0c\u4e5f\u5c31\u76f8\u5e94\u7684\u4fee\u6539\u4e86\u539f\u6570\u7ec4\u7684\u503c\u3002 len \uff08\u5b9a\u4e49\u7684\u957f\u5ea6\uff09, cap (\u5185\u5b58\u7684\u957f\u5ea6)</p> <pre><code>goroutine\ngo a()\ngo b()\ngo c()\n</code></pre> <p>\u901a\u9053\u7684\u8981\u70b9\uff1a</p> <p>1.\u7c7b\u4f3cunix\u4e2d\u7ba1\u9053\uff08pipe\uff09\uff0c\u5148\u8fdb\u5148\u51fa\uff1b</p> <p>2.\u7ebf\u7a0b\u5b89\u5168\uff0c\u591a\u4e2agoroutine\u540c\u65f6\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981\u52a0\u9501\uff1b</p> <p>3.channel\u662f\u6709\u7c7b\u578b\u7684\uff0c\u4e00\u4e2a\u6574\u6570\u7684channel\u53ea\u80fd\u5b58\u653e\u6574\u6570\u3002</p> <p>\u6d88\u606f\u7684\u4f20\u9012\u548c\u83b7\u53d6\u5fc5\u987b\u6210\u5bf9\u51fa\u73b0\uff0c\u4f20\u6570\u636e\u7528channel &lt;- data\uff0c\u53d6\u6570\u636e\u7528&lt;- channel</p> <p>\u4f7f\u7528range\u5173\u952e\u5b57\uff0c\u4f7f\u7528\u5728channel\u4e0a\u65f6\uff0c\u4f1a\u81ea\u52a8\u7b49\u5f85channel\u7684\u52a8\u4f5c\u4e00\u76f4\u5230channel\u88ab\u5173\u95ed\u3002</p> <p>select\u4e2d\u4f1a\u6709case\u4ee3\u7801\u5757\uff0c\u7528\u4e8e\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e\u3002</p> <p>\u7528\u5728\u6709\u591a\u4e2a\u4fe1\u9053\u7684\u60c5\u51b5</p> <pre><code>var ch0 chan int\nvar ch1 chan string\nvar ch2 chan map[string]string\n\ntype stu struct{}\n\nvar ch3 chan stu\nvar ch4 chan *stu\n\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n)\n\nvar ch chan int\n\nfunc a() {\n  time.Sleep(3 * time.Second)\n  a := 5\n  ch &lt;- a\n  fmt.Println(\"out of a\")\n}\nfunc b() {\n  time.Sleep(1 * time.Second)\n  fromA := &lt;- ch\n  b := fromA + 3\n  fmt.Println(\"b is \", b)\n}\nfunc main() {\n  ch = make(chan int, 1)\n  go a()\n  go b()\n  time.Sleep(20 * time.Second)\n  fmt.Println(\"out of main\")\n}\n\nchSync := make(chan int) //\u65e0\u7f13\u51b2\nchAsyn := make(chan int,1) //\u6709\u7f13\u51b2\n</code></pre> <p>\u65e0\u7f13\u51b2\u573a\u666f\uff1a\u4e00\u76f4\u8981\u7b49\u6709\u522b\u7684\u534f\u7a0b\u901a\u8fc7&lt;-chSync\u63a5\u624b\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48chSync&lt;-1\u624d\u4f1a\u7ee7\u7eed\u4e0b\u53bb\uff0c\u8981\u4e0d\u7136\u5c31\u4e00\u76f4\u963b\u585e\u7740\u3002</p> <p>\u6709\u7f13\u51b2\u573a\u666f\uff1achAsyn&lt;-1\u5219\u4e0d\u4f1a\u963b\u585e\uff0c\u56e0\u4e3a\u7f13\u51b2\u5927\u5c0f\u662f1\uff0c\u53ea\u6709\u5f53\u653e\u7b2c\u4e8c\u4e2a\u503c\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u8fd8\u6ca1\u88ab\u4eba\u62ff\u8d70\uff0c\u8fd9\u65f6\u5019\u624d\u4f1a\u963b\u585e\u3002</p> <pre><code>type Shape interface {\n    Area() float64\n    Perimeter() float64\n}\n\ntype Rect struct {\n    height float64\n    weight float64\n}\n\nfunc (p *Rect) Area() float64 {\n    return p.height * p.height\n}\n\nfunc (p *Rect) Perimeter() float64 {\n    return 2* (p.height + p.height)\n}\n\nfunc main() {\n    var s Shape = &amp;Rect{height:10, weight:8}\n    fmt.Println(s.Area())\n    fmt.Println(s.Perimeter())\n}\n\n// go convey\npackage main\n\nimport (\n \"testing\"\n\n \"github.com/smartystreets/goconvey/convey\"\n)\n\nfunc TestRect(t *testing.T) {\n convey.Convey(\"TestRect\", t, func() {\n  var s Shape = &amp;Rect{height: 10, weight: 8}\n  convey.So(s.Area(), convey.ShouldEqual, 80)\n  convey.So(s.Perimeter(), convey.ShouldEqual, 30)\n })\n}\n\n// http gin\u6846\u67b6\npackage main\n\nimport (\n   \"github.com/gin-gonic/gin\"\n   \"log\"\n   \"net/http\"\n)\n\nfunc SayHello(c *gin.Context) {\n   c.String(http.StatusOK, \"hello\") //\u4ee5\u5b57\u7b26\u4e32\"hello\"\u4f5c\u4e3a\u8fd4\u56de\u5305\n}\n\nfunc main() {\n   engine := gin.Default() //\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684gin\u5f15\u64ce\n   engine.Handle(http.MethodGet,\"/say_hello\", SayHello) \n   err := engine.Run(\":8080\") //\u4f7f\u75288080\u7aef\u53e3\u53f7\uff0c\u5f00\u542f\u4e00\u4e2aweb\u670d\u52a1\n   if err != nil {\n      log.Print(\"engine run err: \", err.Error())\n      return\n   }\n}\n\n// \u7ed3\u6784\u4f53\ntype \u7ed3\u6784\u4f53\u540d struct {\n    \u5b57\u6bb51 \u7c7b\u578b\n    \u5b57\u6bb52 \u7c7b\u578b\n}\n\n// \u7b2c\u4e00\u79cd\uff1a \u8fd4\u56de\u8be5\u5b9e\u4f8b\u7684\u7ed3\u6784\u7c7b\u578b\nvar s T\ns.a = 1\ns.b = 2\n\n// \u7b2c\u4e8c\u79cd\uff1a\u8fd4\u56de\u6307\u9488\nming := new(people)\nming.name = \"xiao ming\"\nming.age = 18\n\n// \u7b2c\u4e09\u79cd\uff1a\u8fd4\u56de\u6307\u9488\nming := &amp;people{\"xiao ming\", 18}\n\n// \u7b2c\u4e8c\u79cd\uff0c\u7b2c\u4e09\u79cd\u58f0\u660e\u5f62\u5f0f\n(*ming).name = \"xiao wang\"\n\n// \u65b9\u6cd5\nfunc (v Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n</code></pre> <p>\u53ea\u6709\u6307\u9488\u63a5\u6536\u8005\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u624d\u80fd\u4fee\u6539\u8fd9\u4e2a\u63a5\u6536\u5668\u7684\u6210\u5458\u503c\uff0c\u975e\u6307\u9488\u63a5\u6536\u8005\uff0c\u65b9\u6cd5\u4fee\u6539\u7684\u53ea\u662f\u8fd9\u4e2a\u4f20\u5165\u7684\u6307\u9488\u63a5\u6536\u8005\u7684\u4e00\u4e2a\u62f7\u8d1d\u3002</p> <pre><code>// slice\nvar arr = [...]int{1,2,3,4}\nfmt.Println(arr) //[1,2,3,4]\nslice := arr[:]\nfmt.Println(slice) //[1,2,3,4]\nslice = append(slice,[]int{5,6,7}...) //\u6b64\u65f6slice\u7684\u5f15\u7528\u5730\u5740\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\u4e86,\u5b83\u5f15\u7528\u7684\u5e95\u5c42\u6570\u7ec4\u518d\u4e5f\u4e0d\u662farr\u4e86,\u800c\u662f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4newarr[1,2,3,4,5,6,7]\n\n// \u6570\u7ec4\u521d\u59cb\u5316\narr := [10]int{} \u6216 var arr [10]int\n</code></pre> <p>Go \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u662f\u503c\u7c7b\u578b\uff0c\u4e00\u4e2a\u6570\u7ec4\u53d8\u91cf\u5c31\u8868\u793a\u7740\u6574\u4e2a\u6570\u7ec4\uff0c\u610f\u5473\u7740 Go \u8bed\u8a00\u7684\u6570\u7ec4\u5728\u4f20\u9012\u7684\u65f6\u5019\uff0c\u4f20\u9012\u7684\u662f\u539f\u6570\u7ec4\u7684\u62f7\u8d1d</p> <pre><code>s := []int{1, 2, 3} \u7b80\u77ed\u7684\u8d4b\u503c\u8bed\u53e5 \nvar s []int var \u7533\u660e \nmake([]int, 3, 8) \u6216 make([]int, 3) make \u5185\u7f6e\u65b9\u6cd5\u521b\u5efa \ns := ss[:5] \u4ece\u5207\u7247\u6216\u8005\u6570\u7ec4\u521b\u5efa\n\n// \u521b\u5efa\n// map[KeyType]ValueType\nvar m map[int]int\nm := make(map[int]int)\nm := map[int]int{\n1: 1,\n2: 2,\n}\n// \u8bfb\u53d6\ni := m[1]\nv, ok := m[1]\n\u200b\n// \u904d\u5386\nfor key, value := range m {\nprintln(\"Key: \", key, \"Value: \", value)\n}\n\u200b\n// \u5220\u9664\ndelete(m, 1)\n</code></pre>"},{"location":"java_javaguide.html","title":"Java (Java Guide)","text":"<p>&gt;&gt;&gt; :\u65e0\u7b26\u53f7\u53f3\u79fb\uff0c\u5ffd\u7565\u7b26\u53f7\u4f4d\uff0c\u7a7a\u4f4d\u90fd\u4ee5 0 \u8865\u9f50\u3002</p> <p>Java \u4e2d\u6709 8 \u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5206\u522b\u4e3a\uff1a</p> <ul> <li> <p>6 \u79cd\u6570\u5b57\u7c7b\u578b\uff1a</p> <ul> <li>4 \u79cd\u6574\u6570\u578b\uff1abyte\u3001short\u3001int\u3001long</li> <li>2 \u79cd\u6d6e\u70b9\u578b\uff1afloat\u3001double</li> </ul> </li> <li> <p>1 \u79cd\u5b57\u7b26\u7c7b\u578b\uff1achar</p> </li> <li> <p>1 \u79cd\u5e03\u5c14\u578b\uff1aboolean\u3002</p> </li> </ul>"},{"location":"java_javaguide.html#vs","title":"\u57fa\u672c\u7c7b\u578b vs \u5305\u88c5\u7c7b\u578b","text":"<p>\u7528\u9014\uff1a\u9664\u4e86\u5b9a\u4e49\u4e00\u4e9b\u5e38\u91cf\u548c\u5c40\u90e8\u53d8\u91cf\u4e4b\u5916\uff0c\u6211\u4eec\u5728\u5176\u4ed6\u5730\u65b9\u6bd4\u5982\u65b9\u6cd5\u53c2\u6570\u3001\u5bf9\u8c61\u5c5e\u6027\u4e2d\u5f88\u5c11\u4f1a\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u6765\u5b9a\u4e49\u53d8\u91cf\u3002\u5e76\u4e14\uff0c\u5305\u88c5\u7c7b\u578b\u53ef\u7528\u4e8e\u6cdb\u578b\uff0c\u800c\u57fa\u672c\u7c7b\u578b\u4e0d\u53ef\u4ee5\u3002</p> <p>\u5b58\u50a8\u65b9\u5f0f\uff1a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5c40\u90e8\u53d8\u91cf\u5b58\u653e\u5728 Java \u865a\u62df\u673a\u6808\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u8868\u4e2d\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff08\u672a\u88ab static \u4fee\u9970 \uff09\u5b58\u653e\u5728 Java \u865a\u62df\u673a\u7684\u5806\u4e2d\u3002\u5305\u88c5\u7c7b\u578b\u5c5e\u4e8e\u5bf9\u8c61\u7c7b\u578b\uff0c\u6211\u4eec\u77e5\u9053\u51e0\u4e4e\u6240\u6709\u5bf9\u8c61\u5b9e\u4f8b\u90fd\u5b58\u5728\u4e8e\u5806\u4e2d\u3002</p> <p>\u5360\u7528\u7a7a\u95f4\uff1a\u76f8\u6bd4\u4e8e\u5305\u88c5\u7c7b\u578b\uff08\u5bf9\u8c61\u7c7b\u578b\uff09\uff0c \u57fa\u672c\u6570\u636e\u7c7b\u578b\u5360\u7528\u7684\u7a7a\u95f4\u5f80\u5f80\u975e\u5e38\u5c0f\u3002\u9ed8\u8ba4\u503c\uff1a\u6210\u5458\u53d8\u91cf\u5305\u88c5\u7c7b\u578b\u4e0d\u8d4b\u503c\u5c31\u662f null \uff0c\u800c\u57fa\u672c\u7c7b\u578b\u6709\u9ed8\u8ba4\u503c\u4e14\u4e0d\u662f null\u3002\u6bd4\u8f83\u65b9\u5f0f\uff1a\u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6765\u8bf4\uff0c== \u6bd4\u8f83\u7684\u662f\u503c\u3002\u5bf9\u4e8e\u5305\u88c5\u6570\u636e\u7c7b\u578b\u6765\u8bf4\uff0c== \u6bd4\u8f83\u7684\u662f\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u3002\u6240\u6709\u6574\u578b\u5305\u88c5\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u503c\u7684\u6bd4\u8f83\uff0c\u5168\u90e8\u4f7f\u7528 equals() \u65b9\u6cd5\u3002</p> <p>Byte,Short,Integer,Long \u8fd9 4 \u79cd\u5305\u88c5\u7c7b\u9ed8\u8ba4\u521b\u5efa\u4e86\u6570\u503c [-128\uff0c127] \u7684\u76f8\u5e94\u7c7b\u578b\u7684\u7f13\u5b58\u6570\u636e\uff0cCharacter \u521b\u5efa\u4e86\u6570\u503c\u5728 [0,127] \u8303\u56f4\u7684\u7f13\u5b58\u6570\u636e\uff0cBoolean \u76f4\u63a5\u8fd4\u56de True or False</p> <p>\u4e24\u79cd\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u5305\u88c5\u7c7b Float,Double \u5e76\u6ca1\u6709\u5b9e\u73b0\u7f13\u5b58\u673a\u5236\u3002</p>"},{"location":"java_javaguide.html#vs_1","title":"\u6210\u5458\u53d8\u91cf vs \u5c40\u90e8\u53d8\u91cf","text":"<p>\u8bed\u6cd5\u5f62\u5f0f\uff1a\u4ece\u8bed\u6cd5\u5f62\u5f0f\u4e0a\u770b\uff0c\u6210\u5458\u53d8\u91cf\u662f\u5c5e\u4e8e\u7c7b\u7684\uff0c\u800c\u5c40\u90e8\u53d8\u91cf\u662f\u5728\u4ee3\u7801\u5757\u6216\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u6216\u662f\u65b9\u6cd5\u7684\u53c2\u6570\uff1b\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab public,private,static \u7b49\u4fee\u9970\u7b26\u6240\u4fee\u9970\uff0c\u800c\u5c40\u90e8\u53d8\u91cf\u4e0d\u80fd\u88ab\u8bbf\u95ee\u63a7\u5236\u4fee\u9970\u7b26\u53ca static \u6240\u4fee\u9970\uff1b\u4f46\u662f\uff0c\u6210\u5458\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u80fd\u88ab final \u6240\u4fee\u9970\u3002</p> <p>\u5b58\u50a8\u65b9\u5f0f\uff1a\u4ece\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u6765\u770b\uff0c\u5982\u679c\u6210\u5458\u53d8\u91cf\u662f\u4f7f\u7528 static \u4fee\u9970\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6210\u5458\u53d8\u91cf\u662f\u5c5e\u4e8e\u7c7b\u7684\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 static \u4fee\u9970\uff0c\u8fd9\u4e2a\u6210\u5458\u53d8\u91cf\u662f\u5c5e\u4e8e\u5b9e\u4f8b\u7684\u3002\u800c\u5bf9\u8c61\u5b58\u5728\u4e8e\u5806\u5185\u5b58\uff0c\u5c40\u90e8\u53d8\u91cf\u5219\u5b58\u5728\u4e8e\u6808\u5185\u5b58\u3002</p> <p>\u751f\u5b58\u65f6\u95f4\uff1a\u4ece\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u751f\u5b58\u65f6\u95f4\u4e0a\u770b\uff0c\u6210\u5458\u53d8\u91cf\u662f\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u968f\u7740\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5b58\u5728\uff0c\u800c\u5c40\u90e8\u53d8\u91cf\u968f\u7740\u65b9\u6cd5\u7684\u8c03\u7528\u800c\u81ea\u52a8\u751f\u6210\uff0c\u968f\u7740\u65b9\u6cd5\u7684\u8c03\u7528\u7ed3\u675f\u800c\u6d88\u4ea1\u3002</p> <p>\u9ed8\u8ba4\u503c\uff1a\u4ece\u53d8\u91cf\u662f\u5426\u6709\u9ed8\u8ba4\u503c\u6765\u770b\uff0c\u6210\u5458\u53d8\u91cf\u5982\u679c\u6ca1\u6709\u88ab\u8d4b\u521d\u59cb\u503c\uff0c\u5219\u4f1a\u81ea\u52a8\u4ee5\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\u800c\u8d4b\u503c\uff08\u4e00\u79cd\u60c5\u51b5\u4f8b\u5916:\u88ab final \u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\u4e5f\u5fc5\u987b\u663e\u5f0f\u5730\u8d4b\u503c\uff09\uff0c\u800c\u5c40\u90e8\u53d8\u91cf\u5219\u4e0d\u4f1a\u81ea\u52a8\u8d4b\u503c\u3002</p> <p>\u6ce8\u610f char \u5728 Java \u4e2d\u5360\u4e24\u4e2a\u5b57\u8282\u3002</p>"},{"location":"java_javaguide.html#_1","title":"\u9759\u6001\u65b9\u6cd5\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458?","text":"<p>\u8fd9\u4e2a\u9700\u8981\u7ed3\u5408 JVM \u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4e3b\u8981\u539f\u56e0\u5982\u4e0b\uff1a\u9759\u6001\u65b9\u6cd5\u662f\u5c5e\u4e8e\u7c7b\u7684\uff0c\u5728\u7c7b\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u4f1a\u5206\u914d\u5185\u5b58\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u76f4\u63a5\u8bbf\u95ee\u3002\u800c\u975e\u9759\u6001\u6210\u5458\u5c5e\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u53ea\u6709\u5728\u5bf9\u8c61\u5b9e\u4f8b\u5316\u4e4b\u540e\u624d\u5b58\u5728\uff0c\u9700\u8981\u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u53bb\u8bbf\u95ee\u3002\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u9759\u6001\u65b9\u6cd5\u5c31\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u6b64\u65f6\u8c03\u7528\u5728\u5185\u5b58\u4e2d\u8fd8\u4e0d\u5b58\u5728\u7684\u975e\u9759\u6001\u6210\u5458\uff0c\u5c5e\u4e8e\u975e\u6cd5\u64cd\u4f5c\u3002</p>"},{"location":"java_javaguide.html#_2","title":"\u91cd\u8f7d\u548c\u91cd\u5199\u6709\u4ec0\u4e48\u533a\u522b\uff1f","text":"<p>\u91cd\u8f7d\u5c31\u662f\u540c\u6837\u7684\u4e00\u4e2a\u65b9\u6cd5\u80fd\u591f\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u4e0d\u540c\uff0c\u505a\u51fa\u4e0d\u540c\u7684\u5904\u7406</p> <p>\u91cd\u5199\u5c31\u662f\u5f53\u5b50\u7c7b\u7ee7\u627f\u81ea\u7236\u7c7b\u7684\u76f8\u540c\u65b9\u6cd5\uff0c\u8f93\u5165\u6570\u636e\u4e00\u6837\uff0c\u4f46\u8981\u505a\u51fa\u6709\u522b\u4e8e\u7236\u7c7b\u7684\u54cd\u5e94\u65f6\uff0c\u4f60\u5c31\u8981\u8986\u76d6\u7236\u7c7b\u65b9\u6cd5</p> \u533a\u522b\u70b9 \u91cd\u8f7d\u65b9\u6cd5 \u91cd\u5199\u65b9\u6cd5 \u53d1\u751f\u8303\u56f4 \u540c\u4e00\u4e2a\u7c7b \u5b50\u7c7b \u53c2\u6570\u5217\u8868 \u5fc5\u987b\u4fee\u6539 \u4e00\u5b9a\u4e0d\u80fd\u4fee\u6539 \u8fd4\u56de\u7c7b\u578b \u53ef\u4fee\u6539 \u5b50\u7c7b\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u5e94\u6bd4\u7236\u7c7b\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u66f4\u5c0f\u6216\u76f8\u7b49 \u5f02\u5e38 \u53ef\u4fee\u6539 \u5b50\u7c7b\u65b9\u6cd5\u58f0\u660e\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u5e94\u6bd4\u7236\u7c7b\u65b9\u6cd5\u58f0\u660e\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u66f4\u5c0f\u6216\u76f8\u7b49\uff1b \u8bbf\u95ee\u4fee\u9970\u7b26 \u53ef\u4fee\u6539 \u4e00\u5b9a\u4e0d\u80fd\u505a\u66f4\u4e25\u683c\u7684\u9650\u5236\uff08\u53ef\u4ee5\u964d\u4f4e\u9650\u5236\uff09 \u53d1\u751f\u9636\u6bb5 \u7f16\u8bd1\u671f \u8fd0\u884c\u671f <p>\u65b9\u6cd5\u7684\u91cd\u5199\u8981\u9075\u5faa\u201c\u4e24\u540c\u4e24\u5c0f\u4e00\u5927\u201d \u201c\u4e24\u540c\u201d\u5373\u65b9\u6cd5\u540d\u76f8\u540c\u3001\u5f62\u53c2\u5217\u8868\u76f8\u540c\uff1b\u201c\u4e24\u5c0f\u201d\u6307\u7684\u662f\u5b50\u7c7b\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u5e94\u6bd4\u7236\u7c7b\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u66f4\u5c0f\u6216\u76f8\u7b49\uff0c\u5b50\u7c7b\u65b9\u6cd5\u58f0\u660e\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u5e94\u6bd4\u7236\u7c7b\u65b9\u6cd5\u58f0\u660e\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u66f4\u5c0f\u6216\u76f8\u7b49\uff1b\u201c\u4e00\u5927\u201d\u6307\u7684\u662f\u5b50\u7c7b\u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650\u5e94\u6bd4\u7236\u7c7b\u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650\u66f4\u5927\u6216\u76f8\u7b49\u3002</p> <p>\u5c01\u88c5\u662f\u6307\u628a\u4e00\u4e2a\u5bf9\u8c61\u7684\u72b6\u6001\u4fe1\u606f\uff08\u4e5f\u5c31\u662f\u5c5e\u6027\uff09\u9690\u85cf\u5728\u5bf9\u8c61\u5185\u90e8</p> <p>\u7ee7\u627f\uff1a \u5b50\u7c7b\u62e5\u6709\u7236\u7c7b\u5bf9\u8c61\u6240\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u5305\u62ec\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5\uff09\uff0c\u4f46\u662f\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u5b50\u7c7b\u662f\u65e0\u6cd5\u8bbf\u95ee\uff0c\u53ea\u662f\u62e5\u6709\u3002 \u5b50\u7c7b\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u5373\u5b50\u7c7b\u53ef\u4ee5\u5bf9\u7236\u7c7b\u8fdb\u884c\u6269\u5c55\u3002 \u5b50\u7c7b\u53ef\u4ee5\u7528\u81ea\u5df1\u7684\u65b9\u5f0f\u5b9e\u73b0\u7236\u7c7b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"java_javaguide.html#equals","title":"== \u548c equals() \u7684\u533a\u522b","text":"<p>\u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6765\u8bf4\uff0c== \u6bd4\u8f83\u7684\u662f\u503c\u3002 \u5bf9\u4e8e\u5f15\u7528\u6570\u636e\u7c7b\u578b\u6765\u8bf4\uff0c== \u6bd4\u8f83\u7684\u662f\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u3002 equals() \u4e0d\u80fd\u7528\u4e8e\u5224\u65ad\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u6765\u5224\u65ad\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\u3002 equals()\u65b9\u6cd5\u5b58\u5728\u4e8eObject\u7c7b\u4e2d\uff0c\u800cObject\u7c7b\u662f\u6240\u6709\u7c7b\u7684\u76f4\u63a5\u6216\u95f4\u63a5\u7236\u7c7b\uff0c\u56e0\u6b64\u6240\u6709\u7684\u7c7b\u90fd\u6709equals()\u65b9\u6cd5\u3002</p> <pre><code>String a = new String(\"ab\"); // a \u4e3a\u4e00\u4e2a\u5f15\u7528\nString b = new String(\"ab\"); // b\u4e3a\u53e6\u4e00\u4e2a\u5f15\u7528,\u5bf9\u8c61\u7684\u5185\u5bb9\u4e00\u6837\nString aa = \"ab\"; // \u653e\u5728\u5e38\u91cf\u6c60\u4e2d\nString bb = \"ab\"; \nSystem.out.println(aa == bb);// true\nSystem.out.println(a == b);// false\nSystem.out.println(a.equals(b));// true\n</code></pre>"},{"location":"java_javaguide.html#stringstringbufferstringbuilder","title":"String\u3001StringBuffer\u3001StringBuilder \u7684\u533a\u522b\uff1f","text":"<ul> <li> <p>\u53ef\u53d8\u6027 String \u662f\u4e0d\u53ef\u53d8\u7684\uff08\u540e\u9762\u4f1a\u8be6\u7ec6\u5206\u6790\u539f\u56e0\uff09\u3002StringBuilder \u4e0e StringBuffer \u90fd\u7ee7\u627f\u81ea AbstractStringBuilder \u7c7b\uff0c\u5728 AbstractStringBuilder \u4e2d\u4e5f\u662f\u4f7f\u7528\u5b57\u7b26\u6570\u7ec4\u4fdd\u5b58\u5b57\u7b26\u4e32\uff0c\u4e0d\u8fc7\u6ca1\u6709\u4f7f\u7528 final \u548c private \u5173\u952e\u5b57\u4fee\u9970\uff0c\u6700\u5173\u952e\u7684\u662f\u8fd9\u4e2a AbstractStringBuilder \u7c7b\u8fd8\u63d0\u4f9b\u4e86\u5f88\u591a\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u6bd4\u5982 append \u65b9\u6cd5\u3002</p> </li> <li> <p>\u7ebf\u7a0b\u5b89\u5168\u6027 String \u4e2d\u7684\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e5f\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u5e38\u91cf\uff0c\u7ebf\u7a0b\u5b89\u5168\u3002AbstractStringBuilder \u662f StringBuilder \u4e0e StringBuffer \u7684\u516c\u5171\u7236\u7c7b\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u5982 expandCapacity\u3001append\u3001insert\u3001indexOf \u7b49\u516c\u5171\u65b9\u6cd5\u3002StringBuffer \u5bf9\u65b9\u6cd5\u52a0\u4e86\u540c\u6b65\u9501\u6216\u8005\u5bf9\u8c03\u7528\u7684\u65b9\u6cd5\u52a0\u4e86\u540c\u6b65\u9501\uff0c\u6240\u4ee5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002StringBuilder \u5e76\u6ca1\u6709\u5bf9\u65b9\u6cd5\u8fdb\u884c\u52a0\u540c\u6b65\u9501\uff0c\u6240\u4ee5\u662f\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</p> </li> <li> <p>\u6027\u80fd \u6bcf\u6b21\u5bf9 String \u7c7b\u578b\u8fdb\u884c\u6539\u53d8\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684 String \u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u6307\u9488\u6307\u5411\u65b0\u7684 String \u5bf9\u8c61\u3002StringBuffer \u6bcf\u6b21\u90fd\u4f1a\u5bf9 StringBuffer \u5bf9\u8c61\u672c\u8eab\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u751f\u6210\u65b0\u7684\u5bf9\u8c61\u5e76\u6539\u53d8\u5bf9\u8c61\u5f15\u7528\u3002\u76f8\u540c\u60c5\u51b5\u4e0b\u4f7f\u7528 StringBuilder \u76f8\u6bd4\u4f7f\u7528 StringBuffer \u4ec5\u80fd\u83b7\u5f97 10%~15% \u5de6\u53f3\u7684\u6027\u80fd\u63d0\u5347\uff0c\u4f46\u5374\u8981\u5192\u591a\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\u98ce\u9669\u3002</p> </li> </ul> <p>\u5bf9\u4e8e\u4e09\u8005\u4f7f\u7528\u7684\u603b\u7ed3\uff1a \u64cd\u4f5c\u5c11\u91cf\u7684\u6570\u636e: \u9002\u7528 String \u5355\u7ebf\u7a0b\u64cd\u4f5c\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u4e0b\u64cd\u4f5c\u5927\u91cf\u6570\u636e: \u9002\u7528 StringBuilder \u591a\u7ebf\u7a0b\u64cd\u4f5c\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u4e0b\u64cd\u4f5c\u5927\u91cf\u6570\u636e: \u9002\u7528 StringBuffer</p> <p>String \u771f\u6b63\u4e0d\u53ef\u53d8\u6709\u4e0b\u9762\u51e0\u70b9\u539f\u56e0\uff1a\u4fdd\u5b58\u5b57\u7b26\u4e32\u7684\u6570\u7ec4\u88ab final \u4fee\u9970\u4e14\u4e3a\u79c1\u6709\u7684\uff0c\u5e76\u4e14String \u7c7b\u6ca1\u6709\u63d0\u4f9b/\u66b4\u9732\u4fee\u6539\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u3002String \u7c7b\u88ab final \u4fee\u9970\u5bfc\u81f4\u5176\u4e0d\u80fd\u88ab\u7ee7\u627f\uff0c\u8fdb\u800c\u907f\u514d\u4e86\u5b50\u7c7b\u7834\u574f String \u4e0d\u53ef\u53d8\u3002</p> <p>\u5728\u5faa\u73af\u5185\u4f7f\u7528\u201c+\u201d\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\u7684\u8bdd\uff0c\u5b58\u5728\u6bd4\u8f83\u660e\u663e\u7684\u7f3a\u9677\uff1a\u7f16\u8bd1\u5668\u4e0d\u4f1a\u521b\u5efa\u5355\u4e2a StringBuilder \u4ee5\u590d\u7528\uff0c\u4f1a\u5bfc\u81f4\u521b\u5efa\u8fc7\u591a\u7684 StringBuilder \u5bf9\u8c61\u3002</p> <p>String.intern() \u662f\u4e00\u4e2a native\uff08\u672c\u5730\uff09\u65b9\u6cd5\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u5f15\u7528\u4fdd\u5b58\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4e2d\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5982\u679c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4e2d\u4fdd\u5b58\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8be5\u5f15\u7528\u3002</li> <li>\u5982\u679c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4e2d\u6ca1\u6709\u4fdd\u5b58\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u90a3\u5c31\u5728\u5e38\u91cf\u6c60\u4e2d\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u8be5\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u5f15\u7528\u5e76\u8fd4\u56de\u3002</li> </ul> <p>\u6cdb\u578b\u7c7b\u3001\u6cdb\u578b\u63a5\u53e3\u3001\u6cdb\u578b\u65b9\u6cd5</p>"},{"location":"java_jvm_javaguide.html","title":"JVM (Java Guide)","text":"<p>\u7ebf\u7a0b\u79c1\u6709\u7684\uff1a</p> <p>\u7a0b\u5e8f\u8ba1\u6570\u5668 \u865a\u62df\u673a\u6808 \u672c\u5730\u65b9\u6cd5\u6808</p> <p>\u7ebf\u7a0b\u5171\u4eab\u7684\uff1a</p> <p>\u5806 \u65b9\u6cd5\u533a \u76f4\u63a5\u5185\u5b58 (\u975e\u8fd0\u884c\u65f6\u6570\u636e\u533a\u7684\u4e00\u90e8\u5206)</p> <p>\u7ebf\u7a0b\u662f\u8fdb\u7a0b\u5212\u5206\u6210\u7684\u66f4\u5c0f\u7684\u8fd0\u884c\u5355\u4f4d\u3002\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u6700\u5927\u7684\u4e0d\u540c\u5728\u4e8e\u57fa\u672c\u4e0a\u5404\u8fdb\u7a0b\u662f\u72ec\u7acb\u7684\uff0c\u800c\u5404\u7ebf\u7a0b\u5219\u4e0d\u4e00\u5b9a\uff0c\u56e0\u4e3a\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u7ebf\u7a0b\u6781\u6709\u53ef\u80fd\u4f1a\u76f8\u4e92\u5f71\u54cd\u3002\u7ebf\u7a0b\u6267\u884c\u5f00\u9500\u5c0f\uff0c\u4f46\u4e0d\u5229\u4e8e\u8d44\u6e90\u7684\u7ba1\u7406\u548c\u4fdd\u62a4\uff1b\u800c\u8fdb\u7a0b\u6b63\u76f8\u53cd\u3002</p>"},{"location":"java_multithread_javaguide.html","title":"\u4f55\u4e3a\u8fdb\u7a0b?","text":"<p>\u8fdb\u7a0b\u662f\u7a0b\u5e8f\u7684\u4e00\u6b21\u6267\u884c\u8fc7\u7a0b\uff0c\u662f\u7cfb\u7edf\u8fd0\u884c\u7a0b\u5e8f\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u56e0\u6b64\u8fdb\u7a0b\u662f\u52a8\u6001\u7684\u3002\u7cfb\u7edf\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8f\u5373\u662f\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u521b\u5efa\uff0c\u8fd0\u884c\u5230\u6d88\u4ea1\u7684\u8fc7\u7a0b\u3002\u5728 Java \u4e2d\uff0c\u5f53\u6211\u4eec\u542f\u52a8 main \u51fd\u6570\u65f6\u5176\u5b9e\u5c31\u662f\u542f\u52a8\u4e86\u4e00\u4e2a JVM \u7684\u8fdb\u7a0b\uff0c\u800c main \u51fd\u6570\u6240\u5728\u7684\u7ebf\u7a0b\u5c31\u662f\u8fd9\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e5f\u79f0\u4e3b\u7ebf\u7a0b\u3002</p>"},{"location":"java_multithread_javaguide.html#_2","title":"\u8bf4\u8bf4\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u548c\u72b6\u6001?","text":"<p>Java \u7ebf\u7a0b\u5728\u8fd0\u884c\u7684\u751f\u547d\u5468\u671f\u4e2d\u7684\u6307\u5b9a\u65f6\u523b\u53ea\u53ef\u80fd\u5904\u4e8e\u4e0b\u9762 6 \u79cd\u4e0d\u540c\u72b6\u6001\u7684\u5176\u4e2d\u4e00\u4e2a\u72b6\u6001\uff1a</p> <ul> <li>NEW: \u521d\u59cb\u72b6\u6001\uff0c\u7ebf\u7a0b\u88ab\u521b\u5efa\u51fa\u6765\u4f46\u6ca1\u6709\u88ab\u8c03\u7528 start() \u3002</li> <li>RUNNABLE: \u8fd0\u884c\u72b6\u6001\uff0c\u7ebf\u7a0b\u88ab\u8c03\u7528\u4e86 start()\u7b49\u5f85\u8fd0\u884c\u7684\u72b6\u6001\u3002</li> <li>BLOCKED\uff1a\u963b\u585e\u72b6\u6001\uff0c\u9700\u8981\u7b49\u5f85\u9501\u91ca\u653e\u3002</li> <li>WAITING\uff1a\u7b49\u5f85\u72b6\u6001\uff0c\u8868\u793a\u8be5\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u505a\u51fa\u4e00\u4e9b\u7279\u5b9a\u52a8\u4f5c\uff08\u901a\u77e5\u6216\u4e2d\u65ad\uff09\u3002</li> <li>TIME_WAITING\uff1a\u8d85\u65f6\u7b49\u5f85\u72b6\u6001\uff0c\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u540e\u81ea\u884c\u8fd4\u56de\u800c\u4e0d\u662f\u50cf WAITING \u90a3\u6837\u4e00\u76f4\u7b49\u5f85\u3002</li> <li>TERMINATED\uff1a\u7ec8\u6b62\u72b6\u6001\uff0c\u8868\u793a\u8be5\u7ebf\u7a0b\u5df2\u7ecf\u8fd0\u884c\u5b8c\u6bd5\u3002</li> </ul>"},{"location":"java_multithread_javaguide.html#_3","title":"\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff1a","text":"<ul> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u8be5\u8d44\u6e90\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\u53ea\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5360\u7528\u3002</li> <li>\u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u4e00\u4e2a\u7ebf\u7a0b\u56e0\u8bf7\u6c42\u8d44\u6e90\u800c\u963b\u585e\u65f6\uff0c\u5bf9\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u4fdd\u6301\u4e0d\u653e\u3002</li> <li>\u4e0d\u5265\u593a\u6761\u4ef6: \u7ebf\u7a0b\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u4e4b\u524d\u4e0d\u80fd\u88ab\u5176\u4ed6\u7ebf\u7a0b\u5f3a\u884c\u5265\u593a\uff0c\u53ea\u6709\u81ea\u5df1\u4f7f\u7528\u5b8c\u6bd5\u540e\u624d\u91ca\u653e\u8d44\u6e90\u3002</li> <li>\u5faa\u73af\u7b49\u5f85\u6761\u4ef6: \u82e5\u5e72\u7ebf\u7a0b\u4e4b\u95f4\u5f62\u6210\u4e00\u79cd\u5934\u5c3e\u76f8\u63a5\u7684\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u5173\u7cfb\u3002</li> </ul>"},{"location":"java_multithreading_lianglianglee.html","title":"\u5e76\u53d1\u7f16\u7a0b 1, 2 (lianglianglee)","text":"<p>\u521b\u5efa\u7ebf\u7a0b\u65b9\u6cd5</p> <pre><code>public class RunnableThread implements Runnable {\npublic class ExtendsThread extends Thread {\n</code></pre> <p>Callable, \u7ebf\u7a0b\u6c60</p> <p>\u5b9e\u73b0 Runnable \u63a5\u53e3\u6bd4\u7ee7\u627f Thread \u7c7b\u5b9e\u73b0\u7ebf\u7a0b\u8981\u597d 1. \u5b9e\u73b0\u4e86 Runnable \u4e0e Thread \u7c7b\u7684\u89e3\u8026\uff0cRunnable \u91cc\u53ea\u6709\u4e00\u4e2a run() \u65b9\u6cd5\uff0c\u5b83\u5b9a\u4e49\u4e86\u9700\u8981\u6267\u884c\u7684\u5185\u5bb9\uff0cThread \u7c7b\u8d1f\u8d23\u7ebf\u7a0b\u542f\u52a8\u548c\u5c5e\u6027\u8bbe\u7f6e\u7b49\u5185\u5bb9\u3002 2. \u4f7f\u7528\u7ee7\u627f Thread \u7c7b\u65b9\u5f0f\uff0c\u6bcf\u6b21\u6267\u884c\u4e00\u6b21\u4efb\u52a1\uff0c\u90fd\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u7ebf\u7a0b\uff0c\u6267\u884c\u5b8c\u4efb\u52a1\u540e\u7ebf\u7a0b\u8d70\u5230\u751f\u547d\u5468\u671f\u7684\u5c3d\u5934\u88ab\u9500\u6bc1\uff0c\u5982\u679c\u8fd8\u60f3\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u7ee7\u627f\u4e86 Thread \u7c7b\u7684\u7c7b\u3002 \u4f7f\u7528\u5b9e\u73b0 Runnable \u63a5\u53e3\u7684\u65b9\u5f0f\uff0c\u5c31\u53ef\u4ee5\u628a\u4efb\u52a1\u76f4\u63a5\u4f20\u5165\u7ebf\u7a0b\u6c60\uff0c\u4f7f\u7528\u4e00\u4e9b\u56fa\u5b9a\u7684\u7ebf\u7a0b\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u65b0\u5efa\u9500\u6bc1\u7ebf\u7a0b\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6027\u80fd\u5f00\u9500 3. Java \u8bed\u8a00\u4e0d\u652f\u6301\u53cc\u7ee7\u627f\uff0c\u5982\u679c\u6211\u4eec\u7684\u7c7b\u4e00\u65e6\u7ee7\u627f\u4e86 Thread \u7c7b\uff0c\u90a3\u4e48\u5b83\u540e\u7eed\u5c31\u6ca1\u6709\u529e\u6cd5\u518d\u7ee7\u627f\u5176\u4ed6\u7684\u7c7b\uff0c\u9650\u5236\u53ef\u62d3\u5c55\u6027</p> <p>\u7528 interrupt\u505c\u6b62\u7ebf\u7a0b\uff1a\u8bf7\u6c42\u4e2d\u65ad\uff0c\u800c\u4e0d\u662f\u5f3a\u5236\u505c\u6b62\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6570\u636e\u9519\u4e71\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u6709\u65f6\u95f4\u7ed3\u675f\u6536\u5c3e\u5de5\u4f5c\u3002 Thread.currentThread().isInterrupted() \u5982\u679c sleep\u3001wait \u7b49\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u8fdb\u5165\u963b\u585e\u7684\u65b9\u6cd5\u4f7f\u7ebf\u7a0b\u4f11\u7720\u4e86\uff0c\u800c\u5904\u4e8e\u4f11\u7720\u4e2d\u7684\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u90a3\u4e48\u7ebf\u7a0b\u662f\u53ef\u4ee5\u611f\u53d7\u5230\u4e2d\u65ad\u4fe1\u53f7\u7684\uff0c\u5e76\u4e14\u4f1a\u629b\u51fa\u4e00\u4e2a InterruptedException \u5f02\u5e38\uff0c\u540c\u65f6\u6e05\u9664\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5c06\u4e2d\u65ad\u6807\u8bb0\u4f4d\u8bbe\u7f6e\u6210 false\u3002</p> <p>\u5df2\u7ecf\u88ab\u820d\u5f03\u7684 stop()\u3001suspend() \u548c resume()\uff0c\u5b83\u4eec\u7531\u4e8e\u6709\u5f88\u5927\u7684\u5b89\u5168\u98ce\u9669\u6bd4\u5982\u6b7b\u9501\u98ce\u9669\u800c\u88ab\u820d\u5f03\uff0c\u800c volatile \u8fd9\u79cd\u65b9\u6cd5\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u7ebf\u7a0b\u88ab\u957f\u65f6\u95f4\u963b\u585e\u7684\u60c5\u51b5\uff0c\u5c31\u65e0\u6cd5\u53ca\u65f6\u611f\u53d7\u4e2d\u65ad\uff0c\u6240\u4ee5 volatile \u662f\u4e0d\u591f\u5168\u9762\u7684\u505c\u6b62\u7ebf\u7a0b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"k8s_techworldwithnana.html","title":"Kubernetes Tutorials for Beginners (TechWorld with Nana)","text":"<ul> <li>Pod: abstraction of containers, usually 1 application per pod, each pod gets its own IP address</li> <li>Service: permanent IP address, attached to each pod, lifecycle of pod and service are not connected, communication</li> <li>Ingress: route traffic into cluster</li> </ul> <p>controlplane: </p> <ul> <li>API server: UI/API/CLI, only access to the cluster (cluster gateway, authentication)</li> <li>Controller manager: keeps track of whats happening in the cluster, detects cluster state changes</li> <li>Scheduler: ensures pods placement, decides on which node new pod should be scheduled (kubelet executes the request)</li> <li>etcd: k8s backing store, cluster changes get stored in the key value store</li> </ul> <p>virtual network: creates one unified machine</p> <p>ConfigMap: external configuration of your app (eg: db urls)</p> <p>Secret: used to store secret data, base64 encoded</p> <p>Deployment: a template for creating pods, for stateless app</p> <p>StatefulSet: for stateful apps or database</p> <p>Each configuration file has 3 parts:</p> <ol> <li>meta data</li> <li>specification</li> <li>status : automatically generated by k8s (etcd holds the current status of any k8s component)</li> </ol> <p>Kubelet: interact with both the container and node</p> <p>Kube proxy: forwards the requests</p> <p>worker nodes must install: kubelet, kube proxy, container runtime</p> <p>production cluster setup: multiple master and worker nodes separate virtual or physical machines</p> <p>minikube: master (api server) and worker processes (enable pods to run on node, create/destroy pods, services) run on one node, kubectl: cli</p> <p>service configuration file: selector: select pods to forward the requests to</p> <p>organise resources in namespaces, virtual cluster inside a cluster</p> <ul> <li>kube-system: system processes, master and kubectl processes, do not create or modify</li> <li>kube-public: publicly accessible data</li> <li>kube-node-lease: heartbeats of nodes, each node hasassociated lease object in namespace, determines availability of a node</li> <li>default: resources you create are located here</li> </ul> <p>components: cannot be created within a namesapce (vol, node)</p>"},{"location":"k8s_up%26running.html","title":"Kubernetes Up & Running","text":"<p>self-healing systems </p> <p>decoupling: easy to scale the programs</p> <ul> <li>Pods, or groups of containers, can group together container images developed by different teams into a single deployable unit. </li> <li>Kubernetes services provide load balancing, naming, and discovery to isolate one microservice from another. </li> <li>Namespaces provide isolation and access control, so that each microservice can control the degree to which other services interact with it. </li> <li>Ingress objects provide an easy-to-use frontend that can combine multiple micro\u2010 services into a single externalized API surface area.</li> </ul>"},{"location":"mysql_xiaolin.html","title":"\u884c\u7ea7\u9501","text":"<p>\u552f\u4e00\u7d22\u5f15\u7b49\u503c\u67e5\u8be2\uff1a</p> <ul> <li>\u5f53\u67e5\u8be2\u7684\u8bb0\u5f55\u662f\u300c\u5b58\u5728\u300d\u7684\uff0c\u5728\u7d22\u5f15\u6811\u4e0a\u5b9a\u4f4d\u5230\u8fd9\u4e00\u6761\u8bb0\u5f55\u540e\uff0c\u5c06\u8be5\u8bb0\u5f55\u7684\u7d22\u5f15\u4e2d\u7684 next-key lock \u4f1a\u9000\u5316\u6210\u300c\u8bb0\u5f55\u9501\u300d\u3002</li> <li>\u5f53\u67e5\u8be2\u7684\u8bb0\u5f55\u662f\u300c\u4e0d\u5b58\u5728\u300d\u7684\uff0c\u5728\u7d22\u5f15\u6811\u627e\u5230\u7b2c\u4e00\u6761\u5927\u4e8e\u8be5\u67e5\u8be2\u8bb0\u5f55\u7684\u8bb0\u5f55\u540e\uff0c\u5c06\u8be5\u8bb0\u5f55\u7684\u7d22\u5f15\u4e2d\u7684 next-key lock \u4f1a\u9000\u5316\u6210\u300c\u95f4\u9699\u9501\u300d\u3002</li> </ul> <p>\u975e\u552f\u4e00\u7d22\u5f15\u7b49\u503c\u67e5\u8be2\uff1a</p> <ul> <li>\u5f53\u67e5\u8be2\u7684\u8bb0\u5f55\u300c\u5b58\u5728\u300d\u65f6\uff0c\u7531\u4e8e\u4e0d\u662f\u552f\u4e00\u7d22\u5f15\uff0c\u6240\u4ee5\u80af\u5b9a\u5b58\u5728\u7d22\u5f15\u503c\u76f8\u540c\u7684\u8bb0\u5f55\uff0c\u4e8e\u662f\u975e\u552f\u4e00\u7d22\u5f15\u7b49\u503c\u67e5\u8be2\u7684\u8fc7\u7a0b\u662f\u4e00\u4e2a\u626b\u63cf\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u626b\u63cf\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u4e8c\u7ea7\u7d22\u5f15\u8bb0\u5f55\u5c31\u505c\u6b62\u626b\u63cf\uff0c\u7136\u540e\u5728\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u626b\u63cf\u5230\u7684\u4e8c\u7ea7\u7d22\u5f15\u8bb0\u5f55\u52a0\u7684\u662f next-key \u9501\uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u4e8c\u7ea7\u7d22\u5f15\u8bb0\u5f55\uff0c\u8be5\u4e8c\u7ea7\u7d22\u5f15\u7684 next-key \u9501\u4f1a\u9000\u5316\u6210\u95f4\u9699\u9501\u3002\u540c\u65f6\uff0c\u5728\u7b26\u5408\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\u7684\u4e3b\u952e\u7d22\u5f15\u4e0a\u52a0\u8bb0\u5f55\u9501\u3002</li> <li>\u5f53\u67e5\u8be2\u7684\u8bb0\u5f55\u300c\u4e0d\u5b58\u5728\u300d\u65f6\uff0c\u626b\u63cf\u5230\u7b2c\u4e00\u6761\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u4e8c\u7ea7\u7d22\u5f15\u8bb0\u5f55\uff0c\u8be5\u4e8c\u7ea7\u7d22\u5f15\u7684 next-key \u9501\u4f1a\u9000\u5316\u6210\u95f4\u9699\u9501\u3002\u56e0\u4e3a\u4e0d\u5b58\u5728\u6ee1\u8db3\u67e5\u8be2\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf9\u4e3b\u952e\u7d22\u5f15\u52a0\u9501\u3002</li> </ul> <p>\u975e\u552f\u4e00\u7d22\u5f15\u548c\u4e3b\u952e\u7d22\u5f15\u7684\u8303\u56f4\u67e5\u8be2\u7684\u52a0\u9501\u89c4\u5219\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff1a</p> <p>\u552f\u4e00\u7d22\u5f15\u5728\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u7d22\u5f15\u7684 next-key lock \u9000\u5316\u4e3a\u95f4\u9699\u9501\u6216\u8005\u8bb0\u5f55\u9501\u3002 \u975e\u552f\u4e00\u7d22\u5f15\u8303\u56f4\u67e5\u8be2\uff0c\u7d22\u5f15\u7684 next-key lock \u4e0d\u4f1a\u9000\u5316\u4e3a\u95f4\u9699\u9501\u548c\u8bb0\u5f55\u9501\u3002</p>"},{"location":"mysql_xiaolin.html#_2","title":"\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b","text":"<p>\u9488\u5bf9\u5feb\u7167\u8bfb\uff08\u666e\u901a select \u8bed\u53e5\uff09\uff0c\u662f\u901a\u8fc7 MVCC \u65b9\u5f0f\u89e3\u51b3\u4e86\u5e7b\u8bfb\uff0c\u56e0\u4e3a\u53ef\u91cd\u590d\u8bfb\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e8b\u52a1\u6267\u884c\u8fc7\u7a0b\u4e2d\u770b\u5230\u7684\u6570\u636e\uff0c\u4e00\u76f4\u8ddf\u8fd9\u4e2a\u4e8b\u52a1\u542f\u52a8\u65f6\u770b\u5230\u7684\u6570\u636e\u662f\u4e00\u81f4\u7684\uff0c\u5373\u4f7f\u4e2d\u9014\u6709\u5176\u4ed6\u4e8b\u52a1\u63d2\u5165\u4e86\u4e00\u6761\u6570\u636e\uff0c\u662f\u67e5\u8be2\u4e0d\u51fa\u6765\u8fd9\u6761\u6570\u636e\u7684\uff0c\u6240\u4ee5\u5c31\u5f88\u597d\u4e86\u907f\u514d\u5e7b\u8bfb\u95ee\u9898\u3002</p> <p>\u9488\u5bf9\u5f53\u524d\u8bfb\uff08select ... for update \u7b49\u8bed\u53e5\uff09\uff0c\u662f\u901a\u8fc7 next-key lock\uff08\u8bb0\u5f55\u9501+\u95f4\u9699\u9501\uff09\u65b9\u5f0f\u89e3\u51b3\u4e86\u5e7b\u8bfb\uff0c\u56e0\u4e3a\u5f53\u6267\u884c select ... for update \u8bed\u53e5\u7684\u65f6\u5019\uff0c\u4f1a\u52a0\u4e0a next-key lock\uff0c\u5982\u679c\u6709\u5176\u4ed6\u4e8b\u52a1\u5728 next-key lock \u9501\u8303\u56f4\u5185\u63d2\u5165\u4e86\u4e00\u6761\u8bb0\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u63d2\u5165\u8bed\u53e5\u5c31\u4f1a\u88ab\u963b\u585e\uff0c\u65e0\u6cd5\u6210\u529f\u63d2\u5165\uff0c\u6240\u4ee5\u5c31\u5f88\u597d\u4e86\u907f\u514d\u5e7b\u8bfb\u95ee\u9898\u3002</p> <p>\u5bf9\u4e8e\u300c\u8bfb\u63d0\u4ea4\u300d\u548c\u300c\u53ef\u91cd\u590d\u8bfb\u300d\u9694\u79bb\u7ea7\u522b\u7684\u4e8b\u52a1\u6765\u8bf4\uff0c\u5b83\u4eec\u662f\u901a\u8fc7 Read View \u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5728\u4e8e\u521b\u5efa Read View \u7684\u65f6\u673a\u4e0d\u540c\uff1a</p> <ul> <li> <p>\u300c\u8bfb\u63d0\u4ea4\u300d\u9694\u79bb\u7ea7\u522b\u662f\u5728\u6bcf\u4e2a select \u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684 Read View\uff0c\u4e5f\u610f\u5473\u7740\uff0c\u4e8b\u52a1\u671f\u95f4\u7684\u591a\u6b21\u8bfb\u53d6\u540c\u4e00\u6761\u6570\u636e\uff0c\u524d\u540e\u4e24\u6b21\u8bfb\u7684\u6570\u636e\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u4e00\u81f4\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fd9\u671f\u95f4\u53e6\u5916\u4e00\u4e2a\u4e8b\u52a1\u4fee\u6539\u4e86\u8be5\u8bb0\u5f55\uff0c\u5e76\u63d0\u4ea4\u4e86\u4e8b\u52a1\u3002</p> </li> <li> <p>\u300c\u53ef\u91cd\u590d\u8bfb\u300d\u9694\u79bb\u7ea7\u522b\u662f\u542f\u52a8\u4e8b\u52a1\u65f6\u751f\u6210\u4e00\u4e2a Read View\uff0c\u7136\u540e\u6574\u4e2a\u4e8b\u52a1\u671f\u95f4\u90fd\u5728\u7528\u8fd9\u4e2a Read View\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u5728\u4e8b\u52a1\u671f\u95f4\u8bfb\u5230\u7684\u6570\u636e\u90fd\u662f\u4e8b\u52a1\u542f\u52a8\u524d\u7684\u8bb0\u5f55\u3002</p> </li> <li> <p>\u8fd9\u4e24\u4e2a\u9694\u79bb\u7ea7\u522b\u5b9e\u73b0\u662f\u901a\u8fc7\u300c\u4e8b\u52a1\u7684 Read View \u91cc\u7684\u5b57\u6bb5\u300d\u548c\u300c\u8bb0\u5f55\u4e2d\u7684\u4e24\u4e2a\u9690\u85cf\u5217\u300d\u7684\u6bd4\u5bf9\uff0c\u6765\u63a7\u5236\u5e76\u53d1\u4e8b\u52a1\u8bbf\u95ee\u540c\u4e00\u4e2a\u8bb0\u5f55\u65f6\u7684\u884c\u4e3a\uff0c\u8fd9\u5c31\u53eb MVCC\uff08\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\uff09\u3002</p> </li> </ul>"},{"location":"mysql_xiaolin.html#_3","title":"\u65e5\u5fd7","text":"<ul> <li>undo log\uff08\u56de\u6eda\u65e5\u5fd7\uff09\uff1a\u662f Innodb \u5b58\u50a8\u5f15\u64ce\u5c42\u751f\u6210\u7684\u65e5\u5fd7\uff0c\u5b9e\u73b0\u4e86\u4e8b\u52a1\u4e2d\u7684\u539f\u5b50\u6027\uff0c\u4e3b\u8981\u7528\u4e8e\u4e8b\u52a1\u56de\u6eda\u548c MVCC\u3002</li> <li>redo log\uff08\u91cd\u505a\u65e5\u5fd7\uff09\uff1a\u662f Innodb \u5b58\u50a8\u5f15\u64ce\u5c42\u751f\u6210\u7684\u65e5\u5fd7\uff0c\u5b9e\u73b0\u4e86\u4e8b\u52a1\u4e2d\u7684\u6301\u4e45\u6027\uff0c\u4e3b\u8981\u7528\u4e8e\u6389\u7535\u7b49\u6545\u969c\u6062\u590d\uff1b(\u968f\u673a\u5199-&gt;\u987a\u5e8f\u5199) \uff08\u5faa\u73af\u5199\uff09</li> <li>binlog \uff08\u5f52\u6863\u65e5\u5fd7\uff09\uff1a\u662f Server \u5c42\u751f\u6210\u7684\u65e5\u5fd7\uff0c\u4e3b\u8981\u7528\u4e8e\u6570\u636e\u5907\u4efd\u548c\u4e3b\u4ece\u590d\u5236\uff1b\uff08statement, bin, mixed\uff09(\u8ffd\u52a0\u5199)</li> </ul> <p>MySQL \u96c6\u7fa4\u7684\u4e3b\u4ece\u590d\u5236\u8fc7\u7a0b\u68b3\u7406\u6210 3 \u4e2a\u9636\u6bb5\uff1a</p> <ul> <li>\u5199\u5165 Binlog\uff1a\u4e3b\u5e93\u5199 binlog \u65e5\u5fd7\uff0c\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5e76\u66f4\u65b0\u672c\u5730\u5b58\u50a8\u6570\u636e\u3002</li> <li>\u540c\u6b65 Binlog\uff1a\u628a binlog \u590d\u5236\u5230\u6240\u6709\u4ece\u5e93\u4e0a\uff0c\u6bcf\u4e2a\u4ece\u5e93\u628a binlog \u5199\u5230\u6682\u5b58\u65e5\u5fd7\u4e2d\u3002</li> <li>\u56de\u653e Binlog\uff1a\u56de\u653e binlog\uff0c\u5e76\u66f4\u65b0\u5b58\u50a8\u5f15\u64ce\u4e2d\u7684\u6570\u636e\u3002</li> </ul> <p>\u4e24\u9636\u6bb5\u63d0\u4ea4  prepare \u9636\u6bb5\uff1a\u5c06 XID\uff08\u5185\u90e8 XA \u4e8b\u52a1\u7684 ID\uff09 \u5199\u5165\u5230 redo log\uff0c\u540c\u65f6\u5c06 redo log \u5bf9\u5e94\u7684\u4e8b\u52a1\u72b6\u6001\u8bbe\u7f6e\u4e3a prepare\uff0c\u7136\u540e\u5c06 redo log \u6301\u4e45\u5316\u5230\u78c1\u76d8\uff08innodb_flush_log_at_trx_commit = 1 \u7684\u4f5c\u7528\uff09\uff1b</p> <p>commit \u9636\u6bb5\uff1a\u628a XID \u5199\u5165\u5230 binlog\uff0c\u7136\u540e\u5c06 binlog \u6301\u4e45\u5316\u5230\u78c1\u76d8\uff08sync_binlog = 1 \u7684\u4f5c\u7528\uff09\uff0c\u63a5\u7740\u8c03\u7528\u5f15\u64ce\u7684\u63d0\u4ea4\u4e8b\u52a1\u63a5\u53e3\uff0c\u5c06 redo log \u72b6\u6001\u8bbe\u7f6e\u4e3a commit\uff0c\u6b64\u65f6\u8be5\u72b6\u6001\u5e76\u4e0d\u9700\u8981\u6301\u4e45\u5316\u5230\u78c1\u76d8\uff0c\u53ea\u9700\u8981 write \u5230\u6587\u4ef6\u7cfb\u7edf\u7684 page cache \u4e2d\u5c31\u591f\u4e86\uff0c\u56e0\u4e3a\u53ea\u8981 binlog \u5199\u78c1\u76d8\u6210\u529f\uff0c\u5c31\u7b97 redo log \u7684\u72b6\u6001\u8fd8\u662f prepare \u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u4e00\u6837\u4f1a\u88ab\u8ba4\u4e3a\u4e8b\u52a1\u5df2\u7ecf\u6267\u884c\u6210\u529f\uff1b</p> <p>\u5177\u4f53\u66f4\u65b0\u4e00\u6761\u8bb0\u5f55 UPDATE t_user SET name = 'xiaolin' WHERE id = 1; \u7684\u6d41\u7a0b\u5982\u4e0b:</p> <ul> <li>\u6267\u884c\u5668\u8d1f\u8d23\u5177\u4f53\u6267\u884c\uff0c\u4f1a\u8c03\u7528\u5b58\u50a8\u5f15\u64ce\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u4e3b\u952e\u7d22\u5f15\u6811\u641c\u7d22\u83b7\u53d6 id = 1 \u8fd9\u4e00\u884c\u8bb0\u5f55\uff1a<ul> <li>\u5982\u679c id=1 \u8fd9\u4e00\u884c\u6240\u5728\u7684\u6570\u636e\u9875\u672c\u6765\u5c31\u5728 buffer pool \u4e2d\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u7ed9\u6267\u884c\u5668\u66f4\u65b0\uff1b</li> <li>\u5982\u679c\u8bb0\u5f55\u4e0d\u5728 buffer pool\uff0c\u5c06\u6570\u636e\u9875\u4ece\u78c1\u76d8\u8bfb\u5165\u5230 buffer pool\uff0c\u8fd4\u56de\u8bb0\u5f55\u7ed9\u6267\u884c\u5668\u3002</li> </ul> </li> <li>\u6267\u884c\u5668\u5f97\u5230\u805a\u7c07\u7d22\u5f15\u8bb0\u5f55\u540e\uff0c\u4f1a\u770b\u4e00\u4e0b\u66f4\u65b0\u524d\u7684\u8bb0\u5f55\u548c\u66f4\u65b0\u540e\u7684\u8bb0\u5f55\u662f\u5426\u4e00\u6837\uff1a<ul> <li>\u5982\u679c\u4e00\u6837\u7684\u8bdd\u5c31\u4e0d\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\u6d41\u7a0b\uff1b</li> <li>\u5982\u679c\u4e0d\u4e00\u6837\u7684\u8bdd\u5c31\u628a\u66f4\u65b0\u524d\u7684\u8bb0\u5f55\u548c\u66f4\u65b0\u540e\u7684\u8bb0\u5f55\u90fd\u5f53\u4f5c\u53c2\u6570\u4f20\u7ed9 InnoDB \u5c42\uff0c\u8ba9 InnoDB \u771f\u6b63\u7684\u6267\u884c\u66f4\u65b0\u8bb0\u5f55\u7684\u64cd\u4f5c\uff1b</li> </ul> </li> <li>\u5f00\u542f\u4e8b\u52a1\uff0c InnoDB \u5c42\u66f4\u65b0\u8bb0\u5f55\u524d\uff0c\u9996\u5148\u8981\u8bb0\u5f55\u76f8\u5e94\u7684 undo log\uff0c\u56e0\u4e3a\u8fd9\u662f\u66f4\u65b0\u64cd\u4f5c\uff0c\u9700\u8981\u628a\u88ab\u66f4\u65b0\u7684\u5217\u7684\u65e7\u503c\u8bb0\u4e0b\u6765\uff0c\u4e5f\u5c31\u662f\u8981\u751f\u6210\u4e00\u6761 undo log\uff0cundo log \u4f1a\u5199\u5165 Buffer Pool \u4e2d\u7684 Undo \u9875\u9762\uff0c\u4e0d\u8fc7\u5728\u5185\u5b58\u4fee\u6539\u8be5 Undo \u9875\u9762\u540e\uff0c\u9700\u8981\u8bb0\u5f55\u5bf9\u5e94\u7684 redo log\u3002</li> <li>InnoDB \u5c42\u5f00\u59cb\u66f4\u65b0\u8bb0\u5f55\uff0c\u4f1a\u5148\u66f4\u65b0\u5185\u5b58\uff08\u540c\u65f6\u6807\u8bb0\u4e3a\u810f\u9875\uff09\uff0c\u7136\u540e\u5c06\u8bb0\u5f55\u5199\u5230 redo log \u91cc\u9762\uff0c\u8fd9\u4e2a\u65f6\u5019\u66f4\u65b0\u5c31\u7b97\u5b8c\u6210\u4e86\u3002\u4e3a\u4e86\u51cf\u5c11\u78c1\u76d8I/O\uff0c\u4e0d\u4f1a\u7acb\u5373\u5c06\u810f\u9875\u5199\u5165\u78c1\u76d8\uff0c\u540e\u7eed\u7531\u540e\u53f0\u7ebf\u7a0b\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u65f6\u673a\u5c06\u810f\u9875\u5199\u5165\u5230\u78c1\u76d8\u3002\u8fd9\u5c31\u662f WAL \u6280\u672f\uff0cMySQL \u7684\u5199\u64cd\u4f5c\u5e76\u4e0d\u662f\u7acb\u523b\u5199\u5230\u78c1\u76d8\u4e0a\uff0c\u800c\u662f\u5148\u5199 redo \u65e5\u5fd7\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u65f6\u95f4\u518d\u5c06\u4fee\u6539\u7684\u884c\u6570\u636e\u5199\u5230\u78c1\u76d8\u4e0a\u3002</li> <li>\u81f3\u6b64\uff0c\u4e00\u6761\u8bb0\u5f55\u66f4\u65b0\u5b8c\u4e86\u3002</li> <li>\u5728\u4e00\u6761\u66f4\u65b0\u8bed\u53e5\u6267\u884c\u5b8c\u6210\u540e\uff0c\u7136\u540e\u5f00\u59cb\u8bb0\u5f55\u8be5\u8bed\u53e5\u5bf9\u5e94\u7684 binlog\uff0c\u6b64\u65f6\u8bb0\u5f55\u7684 binlog \u4f1a\u88ab\u4fdd\u5b58\u5230 binlog cache\uff0c\u5e76\u6ca1\u6709\u5237\u65b0\u5230\u786c\u76d8\u4e0a\u7684 binlog \u6587\u4ef6\uff0c\u5728\u4e8b\u52a1\u63d0\u4ea4\u65f6\u624d\u4f1a\u7edf\u4e00\u5c06\u8be5\u4e8b\u52a1\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709 binlog \u5237\u65b0\u5230\u786c\u76d8\u3002</li> <li>\u4e8b\u52a1\u63d0\u4ea4\uff08\u4e3a\u4e86\u65b9\u4fbf\u8bf4\u660e\uff0c\u8fd9\u91cc\u4e0d\u8bf4\u7ec4\u63d0\u4ea4\u7684\u8fc7\u7a0b\uff0c\u53ea\u8bf4\u4e24\u9636\u6bb5\u63d0\u4ea4\uff09\uff1a<ul> <li>prepare \u9636\u6bb5\uff1a\u5c06 redo log \u5bf9\u5e94\u7684\u4e8b\u52a1\u72b6\u6001\u8bbe\u7f6e\u4e3a prepare\uff0c\u7136\u540e\u5c06 redo log \u5237\u65b0\u5230\u786c\u76d8\uff1b</li> <li>commit \u9636\u6bb5\uff1a\u5c06 binlog \u5237\u65b0\u5230\u78c1\u76d8\uff0c\u63a5\u7740\u8c03\u7528\u5f15\u64ce\u7684\u63d0\u4ea4\u4e8b\u52a1\u63a5\u53e3\uff0c\u5c06 redo log \u72b6\u6001\u8bbe\u7f6e\u4e3a commit\uff08\u5c06\u4e8b\u52a1\u8bbe\u7f6e\u4e3a commit \u72b6\u6001\u540e\uff0c\u5237\u5165\u5230\u78c1\u76d8 redo log \u6587\u4ef6\uff09\uff1b \u81f3\u6b64\uff0c\u4e00\u6761\u66f4\u65b0\u8bed\u53e5\u6267\u884c\u5b8c\u6210</li> </ul> </li> </ul>"},{"location":"mysql_xiaolin.html#_4","title":"\u7d22\u5f15","text":"<ul> <li>\u6309\u300c\u6570\u636e\u7ed3\u6784\u300d\u5206\u7c7b\uff1aB+tree\u7d22\u5f15\u3001Hash\u7d22\u5f15\u3001Full-text\u7d22\u5f15\u3002</li> <li>\u6309\u300c\u7269\u7406\u5b58\u50a8\u300d\u5206\u7c7b\uff1a\u805a\u7c07\u7d22\u5f15\uff08\u4e3b\u952e\u7d22\u5f15\uff09\u3001\u4e8c\u7ea7\u7d22\u5f15\uff08\u8f85\u52a9\u7d22\u5f15\uff09\u3002</li> <li>\u6309\u300c\u5b57\u6bb5\u7279\u6027\u300d\u5206\u7c7b\uff1a\u4e3b\u952e\u7d22\u5f15\u3001\u552f\u4e00\u7d22\u5f15\u3001\u666e\u901a\u7d22\u5f15\u3001\u524d\u7f00\u7d22\u5f15\u3002</li> <li>\u6309\u300c\u5b57\u6bb5\u4e2a\u6570\u300d\u5206\u7c7b\uff1a\u5355\u5217\u7d22\u5f15\u3001\u8054\u5408\u7d22\u5f15\u3002</li> </ul>"},{"location":"psychology_freud.html","title":"Sigmund Freud","text":"<p>Penis Envy</p> <p>Electra Complex</p> <p>Unconcious Motivation: unconscious reasons for feelings and actions</p> <p>Unconcious Dynamics: conflict between different systems in the brain leading to dreams, speech erros, jokes, etc.</p> <ul> <li>Id: present at birth, instinctual, animalistic, does not distingush fantasy from reality, operates according to the Pleasure Principle</li> <li>Ego: develops out of the id in infancy, understands reality and logic, mediator between id and superego</li> <li>Superego: internalizatin of society's moral standards responsible for guilt</li> </ul> <p>Psychosexual Stages Freud's stages of personality development associated with erogenous zones:</p> <ul> <li>Oral (birth - 1 year)</li> <li>Anal (1 - 3 years)</li> <li>Phallic (3 - 5 years)</li> <li>Latency (5 years - puberty)</li> <li>Genital (puberty)</li> </ul> <p>Fixation: an attempt to achieve pleasure as an adult in ways that are equivalent to how it was achieved in these stages</p> <p>Oedipus Complex: a desire for sexual involvement with the parent of the opposite sex and a concomitant sense of rivalry with the parent of the same sex</p> <p>Defense Mechanism Displacement: redirect energy and focus to more appropriate targets</p>"},{"location":"psychology_history_of_psychology.html","title":"History of Psychology","text":""},{"location":"psychology_history_of_psychology.html#history-of-psychology","title":"History of Psychology","text":"<p>Getting a history of the fields helps to make sense of where we are and how we got there.</p>"},{"location":"psychology_history_of_psychology.html#prehistory-of-psychology","title":"Prehistory of Psychology","text":"<p>Empiricism: all knowledge comes from experience</p>"},{"location":"psychology_history_of_psychology.html#physiology-and-psychophysics","title":"Physiology and Psychophysics","text":"<p>Even though the human senses were fallible, the mind could be measured using the methods of science</p> <p>Physical reality and psychological reality are not identical</p> <p>Introspection: detailed self-reports of their reactiosn to various  \u2192 identify the elements of consciousness</p> <p>the mind could be measured and the nature of consciousness could be revealed through scientific means</p>"},{"location":"psychology_history_of_psychology.html#scientific-psychology","title":"Scientific Psychology","text":"<p>Structuralism: structuralists were interested in the contents of the mind\u2014what the mind is. </p>"},{"location":"psychology_history_of_psychology.html#functional-psychology","title":"Functional Psychology","text":"<p>Functionalism: interested in the activities of the mind\u2014what the mind does</p> <p>Consciousness is ongoing and continuous; it cannot be isolated and reduced to elements.  Consciousness helped us adapt to our environment in such ways as allowing us to make choices and have personal responsibility over those choices.</p> <p>Assessment of individual differences: mental abilities such as intelligence were inherited and could be measured using mental tests</p> <p>Eugenics: the promotion of selective breeding society was better served by identifying those with superior intelligence and supported efforts to encourage them to reproduce</p>"},{"location":"psychology_history_of_psychology.html#the-growth-of-psychology","title":"The Growth of Psychology","text":"<p>Gestalt: studying the whole of any experience was richer than studyingg individual aspects of that experience \u2192 precursor to teh rise of cognitive psychology</p> <p>Behaviorism: reject any reference to mind and view overt and observable hebavior as the proper subject matter of psychology</p> <p>Through the scientific study of behavior, it was hoped that laws of learning could be derived that would promote the prediction and control of behavior.</p> <p>Conditioned learning, popularly referred to as classical conditioning, provided support for the notion that learning and behavior were controlled by events in the environment and could be explained with no reference to mind or consciousness </p> <p>Cognitive Psychology: constructive mind, recognizing that people use their past experiences to construct frameworks in which to understand new experiences.</p> <p>Flashbulb memory:  a highly vivid and detailed 'snapshot' of a moment in which a consequential, surprising, and emotionally arousing piece of news was learned.</p> <p>Tip-of-the-tongue phenomenon: a state in which one cannot quite recall a familiar word but can recall words of similar form and meaning.</p> <p>Working memory: a cognitive system with a limited capacity that can hold information temporarily (7 \u00b1 2 bits)</p>"},{"location":"psychology_history_of_psychology.html#applied-psychology-in-america","title":"Applied Psychology in America","text":"<p>mental testing:  nature-nurture debate that raises questions about the relative contributions of heredity and environment in determining intelligence</p>"},{"location":"psychology_history_of_psychology.html#psychology-as-a-profession","title":"Psychology as a Profession","text":"<p>Scientist-practitioner model</p> <p>Scholar-practitioner model</p>"},{"location":"psychology_research_design.html","title":"Research Designs","text":"<p>Research Designs</p> <p>Random assignment</p> <p>Confounds: factors that undermine the ability to draw causal inferences from an experiment.</p> <ul> <li>Placebo effect (When receiving special treatment or something new affects human behavior.)</li> <li>Participant demand. This occurs when participants try to behave in a way they think the experimenter wants them to behave.</li> <li>Experimenter expectations can influence the outcome of a study</li> </ul> <p>In a double-blind procedure, neither the participant nor the experimenter knows which condition the participant is in.</p>"},{"location":"psychology_research_design.html#correlational-designs","title":"Correlational designs","text":"<p>allow us to study topics we can\u2019t experimentally manipulate</p>"},{"location":"psychology_research_design.html#qualitative-designs","title":"Qualitative designs","text":"<ul> <li>Participants' observation</li> <li>Case study (limited number of possible participants)</li> <li>Narrative analysis (the study of stories and personal accounts of people, groups, or cultures)</li> </ul>"},{"location":"psychology_research_design.html#quasi-experimental-designs","title":"Quasi-Experimental designs","text":"<p>rely on existing group memberships (independent variables)</p>"},{"location":"psychology_research_design.html#longitudinal-studies","title":"Longitudinal studies","text":"<p>track the same people over time. </p>"},{"location":"psychology_the_brain.html","title":"The Brain","text":"<p>The Astonishing Hypothesis is that You, your joys and your sorrows, your memories and your ambitions, your sense of personal identity and free will, are in fact no more than the behavior of a vast assembly of nerve cells and their associated molecules.</p> <p>Materialism: brain = mind</p> <p>Duralism: We possess two sorts of things. We are composed of two sorts of things. We are in part material, but we're also in part spiritual, separate, mental, psychological.</p> <ul> <li>The creativity and spontaneity of human action</li> <li>\"I think therefore I am\", we don't feel like bodies.</li> </ul> <p>Dualism seems right</p> <ul> <li>Intelligent begins without bodies</li> <li>The survival of the self after the destruction of the body</li> </ul> <p>Dualism is wrong?</p> <ul> <li>Dualism does not answer important questions</li> <li>We now have better understanding of what physical things can do </li> <li>Strong evidence for the role of the brain</li> </ul> <p>Neurons </p> <ul> <li>sensory neurons</li> <li>motor neurons</li> <li>interneurons</li> </ul> <p>code for intensity:</p> <ul> <li>number of neurons firing</li> <li>frequency of neurons firing</li> </ul> <p>excitatory (agonists) / inhibitory (antagonists)</p> <p>clusters/networks (computational devices)</p> <ul> <li>The brain is highly resistant to damage</li> <li>The brain is extremely fast</li> <li>The brain works through massively parallel processing</li> </ul> <p>sensory information is sent to opposite hemisphere corssing over in pathwasy leading to cortex</p> <p>Corpus callosum: Major pathway between sides</p> <p>The brain stem is sometimes referred to as the \u201ctrunk\u201d of the brain. It is responsible for many of the neural functions that keep us alive, including regulating our respiration (breathing), heart rate, and digestion.</p> <p>The cerebellum is critical for coordinated movement and posture.</p> <p>The two cerebral hemispheres can be further subdivided into four lobes: the occipital, temporal, parietal, and frontal lobes. </p> <ul> <li> <p>The occipital lobe is responsible for vision, as is much of the temporal lobe. </p> </li> <li> <p>The temporal lobe is also involved in auditory processing, memory, and multisensory integration (e.g., the convergence of vision and audition). </p> </li> <li> <p>The parietal lobe houses the somatosensory (body sensations) cortex and structures involved in visual attention, as well as multisensory convergence zones.</p> </li> <li> <p>The frontal lobe houses the motor cortex and structures involved in motor planning, language, judgment, and decision-making. </p> </li> </ul> <p>The  cerebral hemispheres contain both grey and white matter</p> <ul> <li> <p>The gray matter is composed of the neuronal cell bodies (see module, \u201cNeurons\u201d). The cell bodies (or soma) contain the genes of the cell and are responsible for metabolism (keeping the cell alive) and synthesizing proteins. </p> </li> <li> <p>The white matter is composed of the axons of the neurons, and, in particular, axons that are covered with a sheath of myelin (fatty support cells that are whitish in color). Axons conduct the electrical signals from the cell and are, therefore, critical to cell communication.</p> </li> </ul>"},{"location":"spring%26springboot_annotation_javaguide.html","title":"Spring & SpringBoot Annotation (Java Guide)","text":"<p>@SpringBootApplication\u770b\u4f5c\u662f @Configuration\u3001@EnableAutoConfiguration\u3001@ComponentScan \u6ce8\u89e3\u7684\u96c6\u5408\u3002</p>"},{"location":"spring1.html","title":"Spring5 \u6846\u67b6, \u8981\u70b9, IOC (pdai)","text":""},{"location":"spring1.html#spring","title":"Spring","text":"<p>ORM/DAO -&gt; POJO (IOC\u5bb9\u5668) -&gt; Service -&gt; Controller    - \u975e\u4fb5\u5165\u5f0f\uff1a\u57fa\u4e8eSpring\u5f00\u53d1\u7684\u5e94\u7528\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eSpring\u7684API     - \u63a7\u5236\u53cd\u8f6c\uff1aIOC\u2014\u2014Inversion of Control\uff0c\u6307\u7684\u662f\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u6743\u4ea4\u7ed9 Spring \u53bb\u521b\u5efa\u3002\u4f7f\u7528 Spring\u4e4b\u524d\uff0c\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7531\u6211\u4eec\u81ea\u5df1\u5728\u4ee3\u7801\u4e2dnew\u521b\u5efa\u3002\u800c\u4f7f\u7528 Spring \u4e4b\u540e\u3002\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u662f\u7ed9\u4e86 Spring \u6846\u67b6\u3002    - \u4f9d\u8d56\u6ce8\u5165\uff1aDI\u2014\u2014Dependency Injection\uff0c\u662f\u6307\u4f9d\u8d56\u7684\u5bf9\u8c61\u4e0d\u9700\u8981\u624b\u52a8\u8c03\u7528 setXX \u65b9\u6cd5\u53bb\u8bbe\u7f6e\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u8d4b\u503c\u3002    - \u9762\u5411\u5207\u9762\u7f16\u7a0b\uff1aAspect Oriented Programming\u2014\u2014AOP\u5bb9\u5668\uff1aSpring\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5e76\u4e14\u7ba1\u7406\u5e94\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ec4\u4ef6\u5316\uff1aSpring \u5b9e\u73b0\u4e86\u4f7f\u7528\u7b80\u5355\u7684\u7ec4\u4ef6\u914d\u7f6e\u7ec4\u5408\u6210\u4e00\u4e2a\u590d\u6742\u7684\u5e94\u7528\u3002\u5728 Spring\u4e2d\u53ef\u4ee5\u4f7f\u7528XML\u548cJava\u6ce8\u89e3\u7ec4\u5408\u8fd9\u4e9b\u5bf9\u8c61\u3002     - \u4e00\u7ad9\u5f0f\uff1a\u5728 IOC \u548c AOP\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u6574\u5408\u5404\u79cd\u4f01\u4e1a\u5e94\u7528\u7684\u5f00\u6e90\u6846\u67b6\u548c\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u7c7b\u5e93\uff08\u5b9e\u9645\u4e0a Spring \u81ea\u8eab\u4e5f\u63d0\u4f9b\u4e86\u8868\u73b0\u5c42\u7684 SpringMVC \u548c\u6301\u4e45\u5c42\u7684    Spring JDBC\uff09</p> <p>Core Container: beans, core, context (Application Context), SpEL Data Access/Integration: JDBC/ORM (Object Relational Mapping)/OXM (Object/XML)/JMS (\u670d\u52a1\u6d88\u606f)/Transaction Web: web, servlet, websocket, webflux (\u5b8c\u5168\u5f02\u6b65\u4e14\u975e\u963b\u585e), Portlet AOP, Aspects, Instrumentation (\u7c7b\u5de5\u5177\u7684\u652f\u6301\u548c\u7c7b\u52a0\u8f7d\u5668\u7684\u5b9e\u73b0), Messaging, JCL (\u65e5\u5fd7\u6846\u67b6\u96c6\u6210\u7684\u6a21\u5757) Test: Junit, TestNG</p> <pre><code> /**\n* aspect for every methods under service package.\n*/\n@Around(\"execution(* tech.pdai.springframework.service.*.*(..))\")\npublic Object businessService(ProceedingJoinPoint pjp) throws Throwable {\n    // get attribute through annotation\n    Method method = ((MethodSignature) pjp.getSignature()).getMethod();\n    System.out.println(\"execute method: \" + method.getName());\n\n    // continue to process\n    return pjp.proceed();\n}\n</code></pre> <p>@Configuration: These classes consist principally of @Bean-annotated methods that define instantiation, configuration, and initialization logic for objects that are managed by the Spring IoC container.</p> <pre><code>@Configuration\npublic class AppConfig {\n\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n</code></pre> <p>@Service annotates classes at the service layer.  \u5b83\u5c06\u6839\u636e\u7528\u6237\u8bf7\u6c42\u8bf7\u6c42@Repository</p> <p>@Repository annotates classes at the persistence layer, which will act as a database repository</p> <p>IOC: \u7528\u6237\u7ba1\u7406Bean\u8f6c\u53d8\u4e3a\u6846\u67b6\u7ba1\u7406Bean DI: \u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4eceIoc Container\u4e2d\u83b7\u53d6\u4f9d\u8d56\u7684Bean\uff0c\u6ce8\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d IOC Config\uff1aXML, \u6ce8\u89e3\uff0c Java \u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff1a\u6784\u9020\u65b9\u6cd5\u6ce8\u5165\uff08Construct\u6ce8\u5165\uff09\uff0csetter\u6ce8\u5165\uff0c\u57fa\u4e8e\u6ce8\u89e3\u7684\u6ce8\u5165\uff08\u63a5\u53e3\u6ce8\u5165\uff09 @Autowired\uff08\u81ea\u52a8\u6ce8\u5165\uff09\uff1aConstructor\uff0cbyType\uff0cbyName \u6784\u9020\u5668\u6ce8\u5165\u7684\u65b9\u5f0f\u80fd\u591f\u4fdd\u8bc1\u6ce8\u5165\u7684\u7ec4\u4ef6\u4e0d\u53ef\u53d8\uff0c\u5e76\u4e14\u786e\u4fdd\u9700\u8981\u7684\u4f9d\u8d56\u4e0d\u4e3a\u7a7a @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.PARAMETER) #\u65b9\u6cd5\u53c2\u6570 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.ANNOTATION_TYPE) #\u6ce8\u89e3</p> <p>@Resource @Target(ElementType.TYPE) #\u63a5\u53e3\u3001\u7c7b\u3001\u679a\u4e3e\u3001\u6ce8\u89e3 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf @Target(ElementType.METHOD) #\u65b9\u6cd5</p> <p>@Inject @Target(ElementType.CONSTRUCTOR) #\u6784\u9020\u51fd\u6570 @Target(ElementType.METHOD) #\u65b9\u6cd5 @Target(ElementType.FIELD) #\u5b57\u6bb5\u3001\u679a\u4e3e\u7684\u5e38\u91cf</p> <ul> <li>@Autowired\u3001@Inject\u7528\u6cd5\u57fa\u672c\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f@Inject\u6ca1\u6709required\u5c5e\u6027</li> <li>@Autowired\u3001@Inject\u662f\u9ed8\u8ba4\u6309\u7167\u7c7b\u578b\u5339\u914d\u7684\uff0c@Resource\u662f\u6309\u7167\u540d\u79f0\u5339\u914d\u7684</li> <li>@Autowired\u5982\u679c\u9700\u8981\u6309\u7167\u540d\u79f0\u5339\u914d\u9700\u8981\u548c@Qualifier\u4e00\u8d77\u4f7f\u7528\uff0c@Inject\u548c@Named\u4e00\u8d77\u4f7f\u7528\uff0c@Resource\u5219\u901a\u8fc7name\u8fdb\u884c\u6307\u5b9a</li> </ul>"},{"location":"spring2.html","title":"Spring5 AOP, MVC, IOC (pdai)","text":"<p>Inversion of Control Container  Dependency Injection Java without Enterprise JavaBeans (EJBs) Allow enterprise development without application server Plain Old Java Objects (POJO) Unobtrusive AOP/Proxies Best Practices Testability/Maintainability/Scalability/Complexity/Business Focus WORA: Write Once Run Anywhere AppConfig @Configuration @Bean Setter ingestion/constructor ingestion Spring Scopes and Autowiring Scopes: Singleton: One instantiation, single instance per Spring container @Scope(\"singleton\") Prototype: new bean per request @Scope(\"prototype\") Valid only in web-aware Spring projects: Request, Session, Global </p> <p>AOP \u8fde\u63a5\u70b9(Jointpoint):\u5728\u54ea\u91cc\u5e72; \u5207\u5165\u70b9(Pointcut): \u5728\u54ea\u91cc\u4e8e\u7684\u96c6\u5408; \u901a\u77e5(Advice)\u4e3a\u4e8e\u4ec0\u4e48; \u65b9\u9762/\u5207\u9762(Aspect):\u4e8e\u4ec0\u4e48(\u5f15\u5165\u4ec0\u4e48); \u76ee\u6807\u5bf9\u8c61(Target Object):\u5728AOP\u4e2d\u8868\u793a\u4e3a\u5bf9\u8c01\u4e8e; \u7ec7\u5165(Weaving):\u600e\u4e48\u5b9e\u73b0\u7684; AOP\u4ee3\u7406(AOP Proxy):\u600e\u4e48\u5b9e\u73b0\u7684\u4e00\u79cd\u5178\u578b\u65b9\u5f0f; \u524d\u7f6e\u901a\u77e5(Before advice):\u5728\u67d0\u8fde\u63a5\u70b9\u4e4b\u524d\u6267\u884c\u7684\u901a\u77e5,\u4f46\u8fd9\u4e2a\u901a\u77e5\u4e0d\u80fd\u963b\u6b62\u8fde\u63a5\u70b9\u4e4b\u524d\u7684\u6267\u884c\u6d41\u7a0b(\u9664\u975e\u5b83 \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u540e\u7f6e\u901a\u77e5(After returning advice):\u5728\u67d0\u8fde\u63a5\u70b9\u6b63\u5e38\u5b8c\u6210\u540e\u6267\u884c\u7684\u901a\u77e5:\u4f8b\u5982,\u4e00\u4e2a\u65b9\u6cd5\u6ca1\u6709\u629b\u51fa\u4efb\u4f55\u5f02\u5e38, \u6b63\u5e38\u8fd4\u56de\u3002 \u5f02\u5e38\u901a\u77e5(After throwing advice):\u5728\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\u9000\u51fa\u65f6\u6267\u884c\u7684\u901a\u77e5\u3002 \u6700\u7ec8\u901a\u77e5(After (finally) advice):\u5f53\u67d0\u8fde\u63a5\u70b9\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u7684\u901a\u77e5(\u4e0d\u8bba\u662f\u6b63\u5e38\u8fd4\u56de\u8fd8\u662f\u5f02\u5e38\u9000\u51fa)\u3002  \u73af\u7ed5\u901a\u77e5(Around Advice):\u5305\u56f4\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u901a\u77e5,\u5982\u65b9\u6cd5\u8c03\u7528\u3002\u8fd9\u662f\u6700\u5f3a\u5927\u7684\u4e00\u79cd\u901a\u77e5\u7c7b\u578b\u3002\u73af\u7ed5\u901a\u77e5\u53ef \u4ee5\u5728\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u5b8c\u6210\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5b83\u4e5f\u4f1a\u9009\u62e9\u662f\u5426\u7ee7\u7eed\u6267\u884c\u8fde\u63a5\u70b9\u6216\u76f4\u63a5\u8fd4\u56de\u5b83\u81ea\u5df1\u7684\u8fd4\u56de\u503c\u6216\u629b\u51fa\u5f02\u5e38\u6765 \u7ed3\u675f\u6267\u884c\u3002  \u52a8\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5c06\u8981\u589e\u5f3a\u7684\u4ee3\u7801\u7ec7\u5165\u5230\u76ee\u6807\u7c7b\u4e2d,\u8fd9\u6837\u5f80\u5f80\u662f\u901a\u8fc7\u52a8\u6001\u4ee3\u7406\u6280\u672f\u5b8c\u6210\u7684,\u5982Java JDK\u7684\u52a8\u6001\u4ee3\u7406(Proxy. \u5e95\u5c42\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0)\u6216\u8005CGLIB\u7684\u52a8\u6001\u4ee3\u7406(\u5e95\u5c42\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0), Spring AOP\u91c7\u7528\u7684\u5c31\u662f\u57fa\u4e8e \u8fd0\u884c\u65f6\u589e\u5f3a\u7684\u4ee3\u7406\u6280\u672fApectu\u91c7\u7528\u7684\u5c31\u662f\u9759\u6001\u7ec7\u5165\u7684\u65b9\u5f0f\u3002Apectu\u4e3b\u8981\u91c7\u7528\u7684\u662f\u7f16\u8bd1\u671f\u7ec7\u5165,\u5728\u8fd9\u4e2a\u671f\u95f4\u4f7f\u7528 Aspect\u7684acj\u7f16\u8bd1\u5668(\u7c7b\u4f3cjavac)\u628aaspect\u7c7b\u7f16\u8bd1\u6210class\u5b57\u8282\u7801\u540e,\u5728java\u76ee\u6807\u7c7b\u7f16\u8bd1\u65f6\u7ec7\u5165,\u5373\u5148\u7f16\u8bd1aspect\u7c7b\u518d\u7f16 \u8bd1\u76ee\u6807\u7c7b\u3002 Model, View , Controller BeanFactory\uff1a \u5de5\u5382\u6a21\u5f0f\u5b9a\u4e49\u4e86IOC\u5bb9\u5668\u7684\u57fa\u672c\u529f\u80fd\u89c4\u8303 ListableBeanFactory\u3001HierarchicalBeanFactory \u548cAutowireCapableBeanFactory BeanRegistry\uff1a \u5411IOC\u5bb9\u5668\u624b\u5de5\u6ce8\u518c BeanDefinition \u5bf9\u8c61\u7684\u65b9\u6cd5 BeanDefinition \u5b9a\u4e49\u4e86\u5404\u79cdBean\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u7684\u5173\u7cfbBeanDefinitionReader \u8fd9\u662fBeanDefinition\u7684\u89e3\u6790\u5668BeanDefinitionHolder \u8fd9\u662fBeanDefination\u7684\u5305\u88c5\u7c7b\uff0c\u7528\u6765\u5b58\u50a8BeanDefinition\uff0cname\u4ee5\u53caaliases\u7b49\u3002</p> <p>ApplicationContext\uff1aIOC\u63a5\u53e3\u8bbe\u8ba1\u548c\u5b9e\u73b0 \u8bbf\u95ee\u8d44\u6e90\uff1a \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684Bean\u914d\u7f6e\uff08\u5373\u8d44\u6e90\uff09\u8fdb\u884c\u52a0\u8f7d\u3002(\u5b9e\u73b0ResourcePatternResolver\u63a5\u53e3) \u56fd\u9645\u5316: \u652f\u6301\u4fe1\u606f\u6e90\uff0c\u53ef\u4ee5\u5b9e\u73b0\u56fd\u9645\u5316\u3002\uff08\u5b9e\u73b0MessageSource\u63a5\u53e3\uff09 \u5e94\u7528\u4e8b\u4ef6: \u652f\u6301\u5e94\u7528\u4e8b\u4ef6\u3002(\u5b9e\u73b0ApplicationEventPublisher\u63a5\u53e3)</p> <p>GenericApplicationContext\uff1a \u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u521b\u5efa\u5bb9\u5668\uff0c\u5f80\u540e\u7684\u6bcf\u6b21refresh\u90fd\u4e0d\u4f1a\u66f4\u6539 AbstractRefreshableApplicationContext\uff1a AbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u7684\u6bcf\u6b21refresh\u90fd\u662f\u5148\u6e05\u9664\u5df2\u6709(\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa)\u7684\u5bb9\u5668\uff0c\u7136\u540e\u518d\u91cd\u65b0\u521b\u5efa\uff1bAbstractRefreshableApplicationContext\u53ca\u5b50\u7c7b\u65e0\u6cd5\u505a\u5230GenericApplicationContext\u6df7\u5408\u642d\u914d\u4ece\u4e0d\u540c\u6e90\u5934\u83b7\u53d6bean\u7684\u5b9a\u4e49\u4fe1\u606f   obtainFreshBeanFactory loadBeanDefinitions AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90 XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90 DocumentLoader\u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u8f6c\u6362\u4e3aDocument\u5bf9\u8c61 XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6 DefaultBeanDefinitionDocumentReader\u5bf9Bean\u5b9a\u4e49\u7684Document\u5bf9\u8c61\u89e3\u6790 BeanDefinitionParserDelegate\u89e3\u6790Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u751f\u6210BeanDefinition \u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition  \u89e3\u6790bean\u7684\u771f\u6b63name\uff0c\u5982\u679cbean\u662f\u5de5\u5382\u7c7b\uff0cname\u524d\u7f00\u4f1a\u52a0&amp;\uff0c\u9700\u8981\u53bb\u6389\u65e0\u53c2\u5355\u4f8b\u5148\u4ece\u7f13\u5b58\u4e2d\u5c1d\u8bd5\u83b7\u53d6\u5982\u679cbean\u5b9e\u4f8b\u8fd8\u5728\u521b\u5efa\u4e2d\uff0c\u5219\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5982\u679cbean definition \u5b58\u5728\u4e8e\u7236\u7684bean\u5de5\u5382\u4e2d\uff0c\u59d4\u6d3e\u7ed9\u7236Bean\u5de5\u5382\u83b7\u53d6\u6807\u8bb0\u8fd9\u4e2abeanName\u7684\u5b9e\u4f8b\u6b63\u5728\u521b\u5efa\u786e\u4fdd\u5b83\u7684\u4f9d\u8d56\u4e5f\u88ab\u521d\u59cb\u5316\u771f\u6b63\u521b\u5efa \u5355\u4f8b\u65f6\u539f\u578b\u65f6\u6839\u636ebean\u7684scope\u521b\u5efa \u7b2c\u4e00\u5c42\u7f13\u5b58\uff08singletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u5e76\u4e14\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u6210\u719f\u5bf9\u8c61\uff1b \u7b2c\u4e8c\u5c42\u7f13\u5b58\uff08earlySingletonObjects\uff09\uff1a\u5355\u4f8b\u5bf9\u8c61\u7f13\u5b58\u6c60\uff0c\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4f46\u5c1a\u672a\u5c5e\u6027\u8d4b\u503c\uff0c\u8fd9\u91cc\u7684\u5bf9\u8c61\u662f\u534a\u6210\u54c1\u5bf9\u8c61\uff1b \u7b2c\u4e09\u5c42\u7f13\u5b58\uff08singletonFactories\uff09: \u5355\u4f8b\u5de5\u5382\u7684\u7f13\u5b58</p> <p>\u201cA\u5bf9\u8c61setter\u4f9d\u8d56B\u5bf9\u8c61\uff0cB\u5bf9\u8c61setter\u4f9d\u8d56A\u5bf9\u8c61\u201d\uff0cA\u9996\u5148\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u7684\u7b2c\u4e00\u6b65\uff0c\u800c\u4e14\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u5230singletonFactories\u4e2d\uff0c\u6b64\u65f6\u8fdb\u884c\u521d\u59cb\u5316\u7684\u7b2c\u4e8c\u6b65\uff0c\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u5bf9\u8c61B\uff0c\u6b64\u65f6\u5c31\u5c1d\u8bd5\u53bbget(B)\uff0c\u53d1\u73b0B\u5c1a\u672a\u88abcreate\uff0c\u56e0\u6b64\u8d70create\u6d41\u7a0b\uff0cB\u5728\u521d\u59cb\u5316\u7b2c\u4e00\u6b65\u7684\u65f6\u5019\u53d1\u73b0\u672c\u8eab\u4f9d\u8d56\u4e86\u5bf9\u8c61A\uff0c\u56e0\u800c\u5c1d\u8bd5get(A)\uff0c\u5c1d\u8bd5\u4e00\u7ea7\u7f13\u5b58singletonObjects(\u786e\u5b9a\u6ca1\u6709\uff0c\u7531\u4e8eA\u8fd8\u6ca1\u521d\u59cb\u5316\u5f7b\u5e95)\uff0c\u5c1d\u8bd5\u4e8c\u7ea7\u7f13\u5b58earlySingletonObjects\uff08\u4e5f\u6ca1\u6709\uff09\uff0c\u5c1d\u8bd5\u4e09\u7ea7\u7f13\u5b58singletonFactories\uff0c\u56e0\u4e3aA\u7ecf\u8fc7ObjectFactory\u5c06\u672c\u8eab\u63d0\u65e9\u66dd\u5149\u4e86\uff0c\u56e0\u6b64B\u53ef\u4ee5\u7ecf\u8fc7ObjectFactory.getObject\u62ff\u5230A\u5bf9\u8c61(\u534a\u6210\u54c1)\uff0cB\u62ff\u5230A\u5bf9\u8c61\u540e\u987a\u5229\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u9636\u6bb5\u4e00\u3001\u4e8c\u3001\u4e09\uff0c\u5f7b\u5e95\u521d\u59cb\u5316\u4ee5\u540e\u5c06\u672c\u8eab\u653e\u5165\u5230\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\u3002\u6b64\u65f6\u8fd4\u56deA\u4e2d\uff0cA\u6b64\u65f6\u80fd\u62ff\u5230B\u7684\u5bf9\u8c61\u987a\u5229\u5b8c\u6210\u672c\u8eab\u7684\u521d\u59cb\u5316\u9636\u6bb5\u4e8c\u3001\u4e09\uff0c\u6700\u7ec8A\u4e5f\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u8fdb\u53bb\u4e86\u4e00\u7ea7\u7f13\u5b58singletonObjects\u4e2d\uff0c\u5e76\u4e14\u66f4\u52a0\u5e78\u8fd0\u7684\u662f\uff0c\u56e0\u4e3aB\u62ff\u5230\u4e86A\u7684\u5bf9\u8c61\u5f15\u7528\uff0c\u56e0\u6b64B\u5982\u4ecahold\u4f4f\u7684A\u5bf9\u8c61\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u3002</p> <p>Spring\u65e0\u6cd5\u89e3\u51b3\u9664\u5355\u4f8b\u6a21\u5f0f\u4ee5\u5916\u7684\u5faa\u73af\u4f9d\u8d56\uff08\u6784\u9020\u5668/prototype/\u591a\u4f8b\uff09 \u89e3\u51b3\u65b9\u6cd5\uff1a - \u4f7f\u7528@Lazy\u6ce8\u89e3\uff0c\u5ef6\u8fdf\u52a0\u8f7d - \u4f7f\u7528@DependsOn\u6ce8\u89e3\uff0c\u6307\u5b9a\u52a0\u8f7d\u5148\u540e\u5173\u7cfb - \u4fee\u6539\u6587\u4ef6\u540d\u79f0\uff0c\u6539\u53d8\u5faa\u73af\u4f9d\u8d56\u7c7b\u7684\u52a0\u8f7d\u987a\u5e8f  \u5982\u679c BeanFactoryPostProcessor \u548c Bean \u5173\u8054, \u5219\u8c03\u7528postProcessBeanFactory\u65b9\u6cd5.(\u5373\u9996\u5148\u5c1d\u8bd5\u4eceBean\u5de5\u5382\u4e2d\u83b7\u53d6Bean) \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessBeforeInstantiation\u65b9\u6cd5 \u6839\u636e\u914d\u7f6e\u60c5\u51b5\u8c03\u7528 Bean \u6784\u9020\u65b9\u6cd5\u5b9e\u4f8b\u5316 Bean\u3002 \u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u5b8c\u6210 Bean \u4e2d\u6240\u6709\u5c5e\u6027\u503c\u7684\u914d\u7f6e\u6ce8\u5165\u3002 \u5982\u679c InstantiationAwareBeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219\u8c03\u7528postProcessAfterInstantiation\u65b9\u6cd5\u548cpostProcessProperties \u8c03\u7528xxxAware\u63a5\u53e3 (BeanNameAware/BeanClassLoaderAware/BeanFactoryAware/EnvironmentAware/EmbeddedValueResolverAware/ApplicationContextAware) \u5982\u679c Bean \u5b9e\u73b0\u4e86 InitializingBean \u63a5\u53e3\uff0c\u5219 Spring \u5c06\u8c03\u7528 afterPropertiesSet() \u65b9\u6cd5\u3002(\u6216\u8005\u6709\u6267\u884c@PostConstruct\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7init-method\u5c5e\u6027\u6307\u5b9a\u4e86\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5219\u8c03\u7528\u8be5\u521d\u59cb\u5316\u65b9\u6cd5\u3002 \u5982\u679c BeanPostProcessor \u548c Bean \u5173\u8054\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u63a5\u53e3\u7684\u521d\u59cb\u5316\u65b9\u6cd5 postProcessAfterInitialization()\u3002\u6b64\u65f6\uff0cBean \u5df2\u7ecf\u53ef\u4ee5\u88ab\u5e94\u7528\u7cfb\u7edf\u4f7f\u7528\u4e86\u3002 \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"singleton\"\uff0c\u5219\u5c06\u8be5 Bean \u653e\u5165 Spring IoC \u7684\u7f13\u5b58\u6c60\u4e2d\uff0c\u5c06\u89e6\u53d1 Spring \u5bf9\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b \u5982\u679c\u5728  \u4e2d\u6307\u5b9a\u4e86\u8be5 Bean \u7684\u4f5c\u7528\u8303\u56f4\u4e3a scope=\"prototype\"\uff0c\u5219\u5c06\u8be5 Bean \u4ea4\u7ed9\u8c03\u7528\u8005\uff0c\u8c03\u7528\u8005\u7ba1\u7406\u8be5 Bean \u7684\u751f\u547d\u5468\u671f\uff0cSpring \u4e0d\u518d\u7ba1\u7406\u8be5 Bean\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 DisposableBean \u63a5\u53e3\uff0c\u5219 Spring \u4f1a\u8c03\u7528 destory() \u65b9\u6cd5\u5c06 Spring \u4e2d\u7684 Bean \u9500\u6bc1\uff1b(\u6216\u8005\u6709\u6267\u884c@PreDestroy\u6ce8\u89e3\u7684\u65b9\u6cd5) \u5982\u679c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u901a\u8fc7 destory-method \u5c5e\u6027\u6307\u5b9a\u4e86 Bean \u7684\u9500\u6bc1\u65b9\u6cd5\uff0c\u5219 Spring \u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u5bf9 Bean \u8fdb\u884c\u9500\u6bc1\u3002 <p>AOP\u7684\u521b\u5efa\u5de5\u4f5c\u662f\u4ea4\u7ed9AnnotationAwareAspectJAutoProxyCreator\u6765\u5b8c\u6210 \u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff1aBeanFactoryAware\u5c5e\u4e8eBean\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5InstantiationAwareBeanPostProcessor \u548c BeanPostProcessor \u8fd9\u4e24\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u4e00\u822c\u79f0\u5b83\u4eec\u7684\u5b9e\u73b0\u7c7b\u4e3a\u201c\u540e\u5904\u7406\u5668\u201d\uff0c\u662f\u5bb9\u5668\u7ea7\u751f\u547d\u5468\u671f\u63a5\u53e3\u65b9\u6cd5\uff1b \u6838\u5fc3\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u80af\u5b9a\u5728postProcessBeforeInstantiation\u548cpostProcessAfterInitialization\u4e2d</p> <p>\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor\u7684\u8fc7\u7a0b\u3002</p> <ul> <li>\u7531IOC Bean\u52a0\u8f7d\u65b9\u6cd5\u6808\u4e2d\u627e\u5230parseCustomElement\u65b9\u6cd5\uff0c\u627e\u5230parse aop:aspectj-autoproxy\u7684handler(org.springframework.aop.config.AopNamespaceHandler)</li> <li>AopNamespaceHandler\u6ce8\u518c\u4e86\u7684\u89e3\u6790\u7c7b\u662fAspectJAutoProxyBeanDefinitionParser</li> <li>AspectJAutoProxyBeanDefinitionParser\u7684parse \u65b9\u6cd5 \u901a\u8fc7AspectJAwareAdvisorAutoProxyCreator\u7c7b\u53bb\u521b\u5efa</li> <li>AspectJAwareAdvisorAutoProxyCreator\u5b9e\u73b0\u4e86\u4e24\u7c7b\u63a5\u53e3\uff0cBeanFactoryAware\u548cBeanPostProcessor\uff1b\u6839\u636eBean\u751f\u547d\u5468\u671f\u65b9\u6cd5\u627e\u5230\u4e24\u4e2a\u6838\u5fc3\u65b9\u6cd5\uff1a postProcessBeforeInstantiation\u548cpostProcessAfterInitialization <ul> <li>postProcessBeforeInstantiation\uff1a\u4e3b\u8981\u662f\u5904\u7406\u4f7f\u7528\u4e86@Aspect\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\uff0c\u7136\u540e\u5c06\u5207\u9762\u7c7b\u7684\u6240\u6709\u5207\u9762\u65b9\u6cd5\u6839\u636e\u4f7f\u7528\u7684\u6ce8\u89e3\u751f\u6210\u5bf9\u5e94Advice\uff0c\u5e76\u5c06Advice\u8fde\u540c\u5207\u5165\u70b9\u5339\u914d\u5668\u548c\u5207\u9762\u7c7b\u7b49\u4fe1\u606f\u4e00\u5e76\u5c01\u88c5\u5230Advisor</li> <li>postProcessAfterInitialization\uff1a\u4e3b\u8981\u8d1f\u8d23\u5c06Advisor\u6ce8\u5165\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u521b\u5efa\u4ee3\u7406\uff08cglib\u6216jdk)\uff0c\u4e3a\u540e\u9762\u7ed9\u4ee3\u7406\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u505a\u51c6\u5907\u3002</li> </ul> </li> </ul> <p>Spring\u9ed8\u8ba4\u5728\u76ee\u6807\u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\u662f\u901a\u8fc7JDK\u4ee3\u7406\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u975e\u63a5\u53e3\u7684\u662f\u901a\u8fc7Cglib\u4ee3\u7406\u5b9e\u73b0\u7684\u3002\u5f53\u8bbe\u7f6eproxy-target-class\u4e3atrue\u65f6\u5728\u76ee\u6807\u7c7b\u4e0d\u662f\u63a5\u53e3\u6216\u8005\u4ee3\u7406\u7c7b\u65f6\u4f18\u5148\u4f7f\u7528cglib\u4ee3\u7406\u5b9e\u73b0\u3002</p> <p>\u4ee3\u7406\u6a21\u5f0f(Proxy pattern): \u4e3a\u53e6\u4e00\u4e2a\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u66ff\u8eab\u6216\u5360\u4f4d\u7b26\u4ee5\u63a7\u5236\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u7684\u8bbf\u95ee Cglib\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u3001\u9ad8\u6027\u80fd\u7684\u4ee3\u7801\u751f\u6210\u5305\uff0c\u5b83\u5e7f\u6cdb\u88ab\u8bb8\u591aAOP\u6846\u67b6\u4f7f\u7528\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u65b9\u6cd5\u7684\u62e6\u622a\u3002  JDK\u4ee3\u7406\uff1a \u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u5de5\u4f5c\uff0c\u5c06\u6240\u6709\u65b9\u6cd5\u5305\u88c5\u6210ProxyMethod\u5bf9\u8c61\uff0c\u5305\u62ecObject\u7c7b\u4e2dhashCode\u3001equals\u3001toString\u65b9\u6cd5\uff0c\u4ee5\u53ca\u88ab\u4ee3\u7406\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u7b2c\u4e8c\u6b65\uff1a\u4e3a\u4ee3\u7406\u7c7b\u7ec4\u88c5\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u65b9\u6cd5\uff0cstatic\u521d\u59cb\u5316\u5757\u7b49 \u7b2c\u4e09\u6b65\uff1a\u5199\u5165class\u6587\u4ef6</p> <p>MVC:  HandlerMapping\u662f\u6620\u5c04\u5904\u7406\u5668 HandlerAdpter\u662f\u5904\u7406\u9002\u914d\u5668\uff0c\u7528\u6765\u627e\u5230\u4f60\u7684Controller\u4e2d\u7684\u5904\u7406\u65b9\u6cd5 HandlerExceptionResolver\u662f\u5f53\u9047\u5230\u5904\u7406\u5f02\u5e38\u65f6\u7684\u5f02\u5e38\u89e3\u6790\u5668</p> <p>\u9996\u5148\u7528\u6237\u53d1\u9001\u8bf7\u6c42\u2014\u2014&gt;DispatcherServlet\uff0c\u524d\u7aef\u63a7\u5236\u5668\u6536\u5230\u8bf7\u6c42\u540e\u81ea\u5df1\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u89e3\u6790\u5668\u8fdb\u884c \u5904\u7406\uff0c\u4f5c\u4e3a\u7edf\u4e00\u8bbf\u95ee\u70b9\uff0c\u8fdb\u884c\u5168\u5c40\u7684\u6d41\u7a0b\u63a7\u5236\uff1b DispatcherServlet\u2014\u2014&gt;HandlerMapping\uff0c HandlerMapping \u5c06\u4f1a\u628a\u8bf7\u6c42\u6620\u5c04\u4e3a HandlerExecutionChain \u5bf9\u8c61\uff08\u5305\u542b\u4e00 \u4e2aHandler \u5904\u7406\u5668\uff08\u9875\u9762\u63a7\u5236\u5668\uff09\u5bf9\u8c61\u3001\u591a\u4e2aHandlerInterceptor \u62e6\u622a\u5668\uff09\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u6dfb\u52a0\u65b0 \u7684\u6620\u5c04\u7b56\u7565\uff1bDispatcherServlet\u2014\u2014&gt;HandlerAdapter\uff0cHandlerAdapter \u5c06\u4f1a\u628a\u5904\u7406\u5668\u5305\u88c5\u4e3a\u9002\u914d\u5668\uff0c\u4ece\u800c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c \u5373\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\uff0c\u4ece\u800c\u5f88\u5bb9\u6613\u652f\u6301\u5f88\u591a\u7c7b\u578b\u7684\u5904\u7406\u5668\uff1bHandlerAdapter\u2014\u2014&gt;\u5904\u7406\u5668\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u7684\u8c03\u7528\uff0cHandlerAdapter \u5c06\u4f1a\u6839\u636e\u9002\u914d\u7684\u7ed3\u679c\u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u5668\u7684\u529f\u80fd\u5904 \u7406\u65b9\u6cd5\uff0c\u5b8c\u6210\u529f\u80fd\u5904\u7406\uff1b\u5e76\u8fd4\u56de\u4e00\u4e2aModelAndView \u5bf9\u8c61\uff08\u5305\u542b\u6a21\u578b\u6570\u636e\u3001\u903b\u8f91\u89c6\u56fe\u540d\uff09\uff1b ModelAndView \u7684\u903b\u8f91\u89c6\u56fe\u540d\u2014\u2014&gt; ViewResolver\uff0cViewResolver \u5c06\u628a\u903b\u8f91\u89c6\u56fe\u540d\u89e3\u6790\u4e3a\u5177\u4f53\u7684View\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56 \u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u66f4\u6362\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b View\u2014\u2014&gt;\u6e32\u67d3\uff0cView \u4f1a\u6839\u636e\u4f20\u8fdb\u6765\u7684Model \u6a21\u578b\u6570\u636e\u8fdb\u884c\u6e32\u67d3\uff0c\u6b64\u5904\u7684Model \u5b9e\u9645\u662f\u4e00\u4e2aMap \u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64 \u5f88\u5bb9\u6613\u652f\u6301\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b \u8fd4\u56de\u63a7\u5236\u6743\u7ed9DispatcherServlet\uff0c\u7531DispatcherServlet \u8fd4\u56de\u54cd\u5e94\u7ed9\u7528\u6237\uff0c\u5230\u6b64\u4e00\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002</p>"},{"location":"spring_javaguide.html","title":"Core Container","text":"<p>Spring \u6846\u67b6\u7684\u6838\u5fc3\u6a21\u5757\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u662f\u57fa\u7840\u6a21\u5757\uff0c\u4e3b\u8981\u63d0\u4f9b IoC \u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u7684\u652f\u6301\u3002Spring \u5176\u4ed6\u6240\u6709\u7684\u529f\u80fd\u57fa\u672c\u90fd\u9700\u8981\u4f9d\u8d56\u4e8e\u8be5\u6a21\u5757\uff0c\u6211\u4eec\u4ece\u4e0a\u9762\u90a3\u5f20 Spring \u5404\u4e2a\u6a21\u5757\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u3002 spring-core\uff1aSpring \u6846\u67b6\u57fa\u672c\u7684\u6838\u5fc3\u5de5\u5177\u7c7b\u3002 spring-beans\uff1a\u63d0\u4f9b\u5bf9 bean \u7684\u521b\u5efa\u3001\u914d\u7f6e\u548c\u7ba1\u7406\u7b49\u529f\u80fd\u7684\u652f\u6301\u3002 spring-context\uff1a\u63d0\u4f9b\u5bf9\u56fd\u9645\u5316\u3001\u4e8b\u4ef6\u4f20\u64ad\u3001\u8d44\u6e90\u52a0\u8f7d\u7b49\u529f\u80fd\u7684\u652f\u6301\u3002 spring-expression\uff1a\u63d0\u4f9b\u5bf9\u8868\u8fbe\u5f0f\u8bed\u8a00\uff08Spring Expression Language\uff09 SpEL \u7684\u652f\u6301\uff0c\u53ea\u4f9d\u8d56\u4e8e core \u6a21\u5757\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6a21\u5757\uff0c\u53ef\u4ee5\u5355\u72ec\u4f7f\u7528\u3002</p>"},{"location":"spring_javaguide.html#aop","title":"AOP","text":"<p>spring-aspects\uff1a\u8be5\u6a21\u5757\u4e3a\u4e0e AspectJ \u7684\u96c6\u6210\u63d0\u4f9b\u652f\u6301\u3002 spring-aop\uff1a\u63d0\u4f9b\u4e86\u9762\u5411\u5207\u9762\u7684\u7f16\u7a0b\u5b9e\u73b0\u3002 spring-instrument\uff1a\u63d0\u4f9b\u4e86\u4e3a JVM \u6dfb\u52a0\u4ee3\u7406\uff08agent\uff09\u7684\u529f\u80fd\u3002 \u5177\u4f53\u6765\u8bb2\uff0c\u5b83\u4e3a Tomcat \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ec7\u5165\u4ee3\u7406\uff0c\u80fd\u591f\u4e3a Tomcat \u4f20\u9012\u7c7b\u6587 \u4ef6\uff0c\u5c31\u50cf\u8fd9\u4e9b\u6587\u4ef6\u662f\u88ab\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7684\u4e00\u6837\u3002\u6ca1\u6709\u7406\u89e3\u4e5f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u4e2a\u6a21\u5757\u7684\u4f7f\u7528\u573a\u666f\u975e\u5e38\u6709\u9650\u3002</p>"},{"location":"spring_javaguide.html#data-accessintegration","title":"Data Access/Integration","text":"<p>spring-jdbc\uff1a\u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u5e93\u8bbf\u95ee\u7684\u62bd\u8c61 JDBC\u3002\u4e0d\u540c\u7684\u6570\u636e\u5e93\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684 API \u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u800c Java \u7a0b\u5e8f\u53ea\u9700\u8981\u548c JDBC API \u4ea4\u4e92\uff0c\u8fd9\u6837\u5c31\u5c4f\u853d\u4e86\u6570\u636e\u5e93\u7684\u5f71\u54cd\u3002 spring-tx\uff1a\u63d0\u4f9b\u5bf9\u4e8b\u52a1\u7684\u652f\u6301\u3002 spring-orm\uff1a\u63d0\u4f9b\u5bf9 Hibernate\u3001JPA\u3001iBatis \u7b49 ORM \u6846\u67b6\u7684\u652f\u6301\u3002 spring-oxm\uff1a\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u5c42\u652f\u6491 OXM(Object-to-XML-Mapping)\uff0c\u4f8b\u5982\uff1aJAXB\u3001Castor\u3001XMLBeans\u3001JiBX \u548c XStream \u7b49\u3002 spring-jms : \u6d88\u606f\u670d\u52a1\u3002\u81ea Spring Framework 4.1 \u4ee5\u540e\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u5bf9 spring-messaging \u6a21\u5757\u7684\u7ee7\u627f\u3002</p>"},{"location":"spring_javaguide.html#spring-web","title":"Spring Web","text":"<p>spring-web\uff1a\u5bf9 Web \u529f\u80fd\u7684\u5b9e\u73b0\u63d0\u4f9b\u4e00\u4e9b\u6700\u57fa\u7840\u7684\u652f\u6301\u3002 spring-webmvc\uff1a\u63d0\u4f9b\u5bf9 Spring MVC \u7684\u5b9e\u73b0\u3002 spring-websocket\uff1a\u63d0\u4f9b\u4e86\u5bf9 WebSocket \u7684\u652f\u6301\uff0cWebSocket \u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8fdb\u884c\u53cc\u5411\u901a\u4fe1\u3002 spring-webflux\uff1a\u63d0\u4f9b\u5bf9 WebFlux \u7684\u652f\u6301\u3002WebFlux \u662f Spring Framework 5.0 \u4e2d\u5f15\u5165\u7684\u65b0\u7684\u54cd\u5e94\u5f0f\u6846\u67b6\u3002\u4e0e Spring MVC \u4e0d\u540c\uff0c\u5b83\u4e0d\u9700\u8981 Servlet API\uff0c\u662f\u5b8c\u5168\u5f02\u6b65\u3002</p> <p>MVC: \u6a21\u578b(Model)\u3001\u89c6\u56fe(View)\u3001\u63a7\u5236\u5668(Controller)</p> <p>Spring \u65e8\u5728\u7b80\u5316 J2EE \u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u3002Spring Boot \u65e8\u5728\u7b80\u5316 Spring \u5f00\u53d1\uff08\u51cf\u5c11\u914d\u7f6e\u6587\u4ef6\uff0c\u5f00\u7bb1\u5373\u7528\uff01\uff09\u3002</p>"},{"location":"spring_javaguide.html#bean","title":"\u5c06\u4e00\u4e2a\u7c7b\u58f0\u660e\u4e3a Bean \u7684\u6ce8\u89e3\u6709\u54ea\u4e9b?","text":"<p>@Component\uff1a\u901a\u7528\u7684\u6ce8\u89e3\uff0c\u53ef\u6807\u6ce8\u4efb\u610f\u7c7b\u4e3a Spring \u7ec4\u4ef6\u3002\u5982\u679c\u4e00\u4e2a Bean \u4e0d\u77e5\u9053\u5c5e\u4e8e\u54ea\u4e2a\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528@Component \u6ce8\u89e3\u6807\u6ce8\u3002 @Repository : \u5bf9\u5e94\u6301\u4e45\u5c42\u5373 Dao \u5c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6570\u636e\u5e93\u76f8\u5173\u64cd\u4f5c\u3002 @Service : \u5bf9\u5e94\u670d\u52a1\u5c42\uff0c\u4e3b\u8981\u6d89\u53ca\u4e00\u4e9b\u590d\u6742\u7684\u903b\u8f91\uff0c\u9700\u8981\u7528\u5230 Dao \u5c42\u3002 @Controller : \u5bf9\u5e94 Spring MVC \u63a7\u5236\u5c42\uff0c\u4e3b\u8981\u7528\u4e8e\u63a5\u53d7\u7528\u6237\u8bf7\u6c42\u5e76\u8c03\u7528 Service \u5c42\u8fd4\u56de\u6570\u636e\u7ed9\u524d\u7aef\u9875\u9762\u3002</p> <p>@Component \u6ce8\u89e3\u4f5c\u7528\u4e8e\u7c7b\uff0c\u800c@Bean\u6ce8\u89e3\u4f5c\u7528\u4e8e\u65b9\u6cd5\u3002 Spring \u5185\u7f6e\u7684 @Autowired \u4ee5\u53ca JDK \u5185\u7f6e\u7684 @Resource \u548c @Inject \u90fd\u53ef\u4ee5\u7528\u4e8e\u6ce8\u5165 Bean\u3002</p> <p>@Autowired \u662f Spring \u63d0\u4f9b\u7684\u6ce8\u89e3\uff0c@Resource \u662f JDK \u63d0\u4f9b\u7684\u6ce8\u89e3\u3002Autowired \u9ed8\u8ba4\u7684\u6ce8\u5165\u65b9\u5f0f\u4e3abyType\uff08\u6839\u636e\u7c7b\u578b\u8fdb\u884c\u5339\u914d\uff09\uff0c@Resource\u9ed8\u8ba4\u6ce8\u5165\u65b9\u5f0f\u4e3a byName\uff08\u6839\u636e\u540d\u79f0\u8fdb\u884c\u5339\u914d\uff09\u3002\u5f53\u4e00\u4e2a\u63a5\u53e3\u5b58\u5728\u591a\u4e2a\u5b9e\u73b0\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c@Autowired \u548c@Resource\u90fd\u9700\u8981\u901a\u8fc7\u540d\u79f0\u624d\u80fd\u6b63\u786e\u5339\u914d\u5230\u5bf9\u5e94\u7684 Bean\u3002Autowired \u53ef\u4ee5\u901a\u8fc7 @Qualifier \u6ce8\u89e3\u6765\u663e\u5f0f\u6307\u5b9a\u540d\u79f0\uff0c@Resource\u53ef\u4ee5\u901a\u8fc7 name \u5c5e\u6027\u6765\u663e\u5f0f\u6307\u5b9a\u540d\u79f0\u3002</p> <ul> <li>singleton : IoC \u5bb9\u5668\u4e2d\u53ea\u6709\u552f\u4e00\u7684 bean \u5b9e\u4f8b\u3002Spring \u4e2d\u7684 bean \u9ed8\u8ba4\u90fd\u662f\u5355\u4f8b\u7684\uff0c\u662f\u5bf9\u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\u3002</li> <li>prototype : \u6bcf\u6b21\u83b7\u53d6\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 bean \u5b9e\u4f8b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fde\u7eed getBean() \u4e24\u6b21\uff0c\u5f97\u5230\u7684\u662f\u4e0d\u540c\u7684 Bean \u5b9e\u4f8b\u3002</li> <li>request \uff08\u4ec5 Web \u5e94\u7528\u53ef\u7528\uff09: \u6bcf\u4e00\u6b21 HTTP \u8bf7\u6c42\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 bean\uff08\u8bf7\u6c42 bean\uff09\uff0c\u8be5 bean \u4ec5\u5728\u5f53\u524d HTTP request \u5185\u6709\u6548\u3002</li> <li>session \uff08\u4ec5 Web \u5e94\u7528\u53ef\u7528\uff09 : \u6bcf\u4e00\u6b21\u6765\u81ea\u65b0 session \u7684 HTTP \u8bf7\u6c42\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 bean\uff08\u4f1a\u8bdd bean\uff09\uff0c\u8be5 bean \u4ec5\u5728\u5f53\u524d HTTP session \u5185\u6709\u6548</li> <li>application/global-session \uff08\u4ec5 Web \u5e94\u7528\u53ef\u7528\uff09\uff1a\u6bcf\u4e2a Web \u5e94\u7528\u5728\u542f\u52a8\u65f6\u521b\u5efa\u4e00\u4e2a Bean\uff08\u5e94\u7528 Bean\uff09\uff0c\u8be5 bean \u4ec5\u5728\u5f53\u524d\u5e94\u7528\u542f\u52a8\u65f6\u95f4\u5185\u6709\u6548\u3002</li> <li>websocket \uff08\u4ec5 Web \u5e94\u7528\u53ef\u7528\uff09\uff1a\u6bcf\u4e00\u6b21 WebSocket \u4f1a\u8bdd\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 bean\u3002</li> </ul>"},{"location":"spring_javaguide.html#bean_1","title":"Bean \u7684\u751f\u547d\u5468\u671f\u4e86\u89e3\u4e48?","text":"<p>Bean \u5bb9\u5668\u627e\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d Spring Bean \u7684\u5b9a\u4e49\u3002 Bean \u5bb9\u5668\u5229\u7528 Java Reflection API \u521b\u5efa\u4e00\u4e2a Bean \u7684\u5b9e\u4f8b\u3002 \u5982\u679c\u6d89\u53ca\u5230\u4e00\u4e9b\u5c5e\u6027\u503c \u5229\u7528 set()\u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e9b\u5c5e\u6027\u503c\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 BeanNameAware \u63a5\u53e3\uff0c\u8c03\u7528 setBeanName()\u65b9\u6cd5\uff0c\u4f20\u5165 Bean \u7684\u540d\u5b57\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 BeanClassLoaderAware \u63a5\u53e3\uff0c\u8c03\u7528 setBeanClassLoader()\u65b9\u6cd5\uff0c\u4f20\u5165 ClassLoader\u5bf9\u8c61\u7684\u5b9e\u4f8b\u3002 \u5982\u679c Bean \u5b9e\u73b0\u4e86 BeanFactoryAware \u63a5\u53e3\uff0c\u8c03\u7528 setBeanFactory()\u65b9\u6cd5\uff0c\u4f20\u5165 BeanFactory\u5bf9\u8c61\u7684\u5b9e\u4f8b\u3002 \u4e0e\u4e0a\u9762\u7684\u7c7b\u4f3c\uff0c\u5982\u679c\u5b9e\u73b0\u4e86\u5176\u4ed6 *.Aware\u63a5\u53e3\uff0c\u5c31\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u6709\u548c\u52a0\u8f7d\u8fd9\u4e2a Bean \u7684 Spring \u5bb9\u5668\u76f8\u5173\u7684 BeanPostProcessor \u5bf9\u8c61\uff0c\u6267\u884cpostProcessBeforeInitialization() \u65b9\u6cd5 \u5982\u679c Bean \u5b9e\u73b0\u4e86InitializingBean\u63a5\u53e3\uff0c\u6267\u884cafterPropertiesSet()\u65b9\u6cd5\u3002 \u5982\u679c Bean \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\u5305\u542b init-method \u5c5e\u6027\uff0c\u6267\u884c\u6307\u5b9a\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u6709\u548c\u52a0\u8f7d\u8fd9\u4e2a Bean \u7684 Spring \u5bb9\u5668\u76f8\u5173\u7684 BeanPostProcessor \u5bf9\u8c61\uff0c\u6267\u884cpostProcessAfterInitialization() \u65b9\u6cd5 \u5f53\u8981\u9500\u6bc1 Bean \u7684\u65f6\u5019\uff0c\u5982\u679c Bean \u5b9e\u73b0\u4e86 DisposableBean \u63a5\u53e3\uff0c\u6267\u884c destroy() \u65b9\u6cd5\u3002 \u5f53\u8981\u9500\u6bc1 Bean \u7684\u65f6\u5019\uff0c\u5982\u679c Bean \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\u5305\u542b destroy-method \u5c5e\u6027\uff0c\u6267\u884c\u6307\u5b9a\u7684\u65b9\u6cd5</p>"},{"location":"spring_javaguide.html#aopaspect-oriented-programming","title":"AOP(Aspect-Oriented Programming:\u9762\u5411\u5207\u9762\u7f16\u7a0b)","text":"<p>\u80fd\u591f\u5c06\u90a3\u4e9b\u4e0e\u4e1a\u52a1\u65e0\u5173\uff0c\u5374\u4e3a\u4e1a\u52a1\u6a21\u5757\u6240\u5171\u540c\u8c03\u7528\u7684\u903b\u8f91\u6216\u8d23\u4efb\uff08\u4f8b\u5982\u4e8b\u52a1\u5904\u7406\u3001\u65e5\u5fd7\u7ba1\u7406\u3001\u6743\u9650\u63a7\u5236\u7b49\uff09\u5c01\u88c5\u8d77\u6765\uff0c\u4fbf\u4e8e\u51cf\u5c11\u7cfb\u7edf\u7684\u91cd\u590d\u4ee3\u7801\uff0c\u964d\u4f4e\u6a21\u5757\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u5e76\u6709\u5229\u4e8e\u672a\u6765\u7684\u53ef\u62d3\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p> <p>Spring AOP \u5c31\u662f\u57fa\u4e8e\u52a8\u6001\u4ee3\u7406\u7684\uff0c\u5982\u679c\u8981\u4ee3\u7406\u7684\u5bf9\u8c61\uff0c\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u90a3\u4e48 Spring AOP \u4f1a\u4f7f\u7528 JDK Proxy\uff0c\u53bb\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff0c\u800c\u5bf9\u4e8e\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528 JDK Proxy \u53bb\u8fdb\u884c\u4ee3\u7406\u4e86\uff0c\u8fd9\u65f6\u5019 Spring AOP \u4f1a\u4f7f\u7528 Cglib \u751f\u6210\u4e00\u4e2a\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u5b50\u7c7b\u6765\u4f5c\u4e3a\u4ee3\u7406</p> \u672f\u8bed \u542b\u4e49 \u76ee\u6807(Target) \u88ab\u901a\u77e5\u7684\u5bf9\u8c61 \u4ee3\u7406(Proxy) \u5411\u76ee\u6807\u5bf9\u8c61\u5e94\u7528\u901a\u77e5\u4e4b\u540e\u521b\u5efa\u7684\u4ee3\u7406\u5bf9\u8c61 \u8fde\u63a5\u70b9(JoinPoint) \u76ee\u6807\u5bf9\u8c61\u7684\u6240\u5c5e\u7c7b\u4e2d\uff0c\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\u5747\u4e3a\u8fde\u63a5\u70b9 \u5207\u5165\u70b9(Pointcut) \u88ab\u5207\u9762\u62e6\u622a / \u589e\u5f3a\u7684\u8fde\u63a5\u70b9\uff08\u5207\u5165\u70b9\u4e00\u5b9a\u662f\u8fde\u63a5\u70b9\uff0c\u8fde\u63a5\u70b9\u4e0d\u4e00\u5b9a\u662f\u5207\u5165\u70b9\uff09 \u901a\u77e5(Advice) \u589e\u5f3a\u7684\u903b\u8f91 / \u4ee3\u7801\uff0c\u4e5f\u5373\u62e6\u622a\u5230\u76ee\u6807\u5bf9\u8c61\u7684\u8fde\u63a5\u70b9\u4e4b\u540e\u8981\u505a\u7684\u4e8b\u60c5 \u5207\u9762(Aspect) \u5207\u5165\u70b9(Pointcut)+\u901a\u77e5(Advice) Weaving(\u7ec7\u5165) \u5c06\u901a\u77e5\u5e94\u7528\u5230\u76ee\u6807\u5bf9\u8c61\uff0c\u8fdb\u800c\u751f\u6210\u4ee3\u7406\u5bf9\u8c61\u7684\u8fc7\u7a0b\u52a8\u4f5c <p>Spring AOP \u5c5e\u4e8e\u8fd0\u884c\u65f6\u589e\u5f3a\uff0c\u800c AspectJ \u662f\u7f16\u8bd1\u65f6\u589e\u5f3a\u3002 Spring AOP \u57fa\u4e8e\u4ee3\u7406(Proxying)\uff0c\u800c AspectJ \u57fa\u4e8e\u5b57\u8282\u7801\u64cd\u4f5c(Bytecode Manipulation)\u3002</p> <p>Model: Java Bean View: JSP (Jakarta Server Pages) Controller: Servlet</p>"},{"location":"spring_javaguide.html#mvc2","title":"MVC2","text":"<p>Spring MVC \u4e0b\u6211\u4eec\u4e00\u822c\u628a\u540e\u7aef\u9879\u76ee\u5206\u4e3a Service \u5c42\uff08\u5904\u7406\u4e1a\u52a1\uff09\u3001Dao \u5c42\uff08\u6570\u636e\u5e93\u64cd\u4f5c\uff09\u3001Entity \u5c42\uff08\u5b9e\u4f53\u7c7b\uff09\u3001Controller \u5c42(\u63a7\u5236\u5c42\uff0c\u8fd4\u56de\u6570\u636e\u7ed9\u524d\u53f0\u9875\u9762)\u3002</p>"},{"location":"spring_javaguide.html#spring-mvc","title":"Spring MVC","text":"<ul> <li>DispatcherServlet\uff1a\u6838\u5fc3\u7684\u4e2d\u592e\u5904\u7406\u5668\uff0c\u8d1f\u8d23\u63a5\u6536\u8bf7\u6c42\u3001\u5206\u53d1\uff0c\u5e76\u7ed9\u4e88\u5ba2\u6237\u7aef\u54cd\u5e94\u3002</li> <li>HandlerMapping\uff1a\u5904\u7406\u5668\u6620\u5c04\u5668\uff0c\u6839\u636e uri \u53bb\u5339\u914d\u67e5\u627e\u80fd\u5904\u7406\u7684 Handler \uff0c\u5e76\u4f1a\u5c06\u8bf7\u6c42\u6d89\u53ca\u5230\u7684\u62e6\u622a\u5668\u548c Handler \u4e00\u8d77\u5c01\u88c5\u3002</li> <li>HandlerAdapter\uff1a\u5904\u7406\u5668\u9002\u914d\u5668\uff0c\u6839\u636e HandlerMapping \u627e\u5230\u7684 Handler \uff0c\u9002\u914d\u6267\u884c\u5bf9\u5e94\u7684 Handler\uff1b</li> <li>Handler\uff1a\u8bf7\u6c42\u5904\u7406\u5668\uff0c\u5904\u7406\u5b9e\u9645\u8bf7\u6c42\u7684\u5904\u7406\u5668\u3002</li> <li>ViewResolver\uff1a\u89c6\u56fe\u89e3\u6790\u5668\uff0c\u6839\u636e Handler \u8fd4\u56de\u7684\u903b\u8f91\u89c6\u56fe / \u89c6\u56fe\uff0c\u89e3\u6790\u5e76\u6e32\u67d3\u771f\u6b63\u7684\u89c6\u56fe\uff0c\u5e76\u4f20\u9012\u7ed9 DispatcherServlet \u54cd\u5e94\u5ba2\u6237\u7aef</li> </ul>"},{"location":"spring_javaguide.html#_1","title":"\u6d41\u7a0b","text":"<ul> <li>\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u8bf7\u6c42\uff0c DispatcherServlet\u62e6\u622a\u8bf7\u6c42\u3002</li> <li>DispatcherServlet \u6839\u636e\u8bf7\u6c42\u4fe1\u606f\u8c03\u7528 HandlerMapping \u3002</li> <li>HandlerMapping \u6839\u636e uri \u53bb\u5339\u914d\u67e5\u627e\u80fd\u5904\u7406\u7684 Handler\uff08\u4e5f\u5c31\u662f\u6211\u4eec\u5e73\u5e38\u8bf4\u7684 Controller \u63a7\u5236\u5668\uff09 \uff0c\u5e76\u4f1a\u5c06\u8bf7\u6c42\u6d89\u53ca\u5230\u7684\u62e6\u622a\u5668\u548c Handler \u4e00\u8d77\u5c01\u88c5\u3002</li> <li>DispatcherServlet \u8c03\u7528 HandlerAdapter\u9002\u914d\u5668\u6267\u884c Handler \u3002</li> <li>Handler \u5b8c\u6210\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5904\u7406\u540e\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a ModelAndView \u5bf9\u8c61\u7ed9DispatcherServlet\uff0cModelAndView \u987e\u540d\u601d\u4e49\uff0c\u5305\u542b\u4e86\u6570\u636e\u6a21\u578b\u4ee5\u53ca\u76f8\u5e94\u7684\u89c6\u56fe\u7684\u4fe1\u606f\u3002Model \u662f\u8fd4\u56de\u7684\u6570\u636e\u5bf9\u8c61\uff0cView \u662f\u4e2a\u903b\u8f91\u4e0a\u7684 View\u3002</li> <li>ViewResolver \u4f1a\u6839\u636e\u903b\u8f91 View \u67e5\u627e\u5b9e\u9645\u7684 View\u3002 DispaterServlet \u628a\u8fd4\u56de\u7684 Model \u4f20\u7ed9 View\uff08\u89c6\u56fe\u6e32\u67d3\uff09\u3002 \u628a View \u8fd4\u56de\u7ed9\u8bf7\u6c42\u8005\uff08\u6d4f\u89c8\u5668)</li> </ul>"},{"location":"spring_javaguide.html#_2","title":"\u7edf\u4e00\u5f02\u5e38\u5904\u7406","text":"<p>\u5177\u4f53\u4f1a\u4f7f\u7528\u5230@ControllerAdvice + @ExceptionHandler \u8fd9\u4e24\u4e2a\u6ce8\u89e3\u3002</p>"},{"location":"spring_javaguide.html#spring","title":"Spring \u6846\u67b6\u4e2d\u7528\u5230\u4e86\u54ea\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff1f","text":"<ul> <li>\u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f : Spring \u4f7f\u7528\u5de5\u5382\u6a21\u5f0f\u901a\u8fc7 BeanFactory\u3001ApplicationContext \u521b\u5efa bean \u5bf9\u8c61\u3002</li> <li>\u4ee3\u7406\u8bbe\u8ba1\u6a21\u5f0f : Spring AOP \u529f\u80fd\u7684\u5b9e\u73b0\u3002</li> <li>\u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f : Spring \u4e2d\u7684 Bean \u9ed8\u8ba4\u90fd\u662f\u5355\u4f8b\u7684\u3002</li> <li>\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f : Spring \u4e2d jdbcTemplate\u3001hibernateTemplate \u7b49\u4ee5 Template \u7ed3\u5c3e\u7684\u5bf9\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u7c7b\uff0c\u5b83\u4eec\u5c31\u4f7f\u7528\u5230\u4e86\u6a21\u677f\u6a21\u5f0f\u3002</li> <li>\u5305\u88c5\u5668\u8bbe\u8ba1\u6a21\u5f0f : \u6211\u4eec\u7684\u9879\u76ee\u9700\u8981\u8fde\u63a5\u591a\u4e2a\u6570\u636e\u5e93\uff0c\u800c\u4e14\u4e0d\u540c\u7684\u5ba2\u6237\u5728\u6bcf\u6b21\u8bbf\u95ee\u4e2d\u6839\u636e\u9700\u8981\u4f1a\u53bb\u8bbf\u95ee\u4e0d\u540c\u7684\u6570\u636e\u5e93\u3002\u8fd9\u79cd\u6a21\u5f0f\u8ba9\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5ba2\u6237\u7684\u9700\u6c42\u80fd\u591f\u52a8\u6001\u5207\u6362\u4e0d\u540c\u7684\u6570\u636e\u6e90\u3002</li> <li>\u89c2\u5bdf\u8005\u6a21\u5f0f: Spring \u4e8b\u4ef6\u9a71\u52a8\u6a21\u578b\u5c31\u662f\u89c2\u5bdf\u8005\u6a21\u5f0f\u5f88\u7ecf\u5178\u7684\u4e00\u4e2a\u5e94\u7528\u3002</li> <li>\u9002\u914d\u5668\u6a21\u5f0f : Spring AOP \u7684\u589e\u5f3a\u6216\u901a\u77e5(Advice)\u4f7f\u7528\u5230\u4e86\u9002\u914d\u5668\u6a21\u5f0f\u3001spring MVC \u4e2d\u4e5f\u662f\u7528\u5230\u4e86\u9002\u914d\u5668\u6a21\u5f0f\u9002\u914dController\u3002</li> </ul>"},{"location":"spring_javaguide.html#spring_1","title":"Spring \u7ba1\u7406\u4e8b\u52a1\u7684\u65b9\u5f0f\u6709\u51e0\u79cd\uff1f","text":"<ul> <li>\u7f16\u7a0b\u5f0f\u4e8b\u52a1\uff1a\u5728\u4ee3\u7801\u4e2d\u786c\u7f16\u7801(\u4e0d\u63a8\u8350\u4f7f\u7528) : \u901a\u8fc7 TransactionTemplate\u6216\u8005 TransactionManager \u624b\u52a8\u7ba1\u7406\u4e8b\u52a1\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\u5f88\u5c11\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u4f60\u7406\u89e3 Spring \u4e8b\u52a1\u7ba1\u7406\u539f\u7406\u6709\u5e2e\u52a9\u3002</li> <li>\u58f0\u660e\u5f0f\u4e8b\u52a1\uff1a\u5728 XML \u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\u6216\u8005\u76f4\u63a5\u57fa\u4e8e\u6ce8\u89e3\uff08\u63a8\u8350\u4f7f\u7528\uff09 : \u5b9e\u9645\u662f\u901a\u8fc7 AOP \u5b9e\u73b0\uff08\u57fa\u4e8e@Transactional \u7684\u5168\u6ce8\u89e3\u65b9\u5f0f\u4f7f\u7528\u6700\u591a\uff09</li> </ul>"},{"location":"spring_javaguide.html#spring_2","title":"Spring \u4e8b\u52a1\u9694\u79bb\u7ea7\u522b","text":"<ul> <li>TransactionDefinition.ISOLATION_DEFAULT :\u4f7f\u7528\u540e\u7aef\u6570\u636e\u5e93\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\uff0cMySQL \u9ed8\u8ba4\u91c7\u7528\u7684 REPEATABLE_READ \u9694\u79bb\u7ea7\u522b Oracle \u9ed8\u8ba4\u91c7\u7528\u7684 READ_COMMITTED \u9694\u79bb\u7ea7\u522b.</li> <li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED :\u6700\u4f4e\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u4f7f\u7528\u8fd9\u4e2a\u9694\u79bb\u7ea7\u522b\u5f88\u5c11\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u8bfb\u53d6\u5c1a\u672a\u63d0\u4ea4\u7684\u6570\u636e\u53d8\u66f4\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u810f\u8bfb\u3001\u5e7b\u8bfb\u6216\u4e0d\u53ef\u91cd\u590d\u8bfb</li> <li>TransactionDefinition.ISOLATION_READ_COMMITTED : \u5141\u8bb8\u8bfb\u53d6\u5e76\u53d1\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u963b\u6b62\u810f\u8bfb\uff0c\u4f46\u662f\u5e7b\u8bfb\u6216\u4e0d\u53ef\u91cd\u590d\u8bfb\u4ecd\u6709\u53ef\u80fd\u53d1\u751f</li> <li>TransactionDefinition.ISOLATION_REPEATABLE_READ : \u5bf9\u540c\u4e00\u5b57\u6bb5\u7684\u591a\u6b21\u8bfb\u53d6\u7ed3\u679c\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u9664\u975e\u6570\u636e\u662f\u88ab\u672c\u8eab\u4e8b\u52a1\u81ea\u5df1\u6240\u4fee\u6539\uff0c\u53ef\u4ee5\u963b\u6b62\u810f\u8bfb\u548c\u4e0d\u53ef\u91cd\u590d\u8bfb\uff0c\u4f46\u5e7b\u8bfb\u4ecd\u6709\u53ef\u80fd\u53d1\u751f\u3002</li> <li>TransactionDefinition.ISOLATION_SERIALIZABLE : \u6700\u9ad8\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u5b8c\u5168\u670d\u4ece ACID \u7684\u9694\u79bb\u7ea7\u522b\u3002\u6240\u6709\u7684\u4e8b\u52a1\u4f9d\u6b21\u9010\u4e2a\u6267\u884c\uff0c\u8fd9\u6837\u4e8b\u52a1\u4e4b\u95f4\u5c31\u5b8c\u5168\u4e0d\u53ef\u80fd\u4ea7\u751f\u5e72\u6270\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8be5\u7ea7\u522b\u53ef\u4ee5\u9632\u6b62\u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u4ee5\u53ca\u5e7b\u8bfb\u3002\u4f46\u662f\u8fd9\u5c06\u4e25\u91cd\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u7528\u5230\u8be5\u7ea7\u522b\u3002</li> </ul>"},{"location":"spring_javaguide.html#transactionalrollbackfor-exceptionclass","title":"@Transactional(rollbackFor = Exception.class)\u6ce8\u89e3\u4e86\u89e3\u5417\uff1f","text":"<p>rollbackFor=Exception.class,\u53ef\u4ee5\u8ba9\u4e8b\u52a1\u5728\u9047\u5230\u975e\u8fd0\u884c\u65f6\u5f02\u5e38\u65f6\u4e5f\u56de\u6eda\u3002</p> <p>JPA: Java Persistence API</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day17.html","title":"Day 17 \u4e8c\u53c9\u6811, \u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>654. Maximum Binary Tree</p> <p>\u7a7a\u6307\u9488\u8fdb\u5165\u9012\u5f52\uff0c\u7ec8\u6b62\u6761\u4ef6\u4e3a\u7a7a\u6307\u9488\uff0c\u7a7a\u6307\u9488\u4e0d\u8fdb\u5165\u9012\u5f52\uff0c\u7ec8\u6b62\u6761\u4ef6\u4e3a\u53f6\u5b50\u7ed3\u70b9\u3002 \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e00\u822c\u60c5\u51b5\u6765\u8bf4\uff1a\u5982\u679c\u8ba9\u7a7a\u8282\u70b9\uff08\u7a7a\u6307\u9488\uff09\u8fdb\u5165\u9012\u5f52\uff0c\u5c31\u4e0d\u52a0if\uff0c\u5982\u679c\u4e0d\u8ba9\u7a7a\u8282\u70b9\u8fdb\u5165\u9012\u5f52\uff0c\u5c31\u52a0if\u9650\u5236\u4e00\u4e0b\uff0c \u7ec8\u6b62\u6761\u4ef6\u4e5f\u4f1a\u76f8\u5e94\u7684\u8c03\u6574\u3002</p> <p>617. Merge Two Binary Trees</p> <pre><code>// \u9012\u5f52\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        TreeNode* root;\n        if (!root1 &amp;&amp; !root2) {\n            return NULL;\n        }\n        if (!root1 || !root2) {\n            if (!root1) {\n                return root2;\n            }\n            return root1;\n        } \n        root1-&gt;val += root2-&gt;val;\n        root1-&gt;left = mergeTrees(root1-&gt;left, root2-&gt;left);\n        root1-&gt;right = mergeTrees(root1-&gt;right, root2-&gt;right);\n        return root1;\n    }\n};\n</code></pre> <pre><code>// \u8fed\u4ee3\uff1a\u4e0d\u9700\u8981backtrack\uff0c\u65b9\u5411\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        while (root != NULL) {\n            if (root-&gt;val &gt; val) root = root-&gt;left;\n            else if (root-&gt;val &lt; val) root = root-&gt;right;\n            else return root;\n        }\n        return NULL;\n    }\n};\n</code></pre> <p>98. Validate Binary Search Tree</p> <p>\u4e2d\u5e8f\u904d\u5386\uff1a\u628a\u4e8c\u53c9\u6811\u8f6c\u4e3a\u6709\u5e8f\u6570\u7ec4 \u4e0d\u80fd\u5355\u7eaf\u7684\u6bd4\u8f83\u5de6\u8282\u70b9\u5c0f\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u53f3\u8282\u70b9\u5927\u4e8e\u4e2d\u95f4\u8282\u70b9\u5c31\u5b8c\u4e8b\u4e86\u3002 \u8981\u6bd4\u8f83\u7684\u662f \u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u5c0f\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u5927\u4e8e\u4e2d\u95f4\u8282\u70b9\u3002</p> <pre><code>// \u907f\u514d\u8bbe\u6700\u5c0f\u503c\nclass Solution {\npublic:\n    TreeNode* pre = NULL; // \u7528\u6765\u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        bool left = isValidBST(root-&gt;left);\n\n        if (pre != NULL &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre> <pre><code>// \u8fed\u4ee3\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        TreeNode* pre = NULL; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) {\n                st.push(cur);\n                cur = cur-&gt;left;                // \u5de6\n            } else {\n                cur = st.top();                 // \u4e2d\n                st.pop();\n                if (pre != NULL &amp;&amp; cur-&gt;val &lt;= pre-&gt;val)\n                return false;\n                pre = cur; //\u4fdd\u5b58\u524d\u4e00\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9\n\n                cur = cur-&gt;right;               // \u53f3\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day18.html","title":"Day 18 \u4e8c\u53c9\u6811, \u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>530. Minimum Absolute Difference in BST</p> <p>\u601d\u8def\uff1a\u4e2d\u5e8f\u904d\u5386\uff0c\u6309\u987a\u5e8f\u6bd4\u8f83\u8282\u70b9\u5927\u5c0f\u3002\u7528prev\u548ccurr\u6bd4\u8f83\u6c42\u6700\u5c0f\u5dee\u503c</p> <pre><code>class Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        TreeNode* pre = NULL;\n        int result = INT_MAX;\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) { // \u6307\u9488\u6765\u8bbf\u95ee\u8282\u70b9\uff0c\u8bbf\u95ee\u5230\u6700\u5e95\u5c42\n                st.push(cur); // \u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u653e\u8fdb\u6808\n                cur = cur-&gt;left;                // \u5de6\n            } else {\n                cur = st.top();\n                st.pop();\n                if (pre != NULL) {              // \u4e2d\n                    result = min(result, cur-&gt;val - pre-&gt;val);\n                }\n                pre = cur;\n                cur = cur-&gt;right;               // \u53f3\n            }\n        }\n        return result;\n    }\n};\n</code></pre> <p>501. Find Mode in Binary Search Tree</p> <pre><code>class Solution {\npublic:\n    int freq = 0;\n    int prev = INT_MIN;\n    int maxF = INT_MIN;\n    vector&lt;int&gt;res;\n    void traverse(TreeNode* root) {\n        if (!root) {\n            return;\n        }\n        traverse(root-&gt;left);\n        if (prev == INT_MIN) {\n            freq = 1;\n        } else if (prev == root-&gt;val) {\n            freq++;\n        } else {\n            freq = 1;\n        }\n        prev = root-&gt;val;\n        if (freq &gt; maxF) {\n            maxF = freq;\n            res.clear();\n            res.push_back(root-&gt;val);\n        } else if (freq == maxF) {\n            res.push_back(root-&gt;val);\n        }\n        traverse(root-&gt;right);\n    }\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        traverse(root);\n        return res;\n    }\n};\n</code></pre> <p>236. Lowest Common Ancestor of a Binary Tree</p> <p>\u601d\u8def\uff1a\u4ece\u5e95\u5411\u4e0a\u904d\u5386\uff0c\u540e\u5e8f\u904d\u5386</p> <pre><code>\\\\ \u641c\u7d22\u8fb9\nif (\u9012\u5f52\u51fd\u6570(root-&gt;left)) return ;\nif (\u9012\u5f52\u51fd\u6570(root-&gt;right)) return ;\n\\\\ \u641c\u7d22\u6574\u4e2a\u6811\nleft = \u9012\u5f52\u51fd\u6570(root-&gt;left);  // \u5de6\nright = \u9012\u5f52\u51fd\u6570(root-&gt;right); // \u53f3\nleft\u4e0eright\u7684\u903b\u8f91\u5904\u7406;         // \u4e2d \n</code></pre> <pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (!root || root-&gt;val == p-&gt;val || root-&gt;val ==  q-&gt;val) {\n            return root;\n        }\n        TreeNode* l = lowestCommonAncestor(root-&gt;left, p, q);\n        TreeNode* r = lowestCommonAncestor(root-&gt;right, p, q);\n        if (l &amp;&amp; r) {\n            return root;\n        } else if (l) {\n            return l;\n        }\n        return r;\n    }   \n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day19.html","title":"Day 19 \u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u4e00\u5b9a\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5806\u7684\u6392\u5e8f\u662f\u7236\u8282\u70b9\u5927\u4e8e\u5b50\u8282\u70b9\uff0c \u800c\u641c\u7d22\u6811\u662f\u7236\u8282\u70b9\u5927\u4e8e\u5de6\u5b69\u5b50\uff0c\u5c0f\u4e8e\u53f3\u5b69\u5b50\uff0c\u6240\u4ee5\u5806\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811</p> <p>235. Lowest Common Ancestor of a Binary Search Tree</p> <p>\u601d\u8def\uff1a \u4e8c\u53c9\u6811\uff1a\u5982\u679cnode\u672c\u8eab\u662f\u81ea\u5df1\u7684ancestor\uff0c\u90a3\u4e48\u53ea\u6709left/right\u4e00\u8fb9\u6709\u503c\uff0c\u53e6\u4e00\u8fb9\u4e3a\u7a7a\u503c\uff0c\u5fc5\u987b\u641c\u7d22\u6574\u4e2a\u4e8c\u53c9\u6811 \u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u4ece\u4e0a\u5411\u4e0b\u53bb\u9012\u5f52\u904d\u5386\uff0c\u7b2c\u4e00\u6b21\u9047\u5230 cur\u8282\u70b9\u662f\u6570\u503c\u5728[p, q]\u533a\u95f4\u4e2d\uff0c\u90a3\u4e48cur\u5c31\u662fp\u548cq\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u4e0d\u9700\u8981\u904d\u5386\u6574\u4e2a\u6811\u3002</p> <pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) {\n            return lowestCommonAncestor(root-&gt;left, p, q);\n        } else if (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) {\n            return lowestCommonAncestor(root-&gt;right, p, q);\n        }\n        return root;\n    }\n};\n\n// \u8fed\u4ee3\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        while(root) {\n            if (root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) {\n                root = root-&gt;left;\n            } else if (root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) {\n                root = root-&gt;right;\n            } else return root;\n        }\n        return NULL;\n    }\n};\n</code></pre> <p>701. Insert into a Binary Search Tree</p> <pre><code>class Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (!root) {\n            // \u4e0b\u4e00\u5c42\u5c06\u52a0\u5165\u8282\u70b9\u8fd4\u56de\uff0c\u672c\u5c42\u7528root-&gt;left\u6216\u8005root-&gt;right\u5c06\u5176\u63a5\u4f4f\n            return new TreeNode(val);\n        } else if (root-&gt;val &lt; val) {\n            root-&gt;right = insertIntoBST(root-&gt;right, val);\n        } else if (root-&gt;val &gt; val) {\n            root-&gt;left = insertIntoBST(root-&gt;left, val);\n        }\n        return root;\n    }\n};\n</code></pre> <p>450. Delete Node in a BST</p> <ul> <li>\u6ca1\u627e\u5230\u5220\u9664\u7684\u8282\u70b9\uff0c\u904d\u5386\u5230\u7a7a\u8282\u70b9\u76f4\u63a5\u8fd4\u56de\u4e86</li> <li>\u627e\u5230\u5220\u9664\u7684\u8282\u70b9<ul> <li>\u5de6\u53f3\u5b69\u5b50\u90fd\u4e3a\u7a7a\uff08\u53f6\u5b50\u8282\u70b9\uff09\uff0c\u76f4\u63a5\u5220\u9664\u8282\u70b9\uff0c \u8fd4\u56deNULL\u4e3a\u6839\u8282\u70b9</li> <li>\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u53f3\u5b69\u5b50\u4e0d\u4e3a\u7a7a\uff0c\u5220\u9664\u8282\u70b9\uff0c\u53f3\u5b69\u5b50\u8865\u4f4d\uff0c\u8fd4\u56de\u53f3\u5b69\u5b50\u4e3a\u6839\u8282\u70b9</li> </ul> </li> <li>\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5de6\u5b69\u5b50\u4e0d\u4e3a\u7a7a\uff0c\u5220\u9664\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u8865\u4f4d\uff0c\u8fd4\u56de\u5de6\u5b69\u5b50\u4e3a\u6839\u8282\u70b9</li> <li>\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5934\u7ed3\u70b9\uff08\u5de6\u5b69\u5b50\uff09\u653e\u5230\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6700\u5de6\u9762\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e0a\uff0c\u8fd4\u56de\u5220\u9664\u8282\u70b9\u53f3\u5b69\u5b50\u4e3a\u65b0\u7684\u6839\u8282\u70b9</li> </ul> <pre><code>class Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (!root) {\n            return root;\n        } \n        if (root-&gt;val == key) {\n            if (!root-&gt;left &amp;&amp; !root-&gt;right) {\n                delete root;\n                return NULL;\n            } else if (!root-&gt;left) {\n                TreeNode* node = root-&gt;right;\n                delete root;\n                return node;\n            } else if (!root-&gt;right) {\n                TreeNode* node = root-&gt;left;\n                delete root;\n                return node;\n            } else {\n                TreeNode* cur = root-&gt;right;\n                while (cur-&gt;left) {\n                    cur = cur-&gt;left;\n                }\n                cur-&gt;left = root-&gt;left;\n                TreeNode* tmp = root;\n                root = root-&gt;right;\n                delete tmp;\n                return root;\n            }\n        }\n        if (root-&gt;val &gt; key) {\n            root-&gt;left = deleteNode(root-&gt;left, key);\n        }\n        if (root-&gt;val &lt; key) {\n            root-&gt;right = deleteNode(root-&gt;right, key);\n        }\n        return root;\n    }\n};\n\n// \u666e\u901a\u4e8c\u53c9\u6811\u5220\u9664\u8282\u70b9\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (root == nullptr) return root;\n        if (root-&gt;val == key) {\n            if (root-&gt;right == nullptr) { // \u8fd9\u91cc\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u76ee\u6807\u503c\uff1a\u6700\u7ec8\u5220\u9664\u7684\u4f5c\u7528\n                return root-&gt;left;\n            }\n            TreeNode *cur = root-&gt;right;\n            while (cur-&gt;left) {\n                cur = cur-&gt;left;\n            }\n            swap(root-&gt;val, cur-&gt;val); // \u8fd9\u91cc\u7b2c\u4e00\u6b21\u64cd\u4f5c\u76ee\u6807\u503c\uff1a\u4ea4\u6362\u76ee\u6807\u503c\u5176\u53f3\u5b50\u6811\u6700\u5de6\u9762\u8282\u70b9\u3002\n        }\n        root-&gt;left = deleteNode(root-&gt;left, key);\n        root-&gt;right = deleteNode(root-&gt;right, key);\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day20.html","title":"Day 20 \u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>669. Trim a Binary Search Tree</p> <pre><code>class Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        if (!root) {\n            return NULL;\n        }\n        if (root-&gt;val &gt; high) {\n            return trimBST(root-&gt;left, low, high);\n        } \n        if (root-&gt;val &lt; low) {\n            return trimBST(root-&gt;right, low, high);\n        }\n        root-&gt;left = trimBST(root-&gt;left, low, high);\n        root-&gt;right = trimBST(root-&gt;right, low, high);\n        return root;\n     }\n};\n</code></pre> <p>108. Convert Sorted Array to Binary Search Tree</p> <p>\u601d\u8def\uff1a\u9898\u76ee\u8981\u6c42\u662fbalanced BST, \u5982\u679c\u4e0d\u662fBST, \u5c31\u4f1a\u53d8\u6210\u53ea\u6709\u5de6\u5b50\u6811/\u53f3\u5b50\u6811\u7684\u94fe\u8868\u3002</p> <pre><code>class Solution {\npublic:\n    TreeNode* traverse(vector&lt;int&gt;&amp;nums, int l, int r) {\n        if (l &gt; r) {\n            return NULL;\n        }\n        // \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u4e2d\u95f4\u4f4d\u7f6e\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u53d6\u9760\u5de6\u8fb9\u7684\n        int m = l + (r - l) / 2;\n        TreeNode* root = new TreeNode(nums[m]);\n        root-&gt;left = traverse(nums, l, m - 1);\n        root-&gt;right = traverse(nums, m + 1, r);\n        return root;\n    }\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        return traverse(nums, 0, nums.size() - 1);\n    }\n};\n</code></pre> <p>\u603b\u7ed3\uff1a</p> <p>\u6d89\u53ca\u5230\u4e8c\u53c9\u6811\u7684\u6784\u9020\uff0c\u65e0\u8bba\u666e\u901a\u4e8c\u53c9\u6811\u8fd8\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u4e00\u5b9a\u524d\u5e8f\uff0c\u90fd\u662f\u5148\u6784\u9020\u4e2d\u8282\u70b9\u3002</p> <p>\u6c42\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5c5e\u6027\uff0c\u4e00\u822c\u662f\u540e\u5e8f\uff0c\u4e00\u822c\u8981\u901a\u8fc7\u9012\u5f52\u51fd\u6570\u7684\u8fd4\u56de\u503c\u505a\u8ba1\u7b97\u3002(\u524d\u5e8f\u6c42\u6df1\u5ea6\uff0c\u65b9\u4fbf\u8ba9\u7236\u8282\u70b9\u6307\u5411\u5b50\u8282\u70b9)</p> <p>\u6c42\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5c5e\u6027\uff0c\u4e00\u5b9a\u662f\u4e2d\u5e8f\u4e86\uff0c\u8981\u4e0d\u767d\u778e\u4e86\u6709\u5e8f\u6027\u4e86\u3002</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day21.html","title":"Day 21 \u56de\u6eaf","text":"<p>\u56de\u6eaf\u6cd5\uff0c\u4e00\u822c\u53ef\u4ee5\u89e3\u51b3\u5982\u4e0b\u51e0\u79cd\u95ee\u9898\uff1a</p> <ul> <li>\u7ec4\u5408\u95ee\u9898\uff1aN\u4e2a\u6570\u91cc\u9762\u6309\u4e00\u5b9a\u89c4\u5219\u627e\u51fak\u4e2a\u6570\u7684\u96c6\u5408</li> <li>\u5207\u5272\u95ee\u9898\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6309\u4e00\u5b9a\u89c4\u5219\u6709\u51e0\u79cd\u5207\u5272\u65b9\u5f0f</li> <li>\u5b50\u96c6\u95ee\u9898\uff1a\u4e00\u4e2aN\u4e2a\u6570\u7684\u96c6\u5408\u91cc\u6709\u591a\u5c11\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u96c6</li> <li>\u6392\u5217\u95ee\u9898\uff1aN\u4e2a\u6570\u6309\u4e00\u5b9a\u89c4\u5219\u5168\u6392\u5217\uff0c\u6709\u51e0\u79cd\u6392\u5217\u65b9\u5f0f</li> <li>\u68cb\u76d8\u95ee\u9898\uff1aN\u7687\u540e\uff0c\u89e3\u6570\u72ec\u7b49\u7b49</li> </ul> <p>\u56de\u6eaf\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u62bd\u8c61\u4e3a\u6811\u5f62\u7ed3\u6784\u3002 \u56e0\u4e3a\u56de\u6eaf\u6cd5\u89e3\u51b3\u7684\u90fd\u662f\u5728\u96c6\u5408\u4e2d\u9012\u5f52\u67e5\u627e\u5b50\u96c6\uff0c\u96c6\u5408\u7684\u5927\u5c0f\u5c31\u6784\u6210\u4e86\u6811\u7684\u5bbd\u5ea6\uff0c\u9012\u5f52\u7684\u6df1\u5ea6\uff0c\u90fd\u6784\u6210\u7684\u6811\u7684\u6df1\u5ea6\u3002   for\u5faa\u73af\u53ef\u4ee5\u7406\u89e3\u662f\u6a2a\u5411\u904d\u5386\uff0cbacktracking\uff08\u9012\u5f52\uff09\u5c31\u662f\u7eb5\u5411\u904d\u5386</p> <p>77. Combinations</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(vector&lt;int&gt;&amp;num, int curr, int end, int k) {\n        if (num.size() == k) {\n            res.push_back(num);\n            return;\n        }\n        // \u526a\u679d\u4f18\u5316\uff1a\n        // for (int i = curr; i &lt;= n - (k - num.size()) + 1; i++)  {\n        // i\u4e3a\u672c\u6b21\u641c\u7d22\u7684\u8d77\u59cb\u4f4d\u7f6e\n        for (int i = curr; i &lt;= end; i++) {\n            num.push_back(i);\n            permutate(num, i + 1, end, k);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;int&gt;temp;\n        permutate(temp, 1, n, k);\n        return res;\n    }\n};\n</code></pre> <p>\u6a21\u7248\uff1a</p> <pre><code>void backtracking(\u53c2\u6570) {\n    if (\u7ec8\u6b62\u6761\u4ef6) {\n        \u5b58\u653e\u7ed3\u679c;\n        return;\n    }\n\n    for (\u9009\u62e9\uff1a\u672c\u5c42\u96c6\u5408\u4e2d\u5143\u7d20\uff08\u6811\u4e2d\u8282\u70b9\u5b69\u5b50\u7684\u6570\u91cf\u5c31\u662f\u96c6\u5408\u7684\u5927\u5c0f\uff09) {\n        \u5904\u7406\u8282\u70b9;\n        backtracking(\u8def\u5f84\uff0c\u9009\u62e9\u5217\u8868); // \u9012\u5f52\n        \u56de\u6eaf\uff0c\u64a4\u9500\u5904\u7406\u7ed3\u679c\n    }\n}\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day22.html","title":"Day 22 \u56de\u6eaf","text":"<p>216. Combination Sum III</p> <p>\u9898\u76ee\uff1a Find all valid combinations of k numbers that sum up to n such that the following conditions are true:</p> <ul> <li>Only numbers 1 through 9 are used.</li> <li>Each number is used at most once.</li> </ul> <p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(int idx, int curr, int size, int sum, vector&lt;int&gt;num) {\n        if (curr &gt;= sum || num.size() == size) {\n            if (curr == sum &amp;&amp; num.size() == size) {\n                res.push_back(num);\n            }\n            return;\n        }\n        for (int i = idx; i &lt;= 9 - (size - num.size()) + 1; i++) {\n            num.push_back(i);\n            permutate(i + 1, curr + i, size, sum, num);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\n        vector&lt;int&gt;num;\n        permutate(1, 0, k, n, num);\n        return res;\n    }\n};\n</code></pre> <p>17. Letter Combinations of a Phone Number</p> <p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. </p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt;mp;\n    vector&lt;string&gt;res;\n    void permutate(string digits, string str, int idx) {\n        if (str.length() == digits.length()) {\n            res.push_back(str);\n            return;\n        }\n        for (auto x: mp[digits[idx] - '0']) {\n            str += x;\n            permutate(digits, str, idx + 1);\n            str.pop_back();\n        }\n    }\n    vector&lt;string&gt; letterCombinations(string digits) {\n        if (digits.length() == 0) {\n            return {};\n        }\n        mp = vector&lt;string&gt;(10);\n        mp[2] = \"abc\";\n        mp[3] = \"def\";\n        mp[4] = \"ghi\";\n        mp[5] = \"jkl\";\n        mp[6] = \"mno\";\n        mp[7] = \"pqrs\";\n        mp[8] = \"tuv\";\n        mp[9] = \"wxyz\";\n        string str = \"\";\n        permutate(digits, str, 0);\n        return res;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day23.html","title":"Day 23 \u56de\u6eaf","text":"<p>39. Combination Sum</p> <p>\u9898\u76ee\uff1a Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.</p> <p>The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p> <p>The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(vector&lt;int&gt;&amp;nums, int sum, int idx, int target, vector&lt;int&gt;num) {\n        if (sum &gt;= target) {\n            if (sum == target) {\n                res.push_back(num);\n            }\n            return;\n        }\n        // \u526a\u679d\n        for (int i = idx; i &lt; nums.size() &amp;&amp; sum + nums[i] &lt;= target; i++) {\n            num.push_back(nums[i]);\n            permutate(nums, sum + nums[i], i, target, num);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        vector&lt;int&gt;num;\n        // \u9700\u8981\u6392\u5e8f\n        sort(candidates.begin(), candidates.end()); \n        permutate(candidates, 0, 0, target, num);\n        return res;\n    }\n};\n</code></pre> <p>40. Combination Sum II</p> <p>\u601d\u8def\uff1a\u548c39\u9898\u7684\u533a\u522b\u662f\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u6709\u91cd\u590d\u7684\u4f4d\u7f6e \u540c\u4e00\u6811\u5c42\u4e0d\u53ef\u4ee5\u91cd\u590d\uff0c\u540c\u4e00\u6811\u679d\u53ef\u4ee5\u91cd\u590d</p> <pre><code>class Solution {\npublic:\n    set&lt;vector&lt;int&gt;&gt;res;\n    void permutate(vector&lt;int&gt;&amp;nums, int sum, int idx, int target, vector&lt;int&gt;num) {\n        if (sum &gt;= target || idx &gt;= nums.size()) {\n            if (sum == target) {\n                res.insert(num);\n            }\n            return;\n        }\n        for (int i = idx; i &lt; nums.size() &amp;&amp; sum + nums[i] &lt;= target; i++) {\n            // \u540c\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u9009\u4e00\u6837\u7684\u6570\u5b57 \n            if (i &gt; idx &amp;&amp; nums[i] == nums[i - 1]) {\n                continue;\n            }\n            num.push_back(nums[i]);\n            permutate(nums, sum + nums[i], i + 1, target, num);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; combinationSum2(vector&lt;int&gt;&amp; candidates, int target) {\n        vector&lt;int&gt;num;\n        sort(candidates.begin(), candidates.end()); \n        permutate(candidates, 0, 0, target, num);\n        return vector&lt;vector&lt;int&gt;&gt;(res.begin(), res.end());\n    }\n};\n</code></pre> <p>131. Palindrome Partitioning</p> <p>\u9898\u76ee\uff1aGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.</p> <p>\u4f18\u5316\uff1a\u5c06\u6240\u6709\u53ef\u80fd\u7684substring\u662f\u5426\u4e3a\u56de\u6587\u4e32\u63d0\u524d\u7b97\u597d</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day24.html","title":"Day 24 \u56de\u6eaf","text":"<p>93. Restore IP Addresses</p> <p>\u9898\u76ee\uff1aGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.</p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt;res;\n    bool isValid(int l, int r, string s) {\n        if (r - l &gt; 0 &amp;&amp; s[l] == '0') {\n            return false;\n        }\n        int num = stoi(s.substr(l, r - l + 1));\n        return num &gt;= 0 &amp;&amp; num &lt;= 255;\n    }\n    void permutate(int idx, string curr, string s, int count) {\n        if (idx == s.length()) {\n            if (count == 4) {\n                res.push_back(curr.substr(0, curr.length() - 1));\n            }\n            return;\n        }\n        for (int i = idx; i &lt; idx + 3 &amp;&amp; i &lt; s.length(); i++) {\n            if (isValid(idx, i, s) &amp;&amp; count &lt; 4) {\n                curr += (s.substr(idx, i - idx + 1) + \".\");\n                permutate(i + 1, curr, s, count + 1);\n                curr = curr.substr(0, curr.length() - (i - idx + 2));\n            }\n        }\n    }\n    vector&lt;string&gt; restoreIpAddresses(string s) {\n        permutate(0, \"\", s, 0);\n        return res;\n    }\n};\n</code></pre> <p>78. Subsets</p> <p>\u9898\u76ee\uff1a Given an integer array nums of unique elements, return all possible subsets (the power set).</p> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <p>\u601d\u8def\uff1a \u5408\u95ee\u9898\u548c\u5206\u5272\u95ee\u9898\u90fd\u662f\u6536\u96c6\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u800c\u5b50\u96c6\u95ee\u9898\u662f\u627e\u6811\u7684\u6240\u6709\u8282\u70b9</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(int idx, vector&lt;int&gt;&amp;nums, vector&lt;int&gt;num) {\n        res.push_back(num);\n        if (idx == nums.size()) {\n            return;\n        }\n        for (int i = idx; i &lt; nums.size(); i++) {\n            num.push_back(nums[i]);\n            permutate(i + 1, nums, num);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt;num;\n        permutate(0, nums, num);\n        return res;\n    }\n};\n</code></pre> <p>90. Subsets II</p> <p>\u9898\u76ee\uff1aGiven an integer array nums that may contain duplicates, return all possible subsets (the power set).</p> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(int idx, vector&lt;int&gt;&amp;nums, vector&lt;int&gt;num) {\n        res.push_back(num);\n        if (idx == nums.size()) {\n            return;\n        }\n        for (int i = idx; i &lt; nums.size(); i++) {\n            //  \u53bb\u91cd\n            if (i != idx &amp;&amp; nums[i - 1] == nums[i]) {\n                continue;\n            }\n            num.push_back(nums[i]);\n            permutate(i + 1, nums, num);\n            num.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; subsetsWithDup(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt;num;\n        sort(nums.begin(), nums.end());\n        permutate(0, nums, num);\n        return res;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day25.html","title":"Day 25 \u56de\u6eaf","text":"<p>491. Non-decreasing Subsequences</p> <p>\u9898\u76ee\uff1aGiven an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;res;\n    void permutate(int idx, vector&lt;int&gt;curr, vector&lt;int&gt;nums) {\n        if (curr.size() &gt;= 2) {\n                res.push_back(curr);\n        }\n        if (idx &gt;= nums.size()) {\n            return;\n        }\n        // \u7528\u6570\u7ec4\u4f18\u5316\n        int used[201] = {0};\n        for (int i = idx; i &lt; nums.size(); i++) {\n            // \u540c\u4e00\u7236\u8282\u70b9\u4e0b\u7684\u540c\u5c42\u4e0a\u4f7f\u7528\u8fc7\u7684\u5143\u7d20\u4e0d\u80fd\u518d\u4f7f\u7528\n            if ((!curr.empty() &amp;&amp; nums[i] &lt; curr.back()) || used[nums[i] + 100]) {\n                continue;\n            }\n            curr.push_back(nums[i]);\n            used[nums[i] + 100] = 1;\n            permutate(i + 1, curr, nums);\n            curr.pop_back();\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; findSubsequences(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt;curr;\n        permutate(0, curr, nums);\n        return res;\n    }\n};\n</code></pre> <p>47. Permutations II</p> <p>\u9898\u76ee\uff1aGiven a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.</p> <pre><code>class Solution {\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; result;\n    vector&lt;int&gt; path;\n    void backtracking (vector&lt;int&gt;&amp; nums, vector&lt;bool&gt;&amp; used) {\n        // \u6b64\u65f6\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u7ec4\n        if (path.size() == nums.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // used[i - 1] == true\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u679dnums[i - 1]\u4f7f\u7528\u8fc7\n            // used[i - 1] == false\uff0c\u8bf4\u660e\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7\n            // \u5982\u679c\u540c\u4e00\u6811\u5c42nums[i - 1]\u4f7f\u7528\u8fc7\u5219\u76f4\u63a5\u8df3\u8fc7\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) {\n                continue;\n            }\n            if (used[i] == false) {\n                used[i] = true;\n                path.push_back(nums[i]);\n                backtracking(nums, used);\n                path.pop_back();\n                used[i] = false;\n            }\n        }\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permuteUnique(vector&lt;int&gt;&amp; nums) {\n        result.clear();\n        path.clear();\n        sort(nums.begin(), nums.end()); // \u6392\u5e8f\n        vector&lt;bool&gt; used(nums.size(), false);\n        backtracking(nums, used);\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day26.html","title":"Day 26 \u56de\u6eaf","text":"<p>332. Reconstruct Itinerary</p> <p>\u9898\u76ee\uff1aYou are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p> <p>All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p> <p>\u601d\u8def\uff1a \u51fa\u53d1\u673a\u573a\u548c\u5230\u8fbe\u673a\u573a\u4f1a\u91cd\u590d\uff0c\u9700\u8981\u589e\u5220\u5143\u7d20\u3002 <code>unordered_map&lt;string, multiset&lt;string&gt;&gt; targets</code> \u904d\u5386multiset\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u5220\u9664\u5143\u7d20\uff0c\u4e00\u65e6\u5220\u9664\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u5c31\u5931\u6548\u4e86\u3002 \u7528<code>unordered_map&lt;string, map&lt;string, int&gt;&gt; targets</code>\uff1a<code>unordered_map&lt;\u51fa\u53d1\u673a\u573a, map&lt;\u5230\u8fbe\u673a\u573a, \u822a\u73ed\u6b21\u6570&gt;&gt; targets</code></p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;string, map&lt;string, int&gt;&gt;adj;\n    vector&lt;string&gt;res;\n    int n = 0;\n    bool dfs() {\n        if (res.size() == n) {\n            return true;\n        }\n        // &amp;: \u4fee\u6539map\u91cc\u7684\u539f\u503c\uff0ckey\u662fconstant\uff0c\u4e0d\u53ef\u4fee\u6539\n        for (pair&lt;const string, int&gt;&amp; x: adj[res[res.size() - 1]]) {\n            if (x.second &gt; 0) {\n                res.push_back(x.first);\n                x.second--;\n                if (dfs()) {\n                    return true;\n                }\n                res.pop_back();\n                x.second++;\n            }\n        }\n        return false;\n    }\n    vector&lt;string&gt; findItinerary(vector&lt;vector&lt;string&gt;&gt;&amp; tickets) {\n        n = tickets.size() + 1;\n        for (auto x: tickets) {\n            adj[x[0]][x[1]]++;\n        }\n        res.push_back(\"JFK\");\n        dfs();\n        return res;\n    }\n};\n</code></pre> <p>51. N-Queens</p> <p>\u9898\u76ee\uff1an \u7687\u540e\u95ee\u9898 \u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 n \u4e2a\u7687\u540e\u653e\u7f6e\u5728 n\u00d7n \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u4e0d\u540c\u7684 n \u7687\u540e\u95ee\u9898 \u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d 'Q' \u548c '.' \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002</p> <p>\u601d\u8def\uff1a \u68cb\u76d8\u7684\u5bbd\u5ea6\u5c31\u662ffor\u5faa\u73af\u7684\u957f\u5ea6\uff0c\u9012\u5f52\u7684\u6df1\u5ea6\u5c31\u662f\u68cb\u76d8\u7684\u9ad8\u5ea6</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt;res;\n    bool isValid(int r, int c, vector&lt;string&gt;&amp;board, int n) {\n        for (int i = 0; i &lt; r; i++) {\n            if (board[i][c] == 'Q') {\n                return false;\n            }\n        }\n        for (int i = r - 1, j = c - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        for (int i = r - 1, j = c + 1; i &gt;= 0 &amp;&amp; j &lt; n; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        return true;\n    }\n    void backtrack(int n, int r, vector&lt;string&gt;&amp;board) {\n        if (r == n) {\n            res.push_back(board);\n            return;\n        }\n        for (int c = 0; c &lt; n; c++) {\n            if (isValid(r, c, board, n)) {\n                board[r][c] = 'Q';\n                backtrack(n, r + 1, board);\n                board[r][c] = '.';\n            }\n        }\n    }\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        vector&lt;string&gt;board(n, string(n, '.'));\n        backtrack(n, 0, board);\n        return res;\n    }\n};\n</code></pre> <p>37. Sudoku Solver</p> <p>\u9898\u76ee\uff1a \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u586b\u5145\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002</p> <p>\u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002</p> <pre><code>class Solution {\nprivate:\nbool backtracking(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n    for (int i = 0; i &lt; board.size(); i++) {        // \u904d\u5386\u884c\n        for (int j = 0; j &lt; board[0].size(); j++) { // \u904d\u5386\u5217\n            if (board[i][j] == '.') {\n                for (char k = '1'; k &lt;= '9'; k++) {     // (i, j) \u8fd9\u4e2a\u4f4d\u7f6e\u653ek\u662f\u5426\u5408\u9002\n                    if (isValid(i, j, k, board)) {\n                        board[i][j] = k;                // \u653e\u7f6ek\n                        if (backtracking(board)) return true; // \u5982\u679c\u627e\u5230\u5408\u9002\u4e00\u7ec4\u7acb\u523b\u8fd4\u56de\n                        board[i][j] = '.';              // \u56de\u6eaf\uff0c\u64a4\u9500k\n                    }\n                }\n                return false;  // 9\u4e2a\u6570\u90fd\u8bd5\u5b8c\u4e86\uff0c\u90fd\u4e0d\u884c\uff0c\u90a3\u4e48\u5c31\u8fd4\u56defalse\n            }\n        }\n    }\n    return true; // \u904d\u5386\u5b8c\u6ca1\u6709\u8fd4\u56defalse\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u5408\u9002\u68cb\u76d8\u4f4d\u7f6e\u4e86\n}\nbool isValid(int row, int col, char val, vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n    for (int i = 0; i &lt; 9; i++) { // \u5224\u65ad\u884c\u91cc\u662f\u5426\u91cd\u590d\n        if (board[row][i] == val) {\n            return false;\n        }\n    }\n    for (int j = 0; j &lt; 9; j++) { // \u5224\u65ad\u5217\u91cc\u662f\u5426\u91cd\u590d\n        if (board[j][col] == val) {\n            return false;\n        }\n    }\n    int startRow = (row / 3) * 3;\n    int startCol = (col / 3) * 3;\n    for (int i = startRow; i &lt; startRow + 3; i++) { // \u5224\u65ad9\u65b9\u683c\u91cc\u662f\u5426\u91cd\u590d\n        for (int j = startCol; j &lt; startCol + 3; j++) {\n            if (board[i][j] == val ) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\npublic:\n    void solveSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        backtracking(board);\n    }\n};\n</code></pre> <p>\u5b50\u96c6\u95ee\u9898\u5206\u6790\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2 ^ n)\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u65e0\u5916\u4e4e\u53d6\u4e0e\u4e0d\u53d6\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(2^n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u9012\u5f52\u6df1\u5ea6\u4e3an\uff0c\u6240\u4ee5\u7cfb\u7edf\u6808\u6240\u7528\u7a7a\u95f4\u4e3aO(n)\uff0c\u6bcf\u4e00\u5c42\u9012\u5f52\u6240\u7528\u7684\u7a7a\u95f4\u90fd\u662f\u5e38\u6570\u7ea7\u522b\uff0c\u6ce8\u610f\u4ee3\u7801\u91cc\u7684result\u548cpath\u90fd\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u5c31\u7b97\u662f\u653e\u5728\u53c2\u6570\u91cc\uff0c\u4f20\u7684\u4e5f\u662f\u5f15\u7528\uff0c\u5e76\u4e0d\u4f1a\u65b0\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u6700\u7ec8\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)</p> <p>\u6392\u5217\u95ee\u9898\u5206\u6790\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n!)\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4ece\u6392\u5217\u7684\u6811\u5f62\u56fe\u4e2d\u5f88\u660e\u663e\u53d1\u73b0\uff0c\u6bcf\u4e00\u5c42\u8282\u70b9\u4e3an\uff0c\u7b2c\u4e8c\u5c42\u6bcf\u4e00\u4e2a\u5206\u652f\u90fd\u5ef6\u4f38\u4e86n-1\u4e2a\u5206\u652f\uff0c\u518d\u5f80\u4e0b\u53c8\u662fn-2\u4e2a\u5206\u652f\uff0c\u6240\u4ee5\u4e00\u76f4\u5230\u53f6\u5b50\u8282\u70b9\u4e00\u5171\u5c31\u662f n * n-1 * n-2 * ..... 1 = n!\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u548c\u5b50\u96c6\u95ee\u9898\u540c\u7406\u3002</p> <p>\u7ec4\u5408\u95ee\u9898\u5206\u6790\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2^n)\uff0c\u7ec4\u5408\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u5b50\u96c6\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u7ec4\u5408\u95ee\u9898\u6700\u574f\u7684\u60c5\u51b5\uff0c\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u5b50\u96c6\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u548c\u5b50\u96c6\u95ee\u9898\u540c\u7406\u3002</p> <p>N\u7687\u540e\u95ee\u9898\u5206\u6790\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n!) \uff0c\u5176\u5b9e\u5982\u679c\u770b\u6811\u5f62\u56fe\u7684\u8bdd\uff0c\u76f4\u89c9\u4e0a\u662fO(n^n)\uff0c\u4f46\u7687\u540e\u4e4b\u95f4\u4e0d\u80fd\u89c1\u9762\u6240\u4ee5\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u662f\u6709\u526a\u679d\u7684\uff0c\u6700\u5dee\u4e5f\u5c31\u662fO\uff08n!\uff09\uff0cn!\u8868\u793an * (n-1) * .... * 1\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u548c\u5b50\u96c6\u95ee\u9898\u540c\u7406\u3002</p> <p>\u89e3\u6570\u72ec\u95ee\u9898\u5206\u6790\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(9^m) , m\u662f'.'\u7684\u6570\u76ee\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n ^ 2)\uff0c\u9012\u5f52\u7684\u6df1\u5ea6\u662fn^2</p> <p></p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day27.html","title":"Day 27 \u8d2a\u5fc3","text":"<p>\u8d2a\u5fc3\u7684\u672c\u8d28\u662f\u9009\u62e9\u6bcf\u4e00\u9636\u6bb5\u7684\u5c40\u90e8\u6700\u4f18\uff0c\u4ece\u800c\u8fbe\u5230\u5168\u5c40\u6700\u4f18\u3002 \u9a8c\u8bc1\u662f\u5426\u53ef\u4ee5\u7528\u8d2a\u5fc3\uff1a\u4e3e\u53cd\u4f8b</p> <ul> <li>\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898</li> <li>\u627e\u51fa\u9002\u5408\u7684\u8d2a\u5fc3\u7b56\u7565</li> <li>\u6c42\u89e3\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3</li> <li>\u5c06\u5c40\u90e8\u6700\u4f18\u89e3\u5806\u53e0\u6210\u5168\u5c40\u6700\u4f18\u89e3</li> </ul> <p>455. Assign Cookies</p> <p>\u9898\u76ee\uff1a\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002</p> <p>\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i\uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c  g[i]\uff0c\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j\uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 s[j] \u3002\u5982\u679c s[j] &gt;= g[i]\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002</p> <p>\u601d\u8def\uff1a\u8fd9\u91cc\u7684\u5c40\u90e8\u6700\u4f18\u5c31\u662f\u5927\u997c\u5e72\u5582\u7ed9\u80c3\u53e3\u5927\u7684\uff0c\u5145\u5206\u5229\u7528\u997c\u5e72\u5c3a\u5bf8\u5582\u9971\u4e00\u4e2a\uff0c\u5168\u5c40\u6700\u4f18\u5c31\u662f\u5582\u9971\u5c3d\u53ef\u80fd\u591a\u7684\u5c0f\u5b69\u3002</p> <p>376. Wiggle Subsequence</p> <p>\u9898\u76ee\uff1a\u5982\u679c\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u4e25\u683c\u5730\u5728\u6b63\u6570\u548c\u8d1f\u6570\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5219\u6570\u5b57\u5e8f\u5217\u79f0\u4e3a\u6446\u52a8\u5e8f\u5217\u3002\u7b2c\u4e00\u4e2a\u5dee\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\u3002\u5c11\u4e8e\u4e24\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u4e5f\u662f\u6446\u52a8\u5e8f\u5217\u3002</p> <p>\u4f8b\u5982\uff0c [1,7,4,9,2,5] \u662f\u4e00\u4e2a\u6446\u52a8\u5e8f\u5217\uff0c\u56e0\u4e3a\u5dee\u503c (6,-3,5,-7,3)  \u662f\u6b63\u8d1f\u4ea4\u66ff\u51fa\u73b0\u7684\u3002\u76f8\u53cd, [1,4,7,2,5]  \u548c  [1,7,4,5,5] \u4e0d\u662f\u6446\u52a8\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u524d\u4e24\u4e2a\u5dee\u503c\u90fd\u662f\u6b63\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5dee\u503c\u4e3a\u96f6\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u8fd4\u56de\u4f5c\u4e3a\u6446\u52a8\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u901a\u8fc7\u4ece\u539f\u59cb\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5143\u7d20\u6765\u83b7\u5f97\u5b50\u5e8f\u5217\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u987a\u5e8f\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u5c40\u90e8\u6700\u4f18\uff1a\u5220\u9664\u5355\u8c03\u5761\u5ea6\u4e0a\u7684\u8282\u70b9\uff08\u4e0d\u5305\u62ec\u5355\u8c03\u5761\u5ea6\u4e24\u7aef\u7684\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5761\u5ea6\u5c31\u53ef\u4ee5\u6709\u4e24\u4e2a\u5c40\u90e8\u5cf0\u503c\u3002</p> <p>\u6574\u4f53\u6700\u4f18\uff1a\u6574\u4e2a\u5e8f\u5217\u6709\u6700\u591a\u7684\u5c40\u90e8\u5cf0\u503c\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u957f\u6446\u52a8\u5e8f\u5217\u3002</p> <p></p> <ul> <li>\u60c5\u51b5\u4e00\uff1a\u4e0a\u4e0b\u5761\u4e2d\u6709\u5e73\u5761 \u8bb0\u5f55\u5cf0\u503c\u7684\u6761\u4ef6\u662f\uff1a (preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0) || (preDiff &gt;= 0 &amp;&amp; curDiff &lt; 0)</li> <li>\u60c5\u51b5\u4e8c\uff1a\u6570\u7ec4\u9996\u5c3e\u4e24\u7aef result \u521d\u59cb\u4e3a 1\uff08\u9ed8\u8ba4\u6700\u53f3\u9762\u6709\u4e00\u4e2a\u5cf0\u503c\uff09\uff0c\u6b64\u65f6 curDiff &gt; 0 &amp;&amp; preDiff &lt;= 0\uff0c\u90a3\u4e48 result++\uff08\u8ba1\u7b97\u4e86\u5de6\u9762\u7684\u5cf0\u503c\uff09\uff0c\u6700\u540e\u5f97\u5230\u7684 result \u5c31\u662f 2\uff08\u5cf0\u503c\u4e2a\u6570\u4e3a 2 \u5373\u6446\u52a8\u5e8f\u5217\u957f\u5ea6\u4e3a 2\uff09</li> <li>\u60c5\u51b5\u4e09\uff1a\u5355\u8c03\u5761\u4e2d\u6709\u5e73\u5761 \u53ea\u9700\u8981\u5728 \u8fd9\u4e2a\u5761\u5ea6 \u6446\u52a8\u53d8\u5316\u7684\u65f6\u5019\uff0c\u66f4\u65b0 prediff \u5c31\u884c\uff0c\u8fd9\u6837 prediff \u5728 \u5355\u8c03\u533a\u95f4\u6709\u5e73\u5761\u7684\u65f6\u5019 \u5c31\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u9020\u6210\u6211\u4eec\u7684\u8bef\u5224</li> </ul> <pre><code>class Solution {\npublic:\n    int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() &lt;= 1) {\n            return nums.size();\n        }\n        // \u9ed8\u8ba4\u5e8f\u5217\u6700\u53f3\u8fb9\u6709\u4e00\u4e2a\u5cf0\u503c\n        int cnt = 1;\n        int currD = 0;\n        int preD = 0;\n        for (int i = 0; i &lt; nums.size() - 1; i++) {\n            currD = nums[i + 1] - nums[i];\n            if ((preD &lt;= 0 &amp;&amp; currD &gt; 0) || (preD &gt;= 0 &amp;&amp; currD &lt; 0)) {\n                cnt++;\n                // \u53ea\u5728\u62cd\u52a8\u53d8\u5316\u65f6\u66f4\u65b0prevD\n                preD = currD;\n            }\n        }\n        return cnt;\n    }\n};\n</code></pre> <p>\u52a8\u6001\u89c4\u5212</p> <pre><code>class Solution {\npublic:\n    int dp[1005][2];\n    int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n        memset(dp, 0, sizeof dp);\n        // dp[i][0]\uff0c\u8868\u793a\u8003\u8651\u524d i \u4e2a\u6570\uff0c\u7b2c i \u4e2a\u6570\u4f5c\u4e3a\u5c71\u5cf0\u7684\u6446\u52a8\u5b50\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\n        // dp[i][1]\uff0c\u8868\u793a\u8003\u8651\u524d i \u4e2a\u6570\uff0c\u7b2c i \u4e2a\u6570\u4f5c\u4e3a\u5c71\u8c37\u7684\u6446\u52a8\u5b50\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\n        dp[0][0] = dp[0][1] = 1;\n        for (int i = 1; i &lt; nums.size(); ++i) {\n            dp[i][0] = dp[i][1] = 1;\n            for (int j = 0; j &lt; i; ++j) {\n                // \u8868\u793a\u5c06 nums[i]\u63a5\u5230\u524d\u9762\u67d0\u4e2a\u5c71\u5cf0\u540e\u9762\uff0c\u4f5c\u4e3a\u5c71\u8c37\u3002\n                if (nums[j] &gt; nums[i]) dp[i][1] = max(dp[i][1], dp[j][0] + 1);\n            }\n            for (int j = 0; j &lt; i; ++j) {\n                // \u8868\u793a\u5c06 nums[i]\u63a5\u5230\u524d\u9762\u67d0\u4e2a\u5c71\u8c37\u540e\u9762\uff0c\u4f5c\u4e3a\u5c71\u5cf0\u3002\n                if (nums[j] &lt; nums[i]) dp[i][0] = max(dp[i][0], dp[j][1] + 1);\n            }\n        }\n        return max(dp[nums.size() - 1][0], dp[nums.size() - 1][1]);\n    }\n};\n</code></pre> <p>\u8fdb\u9636</p> <p>\u53ef\u4ee5\u7528\u4e24\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u503c \u6bcf\u6b21\u66f4\u65b0dp[i][0]\uff0c\u5219\u5728tree1\u7684nums[i]\u4f4d\u7f6e\u503c\u66f4\u65b0\u4e3adp[i][0] \u6bcf\u6b21\u66f4\u65b0dp[i][1]\uff0c\u5219\u5728tree2\u7684nums[i]\u4f4d\u7f6e\u503c\u66f4\u65b0\u4e3adp[i][1] \u5219 dp \u8f6c\u79fb\u65b9\u7a0b\u4e2d\u5c31\u6ca1\u6709\u5fc5\u8981 j \u4ece 0 \u904d\u5386\u5230 i-1\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e2d\u67e5\u8be2\u6307\u5b9a\u533a\u95f4\u7684\u503c\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day28.html","title":"Day 28 \u8d2a\u5fc3","text":"<p>122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices \uff0c\u5176\u4e2d prices[i] \u8868\u793a\u67d0\u652f\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u5728\u6bcf\u4e00\u5929\uff0c\u4f60\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u8d2d\u4e70\u548c/\u6216\u51fa\u552e\u80a1\u7968\u3002\u4f60\u5728\u4efb\u4f55\u65f6\u5019 \u6700\u591a \u53ea\u80fd\u6301\u6709 \u4e00\u80a1 \u80a1\u7968\u3002\u4f60\u4e5f\u53ef\u4ee5\u5148\u8d2d\u4e70\uff0c\u7136\u540e\u5728 \u540c\u4e00\u5929 \u51fa\u552e\u3002</p> <p>\u8fd4\u56de \u4f60\u80fd\u83b7\u5f97\u7684 \u6700\u5927 \u5229\u6da6 \u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int result = 0;\n        for (int i = 1; i &lt; prices.size(); i++) {\n            // \u6bcf\u5929\u6536\u96c6\u6b63\u5229\u6da6\n            result += max(prices[i] - prices[i - 1], 0);\n        }\n        return result;\n    }\n};\n\n// \u52a8\u6001\u89c4\u5212\nclass Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        // dp[i][1]\u7b2ci\u5929\u6301\u6709\u7684\u6700\u591a\u73b0\u91d1\n        // dp[i][0]\u7b2ci\u5929\u6301\u6709\u80a1\u7968\u540e\u7684\u6700\u591a\u73b0\u91d1\n        int n = prices.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(2, 0));\n        dp[0][0] -= prices[0]; // \u6301\u80a1\u7968\n        for (int i = 1; i &lt; n; i++) {\n            // \u7b2ci\u5929\u6301\u80a1\u7968\u6240\u5269\u6700\u591a\u73b0\u91d1 = max(\u7b2ci-1\u5929\u6301\u80a1\u7968\u6240\u5269\u73b0\u91d1, \u7b2ci-1\u5929\u6301\u73b0\u91d1-\u4e70\u7b2ci\u5929\u7684\u80a1\u7968)\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);\n            // \u7b2ci\u5929\u6301\u6709\u6700\u591a\u73b0\u91d1 = max(\u7b2ci-1\u5929\u6301\u6709\u7684\u6700\u591a\u73b0\u91d1\uff0c\u7b2ci-1\u5929\u6301\u6709\u80a1\u7968\u7684\u6700\u591a\u73b0\u91d1+\u7b2ci\u5929\u5356\u51fa\u80a1\u7968)\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);\n        }\n        return max(dp[n - 1][0], dp[n - 1][1]);\n    }\n};\n</code></pre> <p>45. \u8df3\u8dc3\u6e38\u620f II</p> <p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684 0 \u7d22\u5f15\u6574\u6570\u6570\u7ec4 nums\u3002\u521d\u59cb\u4f4d\u7f6e\u4e3a nums[0]\u3002</p> <p>\u6bcf\u4e2a\u5143\u7d20 nums[i] \u8868\u793a\u4ece\u7d22\u5f15 i \u5411\u524d\u8df3\u8f6c\u7684\u6700\u5927\u957f\u5ea6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4f60\u5728 nums[i] \u5904\uff0c\u4f60\u53ef\u4ee5\u8df3\u8f6c\u5230\u4efb\u610f nums[i + j] \u5904:</p> <p>0 &lt;= j &lt;= nums[i]  i + j &lt; n \u8fd4\u56de\u5230\u8fbe nums[n - 1] \u7684\u6700\u5c0f\u8df3\u8dc3\u6b21\u6570\u3002\u751f\u6210\u7684\u6d4b\u8bd5\u7528\u4f8b\u53ef\u4ee5\u5230\u8fbe nums[n - 1]\u3002</p> <pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 1) {\n            return 0;\n        }\n        int curD = 0;\n        int nextD = 0;\n        int ans = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            nextD = max(nextD, nums[i] + i);\n            //  \u5df2\u7ecf\u5230\u8fbe\u5f53\u524d\u53ef\u4ee5\u8d70\u7684\u6700\u5927\u503c\n            if (i == curD) {\n                ans++;\n                curD = nextD;\n                if (nextD &gt;= nums.size() - 1) {\n                    return ans;\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day29.html","title":"Day 29 \u8d2a\u5fc3","text":"<p>1005. K \u6b21\u53d6\u53cd\u540e\u6700\u5927\u5316\u7684\u6570\u7ec4\u548c</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u6309\u4ee5\u4e0b\u65b9\u6cd5\u4fee\u6539\u8be5\u6570\u7ec4\uff1a</p> <p>\u9009\u62e9\u67d0\u4e2a\u4e0b\u6807 i \u5e76\u5c06 nums[i] \u66ff\u6362\u4e3a -nums[i] \u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u6070\u597d k \u6b21\u3002\u53ef\u4ee5\u591a\u6b21\u9009\u62e9\u540c\u4e00\u4e2a\u4e0b\u6807 i \u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4fee\u6539\u6570\u7ec4\u540e\uff0c\u8fd4\u56de\u6570\u7ec4 \u53ef\u80fd\u7684\u6700\u5927\u548c \u3002</p> <pre><code>class Solution {\nstatic bool cmp(int a, int b) {\n    return abs(a) &gt; abs(b);\n}\npublic:\n    int largestSumAfterKNegations(vector&lt;int&gt;&amp; A, int K) {\n        sort(A.begin(), A.end(), cmp);       // \u7b2c\u4e00\u6b65 \u7528\u7edd\u5bf9\u503c\u5927\u5c0f\u6392\u5e8f\n        for (int i = 0; i &lt; A.size(); i++) { // \u7b2c\u4e8c\u6b65\n            if (A[i] &lt; 0 &amp;&amp; K &gt; 0) {\n                A[i] *= -1;\n                K--;\n            }\n        }\n        if (K % 2 == 1) A[A.size() - 1] *= -1; // \u7b2c\u4e09\u6b65 \u7edd\u5bf9\u503c\u6700\u5c0f\u7684\u53d6\u53cd\n        int result = 0;\n        for (int a : A) result += a;        // \u7b2c\u56db\u6b65\n        return result;\n    }\n};\n</code></pre> <p>134. \u52a0\u6cb9\u7ad9</p> <p>\u9898\u76ee\uff1a\u5728\u4e00\u6761\u73af\u8def\u4e0a\u6709 n \u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u6709\u6c7d\u6cb9 gas[i] \u5347\u3002</p> <p>\u4f60\u6709\u4e00\u8f86\u6cb9\u7bb1\u5bb9\u91cf\u65e0\u9650\u7684\u7684\u6c7d\u8f66\uff0c\u4ece\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u5f00\u5f80\u7b2c i+1 \u4e2a\u52a0\u6cb9\u7ad9\u9700\u8981\u6d88\u8017\u6c7d\u6cb9 cost[i] \u5347\u3002\u4f60\u4ece\u5176\u4e2d\u7684\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5f00\u59cb\u65f6\u6cb9\u7bb1\u4e3a\u7a7a\u3002</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 gas \u548c cost \uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\uff0c\u5219\u8fd4\u56de\u51fa\u53d1\u65f6\u52a0\u6cb9\u7ad9\u7684\u7f16\u53f7\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002\u5982\u679c\u5b58\u5728\u89e3\uff0c\u5219 \u4fdd\u8bc1 \u5b83\u662f \u552f\u4e00 \u7684\u3002</p> <p>\u601d\u8def\uff1a\u5c40\u90e8\u6700\u4f18\uff1a\u5f53\u524d\u7d2f\u52a0rest[i]\u7684\u548ccurSum\u4e00\u65e6\u5c0f\u4e8e0\uff0c\u8d77\u59cb\u4f4d\u7f6e\u81f3\u5c11\u8981\u662fi+1\uff0c\u56e0\u4e3a\u4ecei\u4e4b\u524d\u5f00\u59cb\u4e00\u5b9a\u4e0d\u884c\u3002\u5168\u5c40\u6700\u4f18\uff1a\u627e\u5230\u53ef\u4ee5\u8dd1\u4e00\u5708\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p> <pre><code>class Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        int curr = 0;\n        int total = 0;\n        int idx = 0;\n        for (int i = 0; i &lt; gas.size(); i++) {\n            curr += gas[i] - cost[i];\n            total += gas[i] - cost[i];\n            if (curr &lt; 0) {\n                idx = i + 1;\n                curr = 0;\n            }\n        }\n        if (total &lt; 0) {\n            return -1;\n        }\n        return idx;\n    }\n};\n</code></pre> <p>135. \u5206\u53d1\u7cd6\u679c</p> <p>\u9898\u76ee\uff1an \u4e2a\u5b69\u5b50\u7ad9\u6210\u4e00\u6392\u3002\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ratings \u8868\u793a\u6bcf\u4e2a\u5b69\u5b50\u7684\u8bc4\u5206\u3002</p> <p>\u4f60\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\uff0c\u7ed9\u8fd9\u4e9b\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff1a</p> <p>\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\u3002 \u76f8\u90bb\u4e24\u4e2a\u5b69\u5b50\u8bc4\u5206\u66f4\u9ad8\u7684\u5b69\u5b50\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\u3002 \u8bf7\u4f60\u7ed9\u6bcf\u4e2a\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u9700\u8981\u51c6\u5907\u7684 \u6700\u5c11\u7cd6\u679c\u6570\u76ee \u3002</p> <p>\u601d\u8def\uff1a \u4e00\u6b21\u662f\u4ece\u5de6\u5230\u53f3\u904d\u5386\uff0c\u53ea\u6bd4\u8f83\u53f3\u8fb9\u5b69\u5b50\u8bc4\u5206\u6bd4\u5de6\u8fb9\u5927\u7684\u60c5\u51b5\u3002 \u4e00\u6b21\u662f\u4ece\u53f3\u5230\u5de6\u904d\u5386\uff0c\u53ea\u6bd4\u8f83\u5de6\u8fb9\u5b69\u5b50\u8bc4\u5206\u6bd4\u53f3\u8fb9\u5927\u7684\u60c5\u51b5\u3002</p> <pre><code>class Solution {\npublic:\n    int candy(vector&lt;int&gt;&amp; ratings) {\n        vector&lt;int&gt;res(ratings.size(), 1);\n        for (int i = 1; i &lt; ratings.size(); i++) {\n            if (ratings[i + 1] &gt; ratings[i]) {\n                res[i + 1] = max(res[i + 1], res[i] + 1);\n            }\n        }\n        for (int i = ratings.size() - 2; i &gt;= 0; i--) {\n            if (ratings[i + 1] &lt; ratings[i]) {\n                res[i] = max(res[i], res[i + 1] + 1);\n            }\n        }\n        return accumulate(res.begin(), res.end(), 0);\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day30.html","title":"Day 30 \u8d2a\u5fc3","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day30.html#860","title":"860. \u67e0\u6aac\u6c34\u627e\u96f6","text":"<p>\u9898\u76ee\uff1a\u5728\u67e0\u6aac\u6c34\u644a\u4e0a\uff0c\u6bcf\u4e00\u676f\u67e0\u6aac\u6c34\u7684\u552e\u4ef7\u4e3a 5 \u7f8e\u5143\u3002</p> <p>\u987e\u5ba2\u6392\u961f\u8d2d\u4e70\u4f60\u7684\u4ea7\u54c1\uff0c\uff08\u6309\u8d26\u5355 bills \u652f\u4ed8\u7684\u987a\u5e8f\uff09\u4e00\u6b21\u8d2d\u4e70\u4e00\u676f\u3002</p> <p>\u6bcf\u4f4d\u987e\u5ba2\u53ea\u4e70\u4e00\u676f\u67e0\u6aac\u6c34\uff0c\u7136\u540e\u5411\u4f60\u4ed8 5 \u7f8e\u5143\u300110 \u7f8e\u5143\u6216 20 \u7f8e\u5143\u3002\u4f60\u5fc5\u987b\u7ed9\u6bcf\u4e2a\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u51c0\u4ea4\u6613\u662f\u6bcf\u4f4d\u987e\u5ba2\u5411\u4f60\u652f\u4ed8 5 \u7f8e\u5143\u3002</p> <p>\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u4f60\u624b\u5934\u6ca1\u6709\u4efb\u4f55\u96f6\u94b1\u3002</p> <p>\u5982\u679c\u4f60\u80fd\u7ed9\u6bcf\u4f4d\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002</p> <p>\u601d\u8def\uff1a\u53ea\u9700\u8981\u7ef4\u62a4\u4e09\u79cd\u91d1\u989d\u7684\u6570\u91cf\uff0c5\uff0c10\u548c20\u30025\u6bd410\u66f4\u6709\u7528\uff0c\u4f18\u5148\u752810\u3002</p> <pre><code>class Solution {\npublic:\n    bool lemonadeChange(vector&lt;int&gt;&amp; bills) {\n        int fi = 0;\n        int te = 0;\n        int tw = 0;\n        for (auto x: bills) {\n            if (x == 5) {\n                fi++;\n            } else if (x == 10) {\n                if (fi &lt;= 0) {\n                    return false;\n                }\n                fi--;\n                te++;\n            } else {\n                if (fi &gt; 0 &amp;&amp; te &gt; 0) {\n                    fi--;\n                    te--;\n                    tw++;\n                } else if (fi &gt;= 3) {\n                    fi -= 3;\n                    tw++;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day30.html#406","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217","text":"<p>\u9898\u76ee\uff1a\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6570\u7ec4 people \u8868\u793a\u961f\u5217\u4e2d\u4e00\u4e9b\u4eba\u7684\u5c5e\u6027\uff08\u4e0d\u4e00\u5b9a\u6309\u987a\u5e8f\uff09\u3002\u6bcf\u4e2a people[i] = [hi, ki] \u8868\u793a\u7b2c i \u4e2a\u4eba\u7684\u8eab\u9ad8\u4e3a hi \uff0c\u524d\u9762 \u6b63\u597d \u6709 ki \u4e2a\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8e hi \u7684\u4eba\u3002</p> <p>\u8bf7\u4f60\u91cd\u65b0\u6784\u9020\u5e76\u8fd4\u56de\u8f93\u5165\u6570\u7ec4 people \u6240\u8868\u793a\u7684\u961f\u5217\u3002\u8fd4\u56de\u7684\u961f\u5217\u5e94\u8be5\u683c\u5f0f\u5316\u4e3a\u6570\u7ec4 queue \uff0c\u5176\u4e2d queue[j] = [hj, kj] \u662f\u961f\u5217\u4e2d\u7b2c j \u4e2a\u4eba\u7684\u5c5e\u6027\uff08queue[0] \u662f\u6392\u5728\u961f\u5217\u524d\u9762\u7684\u4eba\uff09\u3002</p> <p>\u601d\u8def\uff1a\u4ece\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u6392\uff0c\u63d2\u5165ki\u4f4d\uff0c\u56e0\u4e3a\u540e\u63d2\u5165\u7684\u6570\u5c0f\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5df2\u7ecf\u63d2\u5165\u7684\u6570\u3002List\u5e95\u5c42\u5b9e\u73b0\u662fLinked List, \u63d2\u5165\u8017\u65f6\u6bd4vector\u77ed\u3002</p> <p>\u5c40\u90e8\u6700\u4f18\uff1a\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\u3002\u63d2\u5165\u64cd\u4f5c\u8fc7\u540e\u7684people\u6ee1\u8db3\u961f\u5217\u5c5e\u6027</p> <p>\u5168\u5c40\u6700\u4f18\uff1a\u6700\u540e\u90fd\u505a\u5b8c\u63d2\u5165\u64cd\u4f5c\uff0c\u6574\u4e2a\u961f\u5217\u6ee1\u8db3\u9898\u76ee\u961f\u5217\u5c5e\u6027</p> <pre><code>class Solution {\npublic:\n    static bool cmp(vector&lt;int&gt;&amp;a, vector&lt;int&gt;&amp;b) {\n        if (a[0] == b[0]) {\n            return a[1] &lt; b[1];\n        }\n        return a[0] &gt; b[0];\n    }\n    vector&lt;vector&lt;int&gt;&gt; reconstructQueue(vector&lt;vector&lt;int&gt;&gt;&amp; people) {\n        sort(people.begin(), people.end(), cmp);\n        list&lt;vector&lt;int&gt;&gt;qu;\n        for (int i = 0; i &lt; people.size(); i++) {\n            int pos = people[i][1];\n            list&lt;vector&lt;int&gt;&gt;::iterator it = qu.begin();\n            while (pos--) {\n                it++;\n            }\n            qu.insert(it, people[i]);\n        }\n        return vector&lt;vector&lt;int&gt;&gt;(qu.begin(), qu.end());\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day30.html#452","title":"452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403","text":"<p>\u9898\u76ee\uff1a\u6709\u4e00\u4e9b\u7403\u5f62\u6c14\u7403\u8d34\u5728\u4e00\u5835\u7528 XY \u5e73\u9762\u8868\u793a\u7684\u5899\u9762\u4e0a\u3002\u5899\u9762\u4e0a\u7684\u6c14\u7403\u8bb0\u5f55\u5728\u6574\u6570\u6570\u7ec4 points \uff0c\u5176\u4e2dpoints[i] = [xstart, xend] \u8868\u793a\u6c34\u5e73\u76f4\u5f84\u5728 xstart \u548c xend\u4e4b\u95f4\u7684\u6c14\u7403\u3002\u4f60\u4e0d\u77e5\u9053\u6c14\u7403\u7684\u786e\u5207 y \u5750\u6807\u3002</p> <p>\u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740 x \u8f74\u4ece\u4e0d\u540c\u70b9 \u5b8c\u5168\u5782\u76f4 \u5730\u5c04\u51fa\u3002\u5728\u5750\u6807 x \u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a xstart\uff0cxend\uff0c \u4e14\u6ee1\u8db3  xstart \u2264 x \u2264 xend\uff0c\u5219\u8be5\u6c14\u7403\u4f1a\u88ab \u5f15\u7206 \u3002\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf \u6ca1\u6709\u9650\u5236 \u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 points \uff0c\u8fd4\u56de\u5f15\u7206\u6240\u6709\u6c14\u7403\u6240\u5fc5\u987b\u5c04\u51fa\u7684 \u6700\u5c0f \u5f13\u7bad\u6570 \u3002</p> <p>\u601d\u8def\uff1a\u6392\u5e8f\uff0c\u8ba9\u6c14\u7403\u5c3d\u53ef\u80fd\u7684\u91cd\u53e0\uff0c\u66f4\u65b0\u53f3\u8fb9\u8fb9\u754c\u7684\u6700\u5c0f\u503c\u3002</p> <pre><code>class Solution {\npublic:\n    int findMinArrowShots(vector&lt;vector&lt;int&gt;&gt;&amp; points) {\n        sort(points.begin(), points.end());\n        int cnt = 1;\n        for (int i = 1; i &lt; points.size(); i++) {\n            if (points[i][0] &gt; points[i - 1][1]) {\n                cnt++;\n            } else {\n                points[i][1] = min(points[i][1], points[i - 1][1]);\n            }\n        }\n        return cnt;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day31.html","title":"Day 31 \u8d2a\u5fc3","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day31.html#435","title":"435. \u65e0\u91cd\u53e0\u533a\u95f4","text":"<p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408 intervals \uff0c\u5176\u4e2d intervals[i] = [starti, endi] \u3002\u8fd4\u56de \u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0 \u3002</p> <pre><code>class Solution {\npublic:\n    static bool cmp(vector&lt;int&gt;&amp;a, vector&lt;int&gt;&amp;b) {\n        return a[1] &lt; b[1];\n    }\n    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        sort(intervals.begin(), intervals.end(), cmp);\n        int count = 1; // \u8bb0\u5f55\u975e\u4ea4\u53c9\u533a\u95f4\u7684\u4e2a\u6570\n        int end = intervals[0][1]; // \u8bb0\u5f55\u533a\u95f4\u5206\u5272\u70b9\n        for (int i = 1; i &lt; intervals.size(); i++) {\n            if (end &lt;= intervals[i][0]) {\n                end = intervals[i][1];\n                count++;\n            }\n        }\n        return intervals.size() - count;\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day32.html","title":"Day 32 \u8d2a\u5fc3\uff0c\u52a8\u6001\u89c4\u5212","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day32.html#738","title":"738. \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57","text":"<p>\u9898\u76ee\uff1a\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u76f8\u90bb\u4f4d\u6570\u4e0a\u7684\u6570\u5b57 x \u548c y \u6ee1\u8db3 x &lt;= y \u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6574\u6570\u662f\u5355\u8c03\u9012\u589e\u7684\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de \u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u6700\u5927\u6570\u5b57\uff0c\u4e14\u6570\u5b57\u5448 \u5355\u8c03\u9012\u589e \u3002</p> <p>\u601d\u8def\uff1a\u4ece\u540e\u5f80\u524d\u904d\u5386\uff08\u91cd\u590d\u5229\u7528\u4e0a\u6b21\u6bd4\u8f83\u7684\u7ed3\u679c\uff09\uff0c\u627e\u5230\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u4e0b\u6807\uff0c\u51cf\u4e00\uff0c\u5269\u4f59\u6570\u5b57\u5c3d\u53ef\u80fd\u7684\u5927\uff0c\u6539\u4e3a9\u3002</p> <pre><code>class Solution {\npublic:\n    int monotoneIncreasingDigits(int n) {\n        string num = to_string(n);\n        int idx = num.length();\n        for (int i = idx - 1; i &gt; 0; i--) {\n            if (num[i - 1] &gt; num[i]) {\n                num[i - 1]--;\n                idx = i;\n            }\n        }\n        for (int i = idx; i &lt; num.length(); i++) {\n            num[i] = '9';\n        }\n        return stoi(num);\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day32.html#968","title":"968. \u76d1\u63a7\u4e8c\u53c9\u6811","text":"<p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u5728\u6811\u7684\u8282\u70b9\u4e0a\u5b89\u88c5\u6444\u50cf\u5934\u3002</p> <p>\u8282\u70b9\u4e0a\u7684\u6bcf\u4e2a\u6444\u5f71\u5934\u90fd\u53ef\u4ee5\u76d1\u89c6\u5176\u7236\u5bf9\u8c61\u3001\u81ea\u8eab\u53ca\u5176\u76f4\u63a5\u5b50\u5bf9\u8c61\u3002</p> <p>\u8ba1\u7b97\u76d1\u63a7\u6811\u7684\u6240\u6709\u8282\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6444\u50cf\u5934\u6570\u91cf\u3002</p> <p>\u601d\u8def\uff1a\u5c40\u90e8\u6700\u4f18\uff1a\u8ba9\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u5b89\u6444\u50cf\u5934\uff0c\u6240\u7528\u6444\u50cf\u5934\u6700\u5c11\uff0c\u6574\u4f53\u6700\u4f18\uff1a\u5168\u90e8\u6444\u50cf\u5934\u6570\u91cf\u6240\u7528\u6700\u5c11 \u4ece\u4e0b\u5f80\u4e0a\uff1a\u540e\u5e8f\u904d\u5386</p> <p>\u8282\u70b9\u72b6\u6001\uff1a\u8be5\u8282\u70b9\u65e0\u8986\u76d6/\u672c\u8282\u70b9\u6709\u6444\u50cf\u5934/\u672c\u8282\u70b9\u6709\u8986\u76d6 \u7a7a\u8282\u70b9\u7684\u72b6\u6001\u53ea\u80fd\u662f\u6709\u8986\u76d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u653e\u6444\u50cf\u5934</p> <pre><code>class Solution {\npublic:\n    int res;\n    int traverse(TreeNode* root) {\n        // 0\uff1a\u8be5\u8282\u70b9\u65e0\u8986\u76d6\n        // 1\uff1a\u672c\u8282\u70b9\u6709\u6444\u50cf\u5934\n        // 2\uff1a\u672c\u8282\u70b9\u6709\u8986\u76d6\n        if (!root) {\n            // \u7a7a\u8282\u70b9\u4e3a\u5df2\u8986\u76d6\n            return 2;\n        }\n        int l = traverse(root-&gt;left);\n        int r = traverse(root-&gt;right);\n        if (l == 2 &amp;&amp; r == 2) {\n            return 0;\n        } else if (l == 0 || r == 0) {\n            res++;\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n    int minCameraCover(TreeNode* root) {\n        res = 0;\n        if (traverse(root) == 0) {\n            res++;\n        }\n        return res;\n    }\n};\n</code></pre> <p></p> <p>\u52a8\u6001\u89c4\u5212\u4e2d\u6bcf\u4e00\u4e2a\u72b6\u6001\u4e00\u5b9a\u662f\u7531\u4e0a\u4e00\u4e2a\u72b6\u6001\u63a8\u5bfc\u51fa\u6765\u7684\uff0c\u8fd9\u4e00\u70b9\u533a\u5206\u4e8e\u8d2a\u5fc3\uff0c\u8d2a\u5fc3\u6ca1\u6709\u72b6\u6001\u63a8\u5bfc\uff0c\u800c\u662f\u4ece\u5c40\u90e8\u76f4\u63a5\u9009\u6700\u4f18\u7684</p> <ul> <li>\u786e\u5b9adp\u6570\u7ec4\uff08dp table\uff09\u4ee5\u53ca\u4e0b\u6807\u7684\u542b\u4e49</li> <li>\u786e\u5b9a\u9012\u63a8\u516c\u5f0f</li> <li>dp\u6570\u7ec4\u5982\u4f55\u521d\u59cb\u5316</li> <li>\u786e\u5b9a\u904d\u5386\u987a\u5e8f</li> <li>\u4e3e\u4f8b\u63a8\u5bfcdp\u6570\u7ec4</li> </ul>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day32.html#746","title":"746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af","text":"<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cost \uff0c\u5176\u4e2d cost[i] \u662f\u4ece\u697c\u68af\u7b2c i \u4e2a\u53f0\u9636\u5411\u4e0a\u722c\u9700\u8981\u652f\u4ed8\u7684\u8d39\u7528\u3002\u4e00\u65e6\u4f60\u652f\u4ed8\u6b64\u8d39\u7528\uff0c\u5373\u53ef\u9009\u62e9\u5411\u4e0a\u722c\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u53f0\u9636\u3002</p> <p>\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u4e0b\u6807\u4e3a 0 \u6216\u4e0b\u6807\u4e3a 1 \u7684\u53f0\u9636\u5f00\u59cb\u722c\u697c\u68af\u3002</p> <p>\u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u8fbe\u5230\u697c\u68af\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002</p> <pre><code>class Solution {\npublic:\n    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        vector&lt;int&gt; dp(cost.size() + 1);\n        dp[0] = 0; // \u9ed8\u8ba4\u7b2c\u4e00\u6b65\u90fd\u662f\u4e0d\u82b1\u8d39\u4f53\u529b\u7684\n        dp[1] = 0;\n        for (int i = 2; i &lt;= cost.size(); i++) {\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[cost.size()];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day33.html","title":"Day 33 \u52a8\u6001\u89c4\u5212","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day33.html#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6b63\u6574\u6570\u7684\u975e\u7a7a\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u6ce8\u610f: \u6bcf\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8d85\u8fc7 100 \u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 200</p> <pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        if (sum % 2 != 0) {\n            return false;\n        }\n        sum /= 2;\n        vector&lt;vector&lt;bool&gt;&gt;dp(sum + 1, vector&lt;bool&gt;(nums.size() + 1, false));\n        dp[0][0] = true;\n        for (int i = 1; i &lt;= sum; i++) {\n            for (int j = 1; j &lt;= nums.size(); j++) {\n                if (i - nums[j - 1] &gt;= 0) {\n                    dp[i][j] = dp[i][j - 1] || dp[i - nums[j - 1]][j - 1];\n                } else {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n        return dp[sum][nums.size()];\n\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html","title":"Day 34 \u52a8\u6001\u89c4\u5212","text":"<ul> <li>\u786e\u5b9adp\u6570\u7ec4\uff08dp table\uff09\u4ee5\u53ca\u4e0b\u6807\u7684\u542b\u4e49</li> <li>\u786e\u5b9a\u9012\u63a8\u516c\u5f0f</li> <li>dp\u6570\u7ec4\u5982\u4f55\u521d\u59cb\u5316</li> <li>\u786e\u5b9a\u904d\u5386\u987a\u5e8f</li> <li>\u4e3e\u4f8b\u63a8\u5bfcdp\u6570\u7ec4</li> </ul>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#01","title":"01\u80cc\u5305","text":"<p>\u521d\u59cb\u5316: \u4e00\u5b9a\u8981\u548cdp\u6570\u7ec4\u7684\u5b9a\u4e49\u543b\u5408\uff0c\u5426\u5219\u5230\u9012\u63a8\u516c\u5f0f\u7684\u65f6\u5019\u5c31\u4f1a\u8d8a\u6765\u8d8a\u4e71\u3002</p> <pre><code>// \u521d\u59cb\u5316 dp\nvector&lt;vector&lt;int&gt;&gt; dp(weight.size(), vector&lt;int&gt;(bagweight + 1, 0));\nfor (int j = weight[0]; j &lt;= bagweight; j++) {\n    dp[0][j] = value[0];\n}\n</code></pre> <p>\u9012\u63a8\u516c\u5f0f: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</p> <p>\u786e\u5b9a\u904d\u5386\u987a\u5e8f</p> <p>\u4e8c\u7ef4dp\u904d\u5386\u7684\u65f6\u5019\uff0c\u80cc\u5305\u5bb9\u91cf\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u800c\u4e00\u7ef4dp\u904d\u5386\u7684\u65f6\u5019\uff0c\u80cc\u5305\u662f\u4ece\u5927\u5230\u5c0f\u3002 \u5012\u5e8f\u904d\u5386\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7269\u54c1i\u53ea\u88ab\u653e\u5165\u4e00\u6b21</p> <p>\u4e8c\u7ef4dp\u6570\u7ec4\u5386\u7684\u65f6\u5019\u4e0d\u7528\u5012\u5e8f: \u56e0\u4e3a\u5bf9\u4e8e\u4e8c\u7ef4dp\uff0cdp[i][j]\u90fd\u662f\u901a\u8fc7\u4e0a\u4e00\u5c42\u5373dp[i - 1][j]\u8ba1\u7b97\u800c\u6765\uff0c\u672c\u5c42\u7684dp[i][j]\u5e76\u4e0d\u4f1a\u88ab\u8986\u76d6</p> <p>\u4e24\u4e2a\u5d4c\u5957for\u5faa\u73af\u7684\u987a\u5e8f\uff0c\u4ee3\u7801\u4e2d\u662f\u5148\u904d\u5386\u7269\u54c1\u5d4c\u5957\u904d\u5386\u80cc\u5305\u5bb9\u91cf\uff0c\u4e0d\u53ef\u4ee5\u5148\u904d\u5386\u80cc\u5305\u5bb9\u91cf\u5d4c\u5957\u904d\u5386\u7269\u54c1</p> <p>\u5982\u679c\u904d\u5386\u80cc\u5305\u5bb9\u91cf\u653e\u5728\u4e0a\u4e00\u5c42\uff0c\u90a3\u4e48\u6bcf\u4e2adp[j]\u5c31\u53ea\u4f1a\u653e\u5165\u4e00\u4e2a\u7269\u54c1</p> <p>\u5012\u5e8f\u904d\u5386\u7684\u539f\u56e0\u662f\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u7684\u904d\u5386\uff0c\u5e76\u4e14\u53f3\u4e0b\u89d2\u7684\u503c\u4f9d\u8d56\u4e0a\u4e00\u5c42\u5de6\u4e0a\u89d2\u7684\u503c\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u8bc1\u5de6\u8fb9\u7684\u503c\u4ecd\u7136\u662f\u4e0a\u4e00\u5c42\u7684\uff0c\u4ece\u53f3\u5411\u5de6\u8986\u76d6\u3002</p> <pre><code>// weight\u6570\u7ec4\u7684\u5927\u5c0f \u5c31\u662f\u7269\u54c1\u4e2a\u6570\nfor(int j = 0; j &lt;= bagweight; j++) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n    for(int i = 1; i &lt; weight.size(); i++) { // \u904d\u5386\u7269\u54c1\n        if (j &lt; weight[i]) dp[i][j] = dp[i - 1][j];\n        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n    }\n}\n\n// \u4e00\u7ef4\u6eda\u52a8\u6570\u7ec4\nvector&lt;int&gt; dp(bagWeight + 1, 0);\nfor(int i = 0; i &lt; weight.size(); i++) { // \u904d\u5386\u7269\u54c1\n    for(int j = bagWeight; j &gt;= weight[i]; j--) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n</code></pre> <p>\u5728\u6c42\u88c5\u6ee1\u80cc\u5305\u6709\u51e0\u79cd\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u9012\u63a8\u516c\u5f0f\u4e00\u822c\u4e3a\uff1a</p> <pre><code>dp[j] += dp[j - nums[i]];\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#_1","title":"\u5b8c\u5168\u80cc\u5305","text":"<p>\u5b8c\u5168\u80cc\u5305\u7684\u7269\u54c1\u662f\u53ef\u4ee5\u6dfb\u52a0\u591a\u6b21\u7684  \u5bf9\u4e8e\u7eaf\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u5176for\u5faa\u73af\u7684\u5148\u540e\u5faa\u73af\u662f\u53ef\u4ee5\u98a0\u5012\u7684</p> <pre><code>// \u5148\u904d\u5386\u7269\u54c1\uff0c\u518d\u904d\u5386\u80cc\u5305\nfor(int i = 0; i &lt; weight.size(); i++) { // \u904d\u5386\u7269\u54c1\n    for(int j = weight[i]; j &lt;= bagWeight ; j++) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n\n    }\n}\n\n// \u7ec4\u5408\u6570\nfor (int i = 0; i &lt; coins.size(); i++) { // \u904d\u5386\u7269\u54c1\n    for (int j = coins[i]; j &lt;= amount; j++) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n        dp[j] += dp[j - coins[i]];\n    }\n}\n\n// \u6392\u5217\u6570\uff0c [1, 5], [5, 1]\u662f\u4e24\u7ec4\u6570\nfor (int j = 0; j &lt;= amount; j++) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n    for (int i = 0; i &lt; coins.size(); i++) { // \u904d\u5386\u7269\u54c1\n        if (j - coins[i] &gt;= 0) dp[j] += dp[j - coins[i]];\n    }\n}\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#_2","title":"\u591a\u91cd\u80cc\u5305","text":"<p>\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u6709Mi\u4ef6\u53ef\u7528\uff0c\u628aMi\u4ef6\u644a\u5f00\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a01\u80cc\u5305\u95ee\u9898</p> <pre><code>void test_multi_pack() {\n    vector&lt;int&gt; weight = {1, 3, 4};\n    vector&lt;int&gt; value = {15, 20, 30};\n    vector&lt;int&gt; nums = {2, 3, 2};\n    int bagWeight = 10;\n    for (int i = 0; i &lt; nums.size(); i++) {\n        while (nums[i] &gt; 1) { // nums[i]\u4fdd\u7559\u52301\uff0c\u628a\u5176\u4ed6\u7269\u54c1\u90fd\u5c55\u5f00\n            weight.push_back(weight[i]);\n            value.push_back(value[i]);\n            nums[i]--;\n        }\n    }\n\n    vector&lt;int&gt; dp(bagWeight + 1, 0);\n    for(int i = 0; i &lt; weight.size(); i++) { // \u904d\u5386\u7269\u54c1\n        for(int j = bagWeight; j &gt;= weight[i]; j--) { // \u904d\u5386\u80cc\u5305\u5bb9\u91cf\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n        for (int j = 0; j &lt;= bagWeight; j++) {\n            cout &lt;&lt; dp[j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;\n\n}\nint main() {\n    test_multi_pack();\n}\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#1049-ii","title":"1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II","text":"<p>\u9898\u76ee\uff1a\u6709\u4e00\u5806\u77f3\u5934\uff0c\u7528\u6574\u6570\u6570\u7ec4 stones \u8868\u793a\u3002\u5176\u4e2d stones[i] \u8868\u793a\u7b2c i \u5757\u77f3\u5934\u7684\u91cd\u91cf\u3002</p> <p>\u6bcf\u4e00\u56de\u5408\uff0c\u4ece\u4e2d\u9009\u51fa\u4efb\u610f\u4e24\u5757\u77f3\u5934\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e00\u8d77\u7c89\u788e\u3002\u5047\u8bbe\u77f3\u5934\u7684\u91cd\u91cf\u5206\u522b\u4e3a x \u548c y\uff0c\u4e14 x &lt;= y\u3002\u90a3\u4e48\u7c89\u788e\u7684\u53ef\u80fd\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p>\u5982\u679c x == y\uff0c\u90a3\u4e48\u4e24\u5757\u77f3\u5934\u90fd\u4f1a\u88ab\u5b8c\u5168\u7c89\u788e\uff1b \u5982\u679c x != y\uff0c\u90a3\u4e48\u91cd\u91cf\u4e3a x \u7684\u77f3\u5934\u5c06\u4f1a\u5b8c\u5168\u7c89\u788e\uff0c\u800c\u91cd\u91cf\u4e3a y \u7684\u77f3\u5934\u65b0\u91cd\u91cf\u4e3a y-x\u3002 \u6700\u540e\uff0c\u6700\u591a\u53ea\u4f1a\u5269\u4e0b\u4e00\u5757 \u77f3\u5934\u3002\u8fd4\u56de\u6b64\u77f3\u5934 \u6700\u5c0f\u7684\u53ef\u80fd\u91cd\u91cf \u3002\u5982\u679c\u6ca1\u6709\u77f3\u5934\u5269\u4e0b\uff0c\u5c31\u8fd4\u56de 0\u3002</p> <p>\u601d\u8def\uff1a\u5c3d\u91cf\u8ba9\u77f3\u5934\u5206\u6210\u91cd\u91cf\u76f8\u540c\u7684\u4e24\u5806\uff0c\u76f8\u649e\u4e4b\u540e\u5269\u4e0b\u7684\u77f3\u5934\u6700\u5c0f dp[j]\u8868\u793a\u5bb9\u91cf\uff08\u8fd9\u91cc\u8bf4\u5bb9\u91cf\u66f4\u5f62\u8c61\uff0c\u5176\u5b9e\u5c31\u662f\u91cd\u91cf\uff09\u4e3aj\u7684\u80cc\u5305\uff0c\u6700\u591a\u53ef\u4ee5\u80cc\u6700\u5927\u91cd\u91cf\u4e3adp[j]\u3002 \u7269\u54c1\u904d\u5386\u7684for\u5faa\u73af\u653e\u5728\u5916\u5c42\uff0c\u904d\u5386\u80cc\u5305\u7684for\u5faa\u73af\u653e\u5728\u5185\u5c42\uff0c\u4e14\u5185\u5c42for\u5faa\u73af\u5012\u5e8f\u904d\u5386</p> <pre><code>class Solution {\npublic:\n    int lastStoneWeightII(vector&lt;int&gt;&amp; stones) {\n        vector&lt;int&gt; dp(15001, 0);\n        int sum = accumulate(stones.begin(), stones.end(), 0);\n        int target = sum / 2;\n        for (int i = 0; i &lt; stones.size(); i++) { // \u904d\u5386\u7269\u54c1\n            for (int j = target; j &gt;= stones[i]; j--) { // \u904d\u5386\u80cc\u5305\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return sum - dp[target] - dp[target];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#494","title":"494.\u76ee\u6807\u548c","text":"<p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0ca1, a2, ..., an, \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0cS\u3002\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u7b26\u53f7 + \u548c -\u3002\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u4ece + \u6216 -\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b26\u53f7\u6dfb\u52a0\u5728\u524d\u9762\u3002</p> <p>\u8fd4\u56de\u53ef\u4ee5\u4f7f\u6700\u7ec8\u6570\u7ec4\u548c\u4e3a\u76ee\u6807\u6570 S \u7684\u6240\u6709\u6dfb\u52a0\u7b26\u53f7\u7684\u65b9\u6cd5\u6570\u3002</p> <p>\u601d\u8def\uff1a \u56de\u6eaf\u7b97\u6cd5\uff1a left\u7ec4\u5408 - right\u7ec4\u5408 = target\u3002</p> <p>left + right = sum\uff0c\u800csum\u662f\u56fa\u5b9a\u7684\u3002right = sum - left</p> <p>left - (sum - left) = target \u63a8\u5bfc\u51fa left = (target + sum)/2 \u3002</p> <p>\u95ee\u9898\u5c31\u662f\u5728\u96c6\u5408nums\u4e2d\u627e\u51fa\u548c\u4e3aleft\u7684\u7ec4\u5408\u3002</p> <p>\u52a8\u6001\u89c4\u5212\uff1a // \u8981\u6c42\u80cc\u5305\u88c5\u6ee1 dp[j] += dp[j - nums[i]];</p> <pre><code>class Solution {\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        if (abs(target) &gt; sum) {\n            return 0;\n        }\n        if ((sum + target) % 2 != 0) {\n            return 0;\n        }\n        int v = (target + sum) / 2;\n        vector&lt;int&gt;dp(v + 1, 0);\n        dp[0] = 1;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            for (int j = v; j &gt;= nums[i]; j--) {\n                dp[j] += dp[j - nums[i]];\n            }\n        }\n        return dp[v];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day34.html#474","title":"474.\u4e00\u548c\u96f6","text":"<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u7ec4 strs \u548c\u4e24\u4e2a\u6574\u6570 m \u548c n \u3002</p> <p>\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de strs \u7684\u6700\u5927\u5b50\u96c6\u7684\u5927\u5c0f\uff0c\u8be5\u5b50\u96c6\u4e2d \u6700\u591a \u6709 m \u4e2a 0 \u548c n \u4e2a 1 \u3002</p> <p>\u5982\u679c x \u7684\u6240\u6709\u5143\u7d20\u4e5f\u662f y \u7684\u5143\u7d20\uff0c\u96c6\u5408 x \u662f\u96c6\u5408 y \u7684 \u5b50\u96c6 \u3002</p> <pre><code>class Solution {\npublic:\n    int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt;dp(m + 1, vector&lt;int&gt;(n + 1));\n        for (string str: strs) {\n            int cnt0 = 0;\n            int cnt1 = 0;\n            for (auto x: str) {\n                if (x == '1') {\n                    cnt1++;\n                } else {\n                    cnt0++;\n                }\n            }\n            for (int i = m; i &gt;= cnt0; i--) {\n                for (int j = n; j &gt;= cnt1; j--) {\n                    dp[i][j] = max(dp[i][j], dp[i - cnt0][j - cnt1] + 1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day35.html","title":"Day 35 \u52a8\u6001\u89c4\u5212","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day35.html#518ii","title":"518.\u96f6\u94b1\u5151\u6362II","text":"<p>\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\u548c\u4e00\u4e2a\u603b\u91d1\u989d\u3002\u5199\u51fa\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u3002\u5047\u8bbe\u6bcf\u4e00\u79cd\u9762\u989d\u7684\u786c\u5e01\u6709\u65e0\u9650\u4e2a\u3002</p> <p>\u601d\u8def\uff1a \u5982\u679c\u6c42\u7ec4\u5408\u6570\u5c31\u662f\u5916\u5c42for\u5faa\u73af\u904d\u5386\u7269\u54c1\uff0c\u5185\u5c42for\u904d\u5386\u80cc\u5305\u3002 \u5982\u679c\u6c42\u6392\u5217\u6570\u5c31\u662f\u5916\u5c42for\u904d\u5386\u80cc\u5305\uff0c\u5185\u5c42for\u5faa\u73af\u904d\u5386\u7269\u54c1\u3002</p> <pre><code>class Solution {\npublic:\n    int change(int amount, vector&lt;int&gt;&amp; coins) {\n        vector&lt;int&gt;dp(amount + 1, 0);\n        dp[0] = 1;\n        for (int j = 0; j &lt; coins.size(); j++) { // \u904d\u5386\u7269\u54c1 \u53ea\u4f1a\u51fa\u73b0[1, 5], \u4e0d\u4f1a\u51fa\u73b0[5, 1]\n            for (int i = 1; i &lt;= amount; i++) { // \u904d\u5386\u80cc\u5305\n                if (i - coins[j] &gt;= 0) {\n                    dp[i] += dp[i - coins[j]];\n                }\n            }\n        }\n        return dp[amount];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day36.html","title":"Day 36 \u52a8\u6001\u89c4\u5212","text":""},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day36.html#96","title":"96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u00a0n\u00a0\uff0c\u6c42\u6070\u7531\u00a0n\u00a0\u4e2a\u8282\u70b9\u7ec4\u6210\u4e14\u8282\u70b9\u503c\u4ece\u00a01\u00a0\u5230\u00a0n\u00a0\u4e92\u4e0d\u76f8\u540c\u7684\u00a0\u4e8c\u53c9\u641c\u7d22\u6811\u00a0\u6709\u591a\u5c11\u79cd\uff1f\u8fd4\u56de\u6ee1\u8db3\u9898\u610f\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u79cd\u6570\u3002</p> <p>\u601d\u8def\uff1adp[i] += dp[\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf] * dp[\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u53f3\u5b50\u6811\u8282\u70b9\u6570\u91cf]</p> <pre><code>class Solution {\npublic:\n    int numTrees(int n) {\n        vector&lt;int&gt;dp(n + 1);\n        dp[0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= i; j++) {\n                dp[i] += dp[j - 1] * dp[i - j];\n            } \n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day36.html#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570 \u7684 \u975e\u7a7a \u6570\u7ec4 nums \u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u601d\u8def\uff1a 01\u80cc\u5305\uff0c\u5148\u904d\u5386\u7269\u54c1\u518d\u904d\u5386\u80cc\u5305\u5bb9\u91cf\u3002</p> <pre><code>class Solution {\npublic:\n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        if (sum % 2 != 0) {\n            return false;\n        }\n        sum /= 2;\n        vector&lt;bool&gt;dp(sum + 1, false);\n        dp[0] = true;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            for (int j = sum; j &gt;= nums[i]; j--) {\n                dp[j] = dp[j] || dp[j - nums[i]];\n            }\n        }\n        return dp[sum];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html","title":"Day 37 \u52a8\u6001\u89c4\u5212","text":"<p>\u52ab\u820d\u7cfb\u5217\u7b80\u5355\u6765\u8bf4\u5c31\u662f \u6570\u7ec4\u4e0a\u8fde\u7eed\u5143\u7d20\u4e8c\u9009\u4e00\uff0c\u6210\u73af\u4e4b\u540e\u8fde\u7eed\u5143\u7d20\u4e8c\u9009\u4e00\uff0c\u5728\u6811\u4e0a\u8fde\u7eed\u5143\u7d20\u4e8c\u9009\u4e00\uff0c\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u3002</p>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#337-iii","title":"337. \u6253\u5bb6\u52ab\u820d III","text":"<p>\u9898\u76ee\uff1a\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u00a0root\u00a0\u3002</p> <p>\u9664\u4e86\u00a0root\u00a0\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u201c\u7236\u201c\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c \u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab \uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u00a0root\u00a0\u3002\u8fd4\u56de\u00a0\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\u00a0\uff0c\u5c0f\u5077\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u00a0\u3002</p> <p>\u601d\u8def\uff1a\u672c\u9898\u4e00\u5b9a\u662f\u8981\u540e\u5e8f\u904d\u5386\uff0c\u56e0\u4e3a\u901a\u8fc7\u9012\u5f52\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u505a\u4e0b\u4e00\u6b65\u8ba1\u7b97\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt;helper(TreeNode* root) {\n        if (!root) {\n            return {0, 0};\n        }\n        vector&lt;int&gt;l = helper(root-&gt;left);\n        vector&lt;int&gt;r = helper(root-&gt;right);\n        // \u5077\u5f53\u524d\u8282\u70b9\n        int val1 = root-&gt;val + l[0] + r[0];\n        // \u4e0d\u5077\u5f53\u524d\u8282\u70b9\n        int val2 = max(l[0], l[1]) + max(r[0], r[1]);\n        return {val2, val1};\n    }\n    int rob(TreeNode* root) {\n        vector&lt;int&gt;res = helper(root);\n        return max(res[0], res[1]);\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#121","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 prices \uff0c\u5b83\u7684\u7b2c\u00a0i \u4e2a\u5143\u7d20\u00a0prices[i] \u8868\u793a\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        vector&lt;vector&lt;int&gt;&gt;dp(prices.size(), vector&lt;int&gt;(2));\n        dp[0][0] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            // \u56e0\u4e3a\u80a1\u7968\u5168\u7a0b\u53ea\u80fd\u4e70\u5356\u4e00\u6b21\uff0c\u6240\u4ee5\u5982\u679c\u4e70\u5165\u80a1\u7968\uff0c\u90a3\u4e48\u7b2ci\u5929\u6301\u6709\u80a1\u7968\u5373dp[i][0]\u4e00\u5b9a\u5c31\u662f -prices[i]\n            dp[i][0] = max(dp[i - 1][0], -prices[i]);\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);\n        }\n        return dp[dp.size() - 1][1];\n    }\n};\n\nclass Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int len = prices.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(2, vector&lt;int&gt;(2)); // \u6ce8\u610f\u8fd9\u91cc\u53ea\u5f00\u8f9f\u4e86\u4e00\u4e2a2 * 2\u5927\u5c0f\u7684\u4e8c\u7ef4\u6570\u7ec4\n        dp[0][0] -= prices[0];\n        dp[0][1] = 0;\n        for (int i = 1; i &lt; len; i++) {\n            dp[i % 2][0] = max(dp[(i - 1) % 2][0], -prices[i]);\n            dp[i % 2][1] = max(dp[(i - 1) % 2][1], prices[i] + dp[(i - 1) % 2][0]);\n        }\n        return dp[(len - 1) % 2][1];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#122-ii","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II","text":"<p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices \uff0c\u5176\u4e2d\u00a0prices[i] \u8868\u793a\u67d0\u652f\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u5728\u6bcf\u4e00\u5929\uff0c\u4f60\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u8d2d\u4e70\u548c/\u6216\u51fa\u552e\u80a1\u7968\u3002\u4f60\u5728\u4efb\u4f55\u65f6\u5019\u00a0\u6700\u591a\u00a0\u53ea\u80fd\u6301\u6709 \u4e00\u80a1 \u80a1\u7968\u3002\u4f60\u4e5f\u53ef\u4ee5\u5148\u8d2d\u4e70\uff0c\u7136\u540e\u5728 \u540c\u4e00\u5929 \u51fa\u552e\u3002</p> <p>\u8fd4\u56de \u4f60\u80fd\u83b7\u5f97\u7684 \u6700\u5927 \u5229\u6da6\u00a0\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        vector&lt;vector&lt;int&gt;&gt;dp(prices.size(), vector&lt;int&gt;(2));\n        dp[0][0] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            // \u56e0\u4e3a\u4e00\u53ea\u80a1\u7968\u53ef\u4ee5\u4e70\u5356\u591a\u6b21\uff0c\u6240\u4ee5\u5f53\u7b2ci\u5929\u4e70\u5165\u80a1\u7968\u7684\u65f6\u5019\uff0c\u6240\u6301\u6709\u7684\u73b0\u91d1\u53ef\u80fd\u6709\u4e4b\u524d\u4e70\u5356\u8fc7\u7684\u5229\u6da6\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);\n        }\n        return dp[dp.size() - 1][1];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#123-iii","title":"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III","text":"<p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0\u4e24\u7b14\u00a0\u4ea4\u6613\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u601d\u8def\uff1a\u4e00\u5929\u4e00\u5171\u5c31\u6709\u4e94\u4e2a\u72b6\u6001\uff0c</p> <ul> <li>\u6ca1\u6709\u64cd\u4f5c \uff08\u5176\u5b9e\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u8bbe\u7f6e\u8fd9\u4e2a\u72b6\u6001\uff09</li> <li>\u7b2c\u4e00\u6b21\u6301\u6709\u80a1\u7968</li> <li>\u7b2c\u4e00\u6b21\u4e0d\u6301\u6709\u80a1\u7968</li> <li>\u7b2c\u4e8c\u6b21\u6301\u6709\u80a1\u7968</li> <li>\u7b2c\u4e8c\u6b21\u4e0d\u6301\u6709\u80a1\u7968</li> </ul> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        vector&lt;vector&lt;int&gt;&gt;dp(prices.size(), vector&lt;int&gt;(5));\n        dp[0][1] = -prices[0];\n        dp[0][3] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            dp[i][0] = dp[i - 1][0];\n            dp[i][1] = max(dp[i - 1][1], -prices[i] + dp[i - 1][0]);\n            dp[i][2] = max(dp[i - 1][2], +prices[i] + dp[i - 1][1]);\n            dp[i][3] = max(dp[i - 1][3], -prices[i] + dp[i - 1][2]);\n            dp[i][4] = max(dp[i - 1][4], +prices[i] + dp[i - 1][3]);\n        }\n        return dp[dp.size() - 1][4];\n    }\n};\n\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#188-iv","title":"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV","text":"<p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0prices \uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u00a0prices[i] \u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\uff0c\u548c\u4e00\u4e2a\u6574\u578b k \u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 k \u7b14\u4ea4\u6613\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u4e70 k \u6b21\uff0c\u5356 k \u6b21\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(int k, vector&lt;int&gt;&amp; prices) {\n        vector&lt;vector&lt;int&gt;&gt;dp(prices.size(), vector&lt;int&gt;(2 * k + 1));\n        for (int i = 1; i &lt;= 2 * k; i += 2) {\n            dp[0][i] = -prices[0];\n        }\n        for (int i = 1; i &lt; prices.size(); i++) {\n            for (int j = 0; j &lt; 2 * k - 1; j += 2) {\n                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);\n                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);\n            }\n        }\n        return dp[dp.size() - 1][2 * k];\n    }\n};\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-Day37.html#309","title":"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f","text":"<p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4prices\uff0c\u5176\u4e2d\u7b2c\u00a0\u00a0prices[i]\u00a0\u8868\u793a\u7b2c\u00a0i\u00a0\u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002\u200b</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p> <p>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        vector&lt;vector&lt;int&gt;&gt;dp(prices.size(), vector&lt;int&gt;(3));\n        dp[0][1] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            dp[i][0] = max({dp[i - 1][0], dp[i - 1][1], dp[i - 1][2]});\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]);\n        }\n        return dp[dp.size() - 1][2];\n    }\n};\n</code></pre>"},{"location":"%E8%AE%AD%E7%BB%83%E8%90%A5-Day2.html","title":"Day 2","text":"<p>977.\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u9012\u589e\u6570\u7ec4nums\uff08\u5305\u542b\u8d1f\u6570\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e14\u6570\u7ec4\u8981\u6c42\u91cc\u9762\u7684\u5143\u7d20\u662f\u7ed9\u5b9a\u6570\u7ec4nums\u91cc\u9762\u5143\u7d20\u7684\u5e73\u65b9\uff0c\u8fd8\u8981\u6c42\u9012\u589e</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt;res(nums.size());\n        int l = 0;\n        int r = nums.size() - 1;\n        int idx = r;\n        while (l &lt;= r) {\n            // \u6bcf\u6b21\u6bd4\u8f83\u4e24\u7aef\u7684\u503c\uff0c\u56e0\u4e3a\u6700\u5927\u503c\u53ea\u4f1a\u5728\u4e24\u7aef\u51fa\u73b0\n            if (abs(nums[l]) &gt; abs(nums[r])) {\n                // \u653e\u8fdb\u7ed3\u679c\u6570\u7ec4\u7684\u672b\u5c3e\n                res[idx] = (nums[l] * nums[l]);\n                l++;\n            } else {\n                res[idx] = (nums[r] * nums[r]);\n                r--;\n            }\n            idx--;\n        }\n        return res;\n    }\n};\n</code></pre> <p>209.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4</p> <p>\u9898\u76ee\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4\u548ctarget\uff0c\u6c42\u51fa\u4e00\u4e2a\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5b50\u6570\u7ec4\u76f8\u52a0\u8981\u5927\u4e8etarget\uff0c\u8fd4\u56de\u5b50\u6570\u7ec4\u6700\u77ed\u7684\u957f\u5ea6</p> <p>\u601d\u8def\uff1a\u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int res = INT_MAX;\n        int l = 0;\n        int r = 0;\n        int sum = 0;\n        while (r &lt; nums.size()) {\n            sum += nums[r];\n            r++;\n            while (sum - nums[l] &gt;= target) {\n                sum -= nums[l];\n                l++;\n            }\n            if (sum &gt;= target) {\n                res = min(res, r - l);\n            }\n        }\n        return res == INT_MAX ? 0 : res;\n    }\n};\n</code></pre> <p>59. \u87ba\u65cb\u77e9\u9635II</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2an\uff0c\u751f\u6210NxN\u7684\u77e9\u9635\uff0c\u5e76\u4e14\u8981\u6c42\u4f60\u987a\u65f6\u9488\u586b\u51651\uff0c2\uff0c3\uff0c4\uff0c5...</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) {\n        vector&lt;vector&lt;int&gt;&gt;dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        vector&lt;vector&lt;int&gt;&gt;res(n, vector&lt;int&gt;(n));\n        vector&lt;vector&lt;bool&gt;&gt;visited(n, vector&lt;bool&gt;(n, false));\n        int num = 1;\n        int x = 0;\n        int y = 0;\n        int idx = 0;\n        while (num &lt;= n * n) {\n            res[x][y] = num;\n            visited[x][y] = true;\n            int xi = x + dir[idx][0];\n            int yi = y + dir[idx][1];\n            if (!(xi &gt;= 0 &amp;&amp; xi &lt; n &amp;&amp; yi &gt;= 0 &amp;&amp; yi &lt; n) || visited[xi][yi]) {\n                idx =  (idx + 1) % 4;\n                xi = x + dir[idx][0];\n                yi = y + dir[idx][1];\n            }\n            x = xi;\n            y = yi;\n            num++;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"%E8%AE%AD%E7%BB%83%E8%90%A5-Day3.html","title":"Day 3","text":"<p>203. \u79fb\u9664\u94fe\u8868\u5143\u7d20</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2aval\uff0c\u5220\u9664\u6240\u6709\u8282\u70b9\u503c\u7b49\u4e8eval\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u94fe\u8868</p> <p>\u601d\u8def\uff1adummy\u5904\u7406\u5934\u8282\u70b9\uff0caccess next\u524d\u8bb0\u5f97\u5148\u5224\u5b9anext\u4e0d\u4e3a\u7a7a</p> <pre><code>class Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        if (!head) {\n            return NULL;\n        }\n        ListNode* dummy = new ListNode(0, head);\n        ListNode* copy = dummy;\n        while (dummy) {\n            if (dummy-&gt;next &amp;&amp; dummy-&gt;next-&gt;val == val) {\n                dummy-&gt;next = dummy-&gt;next-&gt;next;\n            } else {\n                dummy = dummy-&gt;next;\n            }\n        }\n        return copy-&gt;next;\n    }\n};\n</code></pre> <p>707. \u8bbe\u8ba1\u94fe\u8868</p> <pre><code>class MyLinkedList {\npublic:\n    struct Node {\n        int val;\n        Node* next;\n        Node(int v): val(v), next(NULL) {}\n    };\n    Node* dummy = new Node(0);\n    int size = 0;\n    MyLinkedList() {\n\n    }\n\n    int get(int index) {\n        if (index &gt;= size) {\n            return -1;\n        }\n        Node* curr = dummy-&gt;next;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        return curr-&gt;val;\n    }\n\n    void addAtHead(int val) {\n        Node* node = new Node(val);\n        node-&gt;next = dummy-&gt;next;\n        dummy-&gt;next = node;\n        size++;\n    }\n\n    void addAtTail(int val) {\n        Node* curr = dummy;\n        while (curr &amp;&amp; curr-&gt;next) {\n            curr = curr-&gt;next;\n        }\n        curr-&gt;next = new Node(val);\n        size++;\n    }\n\n    void addAtIndex(int index, int val) {\n        if (index &gt; size) {\n            return;\n        } else if (index == size) {\n            addAtTail(val);\n            return;\n        }\n        Node* curr = dummy;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        Node* node = new Node(val);\n        node-&gt;next = curr-&gt;next;\n        curr-&gt;next = node;\n        size++;\n    }\n\n    void deleteAtIndex(int index) {\n        if (index &gt;= size) {\n            return;\n        } \n        Node* curr = dummy;\n        while (index &amp;&amp; curr) {\n            curr = curr-&gt;next;\n            index--;\n        }\n        curr-&gt;next = curr-&gt;next-&gt;next;\n        size--;\n    }\n};\n</code></pre> <p>206. \u53cd\u8f6c\u94fe\u8868</p> <p>\u9898\u76ee\uff1a \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u8fd4\u56de\u5934\u8282\u70b9</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        while (head) {\n            ListNode* next = head-&gt;next;\n            head-&gt;next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n};\n</code></pre>"}]}